<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="using">
  <title>Using MacPorts</title>

  <para>This chapter describes using the <command>port</command> command, port
  variants, common tasks and port binaries<!--, and setting up an rsync
  replication server-->.</para>

  <section id="using.port">
    <title>The port Command</title>

    <para>The MacPorts <command>port</command> command is the main utility
    used to interact with MacPorts. It is used to update
    <filename>Portfile</filename>s and the MacPorts infrastructure, and
    install and manage ports.</para>

    <section id="using.port.selfupdate">
      <title>selfupdate</title>

      <para>The <option>selfupdate</option> option should be used regularly to
      <option>sync</option> the local ports tree with the global MacPorts
      ports repository so you will have the latest port versions. It also
      checks for new revisions of the MacPorts infrastructure, called MacPorts
      base, and upgrades it when necessary.</para>

      <note>
        <para>Selfupdate runs only on Mac OS X. If you are running MacPorts on
        another platform, you must use option <link
        linkend="using.port.sync">sync</link> to update the ports tree; to
        update MacPorts base you must manually install a newer version from
        source.</para>
      </note>

      <programlisting><prompt>%%</prompt> <userinput>sudo port selfupdate</userinput></programlisting>

      <para>Use the debug flag for verbose output.</para>

      <programlisting><prompt>%%</prompt> <userinput>sudo port -d selfupdate</userinput></programlisting>

      <screen>DEBUG: Rebuilding the MacPorts base system if needed.
DEBUG: Synchronizing ports tree(s)
Synchronizing from rsync://rsync.macports.org/release/ports/
DEBUG: /usr/bin/rsync -rtzv --delete-after rsync://rsync.macports.org/release/ports/
receiving file list ... done

[ ... trimmed ... ]


The MacPorts installation is not outdated and so was not updated
DEBUG: Setting ownership to root
selfupdate done!</screen>

      <para>If selfupdate detects that a newer version of MacPorts base is
      available, it automatically updates the installed copy of MacPorts base
      to the latest released version. In that case, you will see the upgrade
      Makefile execute, and when it finishes you will see this message:</para>

      <screen>DEBUG: Updating using rsync
receiving file list ... done

Congratulations, you have successfully installed the MacPorts system.</screen>
    </section>

    <section id="using.port.sync">
      <title>sync</title>

      <para>The <option>sync</option> option performs a subset of
      <option>selfupdate</option> actions. It synchronizes the ports tree, as
      does <option>selfupdate</option>, but it does not check for upgrades to
      MacPorts base. On Mac OS X, unless there is a special reason not to do
      so, you should run <link
      linkend="using.port.selfupdate">selfupdate</link>.</para>

      <note>
        <para>For platforms other than Mac OS X, <option>sync</option> is the
        only way to get port updates because <option>selfupdate</option> is
        supported only on Mac OS X.</para>
      </note>
    </section>

    <section id="using.port.list">
      <title>list</title>

      <para>The <option>list</option> option is used to get a list of all
      available ports. The list of available ports is very long, so use <link
      linkend="using.port.search">search</link> if you know a port's name or
      part of it.</para>

      <programlisting><prompt>%%</prompt> <userinput>port list</userinput></programlisting>
    </section>

    <section id="using.port.search">
      <title>search</title>

      <para>The <option>search</option> option is very useful to find port
      names by partial matches.</para>

      <programlisting><prompt>%%</prompt> <userinput>port search rrd</userinput></programlisting>

      <screen>rrdtool          net/rrdtool       1.2.23    Round Robin Database
php5-rrdtool     www/php5-rrdtool  1.0       PHP 5 glue for RRDtool</screen>
    </section>

    <section id="using.port.info">
      <title>info</title>

      <para>The <option>info</option> option is used to get information about
      a port: description, maintainer, etc.</para>

      <programlisting><prompt>%%</prompt> <userinput>port info flowd</userinput></programlisting>

      <screen>flowd 0.9, net/flowd (Variants: universal, darwin_8)
http://www.mindrot.org/flowd.html

flowd is a small, fast and secure NetFlow collector.

Platforms: darwin
Maintainers: nomaintainer@macports.org</screen>
    </section>

    <section id="using.port.deps">
      <title>deps</title>

      <para>The <option>deps</option> option shows you the dependencies of a
      port; dependencies are explicitly declared in
      <filename>Portfile</filename>s.</para>

      <programlisting><prompt>%%</prompt> <userinput>port deps apache2</userinput></programlisting>

      <screen>apache2 has library dependencies on:
        apr
        apr-util
        expat
        openssl
        pcre</screen>
    </section>

    <section id="using.port.variants">
      <title>variants</title>

      <para>The <option>variants</option> option allows you to check what
      variations of a port are available before you install it. Variants are a
      way for port authors to provide options that may be invoked at install
      time. See <link linkend="using.variants.invoking">Invoking Port
      Variants</link> below to install ports that have variants.</para>

      <programlisting><prompt>%%</prompt> <userinput>port variants nmap</userinput></programlisting>

      <screen>nmap has the variants:
        universal
        gtk2
        no_ssl
        no_pcre</screen>
    </section>

    <section id="using.port.install">
      <title>install</title>

      <para>The option <option>install</option> is used to install a port. See
      <link linkend="using.variants.invoking">Invoking Port Variants</link>
      below to install ports that have variants.</para>

      <programlisting><prompt>%%</prompt> <userinput>sudo port install nmap</userinput></programlisting>

      <note>
        <para>You may break up a port's installation into smaller steps for
        troubleshooting by passing <command>port</command> a prior
        installation phase such as fetch, configure, build, or destroot. See
        section <link linkend="reference.phases">Port Phases</link> for a
        complete list of phases.</para>
      </note>
    </section>

    <section id="using.port.clean">
      <title>clean</title>

      <para>The option <option>clean</option> deletes all intermediate files
      that MacPorts creates while building a port. A <userinput>port
      clean</userinput> is also often necessary to remove corrupted tarballs
      after a failed <userinput>fetch</userinput> phase.</para>

      <programlisting><prompt>%%</prompt> <userinput>port clean --all vile</userinput></programlisting>

      <note>
        <para>You may also clean files selectively by using options
        <option>--dist</option>, <option>--archive</option>, or
        <option>--work</option>.</para>
      </note>
    </section>

    <section id="using.port.uninstall">
      <title>uninstall</title>

      <para>The <option>uninstall</option> option will uninstall an installed
      port.</para>

      <programlisting><prompt>%%</prompt> <userinput>port uninstall vile</userinput></programlisting>

      <note>
        <para>If a port as installed as a dependency of another port,
        uninstall will not remove it unless you remove the dependent ports
        first. To override this behavior, use the <option>-f</option> (force)
        switch. But some ports need to be rebuilt if dependencies change, so
        you should know what you are doing if you force uninstall
        ports.</para>

        <programlisting><prompt>%%</prompt> <userinput>port -f uninstall vile</userinput></programlisting>
      </note>
    </section>

    <section id="using.port.contents">
      <title>contents</title>

      <para>The <option>contents</option> option displays the files that have
      been installed by a given port. Uninstalled ports will always show no
      contents.</para>

      <programlisting><prompt>%%</prompt> <userinput>port contents render</userinput></programlisting>

      <screen>Port render contains:
  /opt/local/include/X11/extensions/render.h
  /opt/local/include/X11/extensions/renderproto.h
  /opt/local/lib/pkgconfig/render.pc
  /opt/local/share/doc/render/library
  /opt/local/share/doc/render/protocol</screen>
    </section>

    <section id="using.port.installed">
      <title>installed</title>

      <para>The <option>installed</option> option displays all installed
      ports.</para>

      <programlisting><prompt>%%</prompt> <userinput>port installed</userinput></programlisting>

      <screen>The following ports are currently installed:
  aalib @1.4rc5_2 (active)
  apr @1.2.8_0 (active)
  apr-util @1.2.8_2 (active)
  atk @1.18.0_0 (active)

[ ... trimmed ...]

  wxWidgets @2.8.4_2+darwin_8 (active)
  Xft2 @2.1.7_0 (active)
  xrender @0.9.0_0+darwin_8 (active)
  zlib @1.2.3_1 (active)</screen>
    </section>

    <section id="using.port.outdated">
      <title>outdated</title>

      <para>The <option>outdated</option> option checks your installed ports
      against the MacPorts repository to see if updated Portfiles have been
      released since your ports were installed.</para>

      <programlisting><prompt>%%</prompt> <userinput>port outdated</userinput></programlisting>

      <screen>apr                            1.2.8_0 &lt; 1.2.9_0
autoconf                       2.61_0 &lt; 2.61_1
gimp                           2.2.14_0 &lt; 2.2.16_0
libtool                        1.5.22_0 &lt; 1.5.24_0
pkgconfig                      0.21_0 &lt; 0.22_0</screen>
    </section>

    <section id="using.port.upgrade">
      <title>upgrade</title>

      <para>The <option>upgrade</option> option upgrades installed ports and
      their dependencies when a <filename>Portfile</filename> in the
      repository has been updated after a port was installed.</para>

      <programlisting><prompt>%%</prompt> <userinput>port upgrade gnome</userinput></programlisting>

      <para>If you wish not to upgrade a port's dependencies, use the
      <option>-n</option> switch.</para>

      <programlisting><prompt>%%</prompt> <userinput>port -n upgrade gnome</userinput></programlisting>

      <para>If you'd like to upgrade all outdated ports, use this
      command.</para>

      <programlisting><prompt>%%</prompt> <userinput>port upgrade outdated</userinput></programlisting>

      <note>
        <para>The <option>upgrade</option> option by default does not
        uninstall an upgraded port —it deactivates it. See section <link
        linkend="internals.images">Port Images</link>, and also Destroot and
        Activate phases in <link linkend="reference.phases">Port
        Phases</link>. If you wish to uninstall the old version, use the
        <option>-u</option> option.</para>

        <programlisting><prompt>%%</prompt> <userinput>port -u upgrade vile</userinput></programlisting>
      </note>
    </section>

    <section id="using.port.dependents">
      <title>dependents</title>

      <para>The <option>dependents</option> option reports what ports depend
      upon a given port, if any. MacPorts learns about dependents during port
      installation, so uninstalled ports will always report that there are no
      dependents.</para>

      <programlisting><prompt>%%</prompt> <userinput>port dependents openssl</userinput></programlisting>

      <screen>neon depends on openssl
gnome-vfs depends on openssl
libdap depends on openssl</screen>
    </section>

    <section id="using.port.livecheck">
      <title>livecheck</title>

      <para>The livecheck option checks to see if the application
      corresponding to a given port has been updated at the developer's
      download site. It's especially useful for port maintainers, but others
      may also wish to see if a port has the latest available distribution
      source. See section <link linkend="reference.livecheck">Livecheck</link>
      for more information.</para>

      <programlisting><prompt>%%</prompt> <userinput>port livecheck rrdtool</userinput></programlisting>

      <screen>rrdtool seems to have been updated (port version: 1.2.23, new version: 1.3beta1)</screen>

      <note>
        <para>If livecheck finds no higher version at the port's download
        site, it prints nothing. The option <option>-d</option> (debug) may be
        used for detailed livecheck processing information.</para>
      </note>

      <para></para>
    </section>
  </section>

  <section id="using.variants">
    <title>Port Variants</title>

    <para>Variants are a way for port authors to provide options for a port
    that may be chosen during the port install. To display the available
    variants, if any, use this command:</para>

    <programlisting><prompt>%%</prompt> <userinput>port variants fetchmail</userinput></programlisting>

    <screen>fetchmail has the variants:
        universal
        ssl: Support secure connections using OpenSSL
        fetchmailconf: Install a graphical configurator
        ntlm: Enable NTLM authentication</screen>

    <note>
      <para>Variant descriptions are optional, so you may not see descriptions
      for all variants.</para>
    </note>

    <section id="using.variants.invoking">
      <title>Invoking Variants</title>

      <para>A variant can only be invoked when a port is installed. After you
      have determined what variants a given port has, if any, you may install
      a port using the variant as shown.</para>

      <programlisting><prompt>%%</prompt> <userinput>port install fetchmail +ssl</userinput></programlisting>

      <para>Port variant execution may be verified using the
      <command>port</command> command with the verbose switch.</para>

      <programlisting><prompt>%%</prompt> <userinput>port -v install fetchmail +ssl</userinput></programlisting>

      <para>When a port is installed using a valid variant and specified
      correctly, the verbose output will contain:</para>

      <screen>DEBUG: Executing variant ssl provides ssl</screen>
    </section>

    <section id="using.variants.negating">
      <title>Negating Default Variants</title>

      <para>For an explanation of default variants see <link
      linkend="development.variants">Port Variants</link>. Default variants
      are optional, and not all ports using variants have them. For ports with
      default variants, you may install a port without them by negating
      default variants using "-" as shown.</para>

      <programlisting><prompt>%%</prompt> <userinput>port install fetchmail -ssl</userinput></programlisting>

      <para>To verify that you have properly negated a default variant, you
      may want to use verbose mode. But negated variants are simply not
      reported in any way by the <command>port</command> command, as if they
      did not exist. You will know you have successfully negated the default
      variant in the example above if you do <emphasis>not</emphasis> see this
      line in the verbose output.</para>

      <screen>DEBUG: Executing variant ssl provides ssl</screen>
    </section>
  </section>

  <section id="using.common-tasks">
    <title>Common Tasks</title>

    <para>This section lists common operations you may want to perform when
    managing a MacPorts installation.</para>

    <para>TODO: Add content here.</para>
  </section>

  <section id="using.binaries">
    <title>Port Binaries</title>

    <para>MacPorts can pre-compile ports into binaries so applications need
    not be compiled when installing on a target system. MacPorts may create
    two types of binaries: archives and packages.</para>

    <section id="using.binaries.archives">
      <title>Binary Archives</title>

      <para>Binary archives can only be used on a target system running
      MacPorts. Binary archives allow MacPorts utilities to begin installation
      after the destroot phase and install and activate a port on the target
      system. Binary archives are created using the <command>port</command>
      command as shown.</para>

      <programlisting><prompt>%%</prompt> <userinput>port -d archive logrotate</userinput></programlisting>

      <para>Debug output is shown below.</para>

      <screen>---&gt;  Creating logrotate-3.7_0.i386.tgz

[ ... trimmed ... ]

DEBUG:
./
./+COMMENT
./+CONTENTS
./+DESC
./+PORTFILE
./+STATE
./opt/
./opt/local/
./opt/local/etc/
./opt/local/etc/logrotate.conf
./opt/local/man/
./opt/local/man/man8/
./opt/local/man/man8/logrotate.8
./opt/local/sbin/
./opt/local/sbin/logrotate
---&gt;  Archive logrotate-3.7_0.i386.tgz packaged
DEBUG: Executing archive_finish
---&gt;  Archive for logrotate 3.7_0 packaged</screen>

      <para>Binary archive files are placed in
      <filename>${prefix}/var/macports/packages/</filename>. The archive file
      type is set in the <filename>macports.conf</filename> file. The default
      format is .tgz; other options are: tar, tbz, tbz2, tlz, xar, zip, cpgz,
      cpio.</para>
    </section>

    <section id="using.binaries.binary-packages">
      <title>Binary Packages</title>

      <para>Binary packages are standalone binary installers that are
      precompiled; they do not require MacPorts on the target system. Binary
      files created with MacPorts may be either .pkg (Mac OS X Installer
      Packages), or RPM (RPM Package Manager) format. MacPorts may also
      process a .pkg package into a Mac OS X .dmg disk image file. You may
      create binary packages with the <command>port</command> command as shown
      in these examples.</para>

      <programlisting><prompt>%%</prompt> <userinput>port pkg pstree</userinput></programlisting>

      <para>You may create a Mac OS X .dmg disk image file as shown.</para>

      <programlisting><prompt>%%</prompt> <userinput>port dmg pstree</userinput></programlisting>

      <para>You may compile a port into an RPM file as shown, in order to
      install it onto a target that has RPM utilities or a full package
      management system that can install RPMs.</para>

      <programlisting><prompt>%%</prompt> <userinput>port rpm pstree</userinput></programlisting>

      <para>All packages are placed in a port's work directory.</para>
    </section>

    <section id="using.binaries.source-packages">
      <title>Port Source Packages</title>

      <para>Source packages are bundles consisting of a
      <filename>Portfile</filename>, patches if needed, and any other files
      required to install the port. Port source packages are mainly used by
      developers of package management and port submission frameworks. Port
      source packages may be in either .portpkg (XAR) or .nosrc.rpm (SRPM)
      format.</para>
    </section>
  </section>

  <!--
  <section id="using.rsync-replication">
    <title>Rsync Replication Servers</title>

    <para>You may setup an rsync replication server on your local network to
    minimize internet delay and bandwidth when performing MacPorts selfupdate
    operations. An rsync replication server pulls the latest MacPorts base,
    development, and port sources from the remote MacPorts subversion server,
    and then serves as the rsync source when rsync replication clients on the
    local network perform selfupdates. </para>

    <note>
      <para>Only advanced users should attempt to setup an rsync replication
      server. Before doing so, please contact <email>macports-mgr @
      lists.macosforge.org</email>. If the scripts are run too often you may overload
      the MacPorts rsync mirrors; it must not be run any more often than each
      one-half hour and should be run at an offset to the clock half hour
      periods.</para>
    </note>

    <section id="using.rsync-replication.server-setup">
      <title>Rsync Server Setup</title>

      <para>TODO: This section needs to be completed.</para>

      <para>To setup a host as an rsync replication server, follow these
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Change to the portmgr directory where
          <filename>mprsyncup</filename> and <filename>rsync.repos</filename>
          reside.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd ${prefix}/var/macports/sources/rsync.macports.org/release/ \
        base/portmgr</userinput>
</programlisting>
        </listitem>

        <listitem>
          <para>Set variables in the <filename>mprsyncup</filename>
          script.</para>

          <programlisting>???</programlisting>
        </listitem>

        <listitem>
          <para>Set variables in the <filename>rsync.repos</filename>
          script.</para>

          <programlisting>???</programlisting>
        </listitem>

        <listitem>
          <para>Set the <filename>mprsyncup</filename> and
          <filename>rsync.repos</filename> scripts in
          <filename>crontab</filename>.</para>

          <note>
            <para>If you wish to setup and rsync replication server, please
            contact <email>macports-mgr@lists.macosforge.org</email>. If the
            scripts are run too often you may overload the MacPorts rsync mirrors;
            It must not be run any more often than each one-half hour and should
            be run at an offset to the clock half hour periods.</para>
          </note>

          <programlisting><prompt>%%</prompt> <userinput>sudo crontab -e</userinput></programlisting>

          <programlisting>15 * * * * ${prefix}/var/macports/sources/rsync.macports.org/release/ \
          base/portmgr/mprsyncup</programlisting>
        </listitem>
      </orderedlist>
    </section>

    <section id="using.rsync-replication.client-setup">
      <title>Rsync Client Setup</title>

      <para>To setup a host as an rsync replication client, follow these
      steps:</para>

      <orderedlist>
        <listitem>
          <para>Change to the MacPorts <filename>etc/</filename> directory to
          access <filename>macports.conf</filename> and
          <filename>sources.conf</filename>.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd ${prefix}/etc/macports</userinput></programlisting>
        </listitem>

        <listitem>
          <para>In <filename>macports.conf</filename>, set variable
          <varname>rsync_server</varname> to the rsync replication server; the
          <varname>rsync_dir</varname> path variable can be left at the
          default if you follow the defaults that the MacPorts mirrors
          use.</para>

          <programlisting>rsync_server            rsync.mycompany.com

rsync_dir               release/base/</programlisting>
        </listitem>

        <listitem>
          <para>In <filename>sources.conf</filename>, set the URL rsync:// to
          the rsync replication server.</para>

          <programlisting>rsync://rsync.mycompany.com/release/ports/</programlisting>
        </listitem>
      </orderedlist>
    </section>
  </section>
-->
</chapter>