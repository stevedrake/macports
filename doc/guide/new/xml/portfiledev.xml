<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="development">
  <title>Portfile Development</title>

  <para>This chapter covers a brief introduction to Portfiles, how to create a
  local Portfile repository for development, and creating Portfiles.</para>

  <section id="development.introduction">
    <title>Portfile Introduction</title>

    <para>A MacPorts Portfile is a TCL script that usually contains only the
    simple keyword/value combinations and Tcl extensions as described in the
    <link linkend="reference">Portfile Reference</link> chapter, though it may
    also contain arbitrary TCL code. Every port has a corresponding Portfile,
    but Portfiles do not completely define a port's installation behavior
    since the MacPorts base has default port installation characteristics
    coded within it. Therefore Portfiles need only specify required options
    and, when required, non-default characteristics for a port.</para>

    <para>A common way for Portfiles to augment or override MacPorts base
    default installation phase characteristics is by using
    <filename>Portfile</filename> phase declaration(s). If you use Portfile
    phase declaration(s), you should know how to identify the "global" section
    of a Portfile. Any statements not contained within a phase declaration, no
    matter where they are located in a Portfile are said to be in the global
    section of the Portfile, therefore the global section need not be
    contiguous. Likewise, to remove statements from the global section they
    must be placed within a phase declaration.</para>

    <para>The main phases you need to be aware of when making a Portfile are
    these:</para>

    <itemizedlist>
      <listitem>
        <para>Fetch</para>
      </listitem>

      <listitem>
        <para>Extract</para>
      </listitem>

      <listitem>
        <para>Patch</para>
      </listitem>

      <listitem>
        <para>Configure</para>
      </listitem>

      <listitem>
        <para>Build</para>
      </listitem>

      <listitem>
        <para>Destroot</para>
      </listitem>
    </itemizedlist>

    <para>The default installation phase behavior performed by the MacPorts
    base works fine for applications that use the standard
    <command>configure</command>, <command>make</command>, and <command>make
    install</command> steps, which conform to phases configure, build, and
    destroot respectively. For applications that do not conform to this
    standard behavior, any installation phase may be augmented using pre-
    and/or post- phases, or even overridden or eliminated. See <link
    linkend="development.examples">Example Portfiles</link> below.</para>

    <note>
      <para>For a detailed description of all port phases, see the <link
      linkend="reference">Portfile Reference</link> chapter.</para>
    </note>
  </section>

  <section id="development.local-repositories">
    <title>Local Portfile Repositories</title>

    <para>To create and test Portfiles that are not yet committed to
    subversion, you may create a local Portfile repository as shown.</para>

    <orderedlist>
      <listitem>
        <para>Open the <filename>sources.conf</filename> file in a text
        editor.</para>

        <programlisting><prompt>%%</prompt> <userinput>cd ${prefix}/etc/macports/</userinput>
<prompt>%%</prompt> <userinput>pico sources.conf</userinput></programlisting>
      </listitem>

      <listitem>
        <para>Insert a URL pointing to the local repository location before
        the rsync URL as shown.</para>

        <programlisting>file:///Users/julesverne/ports
rsync://rsync.macports.org/release/ports
</programlisting>

        <note>
          <para>The file URL should always appear before the rsync URL so that
          local Portfiles can be tested that are duplicated in the MacPorts
          tree, because the <command>port</command> command will always
          operate on the first Portfile it encounters.</para>
        </note>
      </listitem>

      <listitem>
        <para>Place the Portfiles you create inside a directory whose name
        matches the port, which should in turn be placed inside a directory
        that reflect the port's primary category (the first category entry in
        the Portfile).</para>

        <programlisting><prompt>%%</prompt> <userinput>cd /Users/julesverne</userinput>
<prompt>%%</prompt> <userinput>mkdir -p ports/games/bestevergame</userinput>
<prompt>%%</prompt> <userinput>cd ports/games/bestevergame</userinput>
<prompt>%%</prompt> <userinput>touch Portfile</userinput></programlisting>
      </listitem>

      <listitem>
        <para>After a Portfile is created (see below), use the MacPorts
        <command>portindex</command> command in the local repository's
        directory to install it into the
        <filename>Portindex</filename>.</para>

        <programlisting>%% <userinput>cd /Users/julesverne/ports</userinput>
%% <userinput>portindex</userinput></programlisting>

        <screen>Creating software index in /Users/julesverne/ports
Adding port games/bestevergame

Total number of ports parsed:   1 
Ports successfully parsed:      1        
Ports failed:                   0</screen>
      </listitem>
    </orderedlist>

    <para>Once the local port is added to the <filename>Portindex</filename>,
    it becomes available for searching or installation as with any other
    Portfile in the MacPorts tree as shown.</para>

    <programlisting><prompt>%%</prompt> <userinput>port search bestever</userinput></programlisting>

    <screen>bestevergame   games/bestevergame 1.1   The Best Ever Game</screen>
  </section>

  <section id="development.creating-portfile">
    <title>Creating a Portfile</title>

    <para>Here we list the individual Portfile components for an application
    that conforms to the the standard <command> configure</command>,
    <command>make</command>, and <command>make install</command> steps of most
    open source application installs.</para>

    <orderedlist>
      <listitem>
        <para>Subversion ID tag line</para>

        <para>The first line of a new Portfile must be set as shown. When a
        port is committed to subversion, ID tags are expanded to include the
        last person to commit and the commit time.</para>

        <programlisting># $Id$</programlisting>
      </listitem>

      <listitem>
        <para>PortSystem line</para>

        <para>This statement is required for all ports.</para>

        <programlisting>PortSystem        1.0</programlisting>
      </listitem>

      <listitem>
        <para>Port name</para>

        <programlisting>name              rrdtool</programlisting>
      </listitem>

      <listitem>
        <para>Port version</para>

        <programlisting>version           1.2.23</programlisting>
      </listitem>

      <listitem>
        <para>Port categories</para>

        <para>A port may belong to more than one category, but the first
        (primary) category should match the directory name in the ports tree
        where the Portfile is to reside.</para>

        <programlisting>categories        net</programlisting>
      </listitem>

      <listitem>
        <para>Port maintainers</para>

        <para>A port's maintainer is a person or persons who take
        responsibility for keeping the port up-to-date, and the maintainer
        keyword lists maintainer email addresses(s). To hide these addresses
        from spambots, see the more full explanation of the maintainer keyword
        in the <link linkend="reference.keywords.global">Global
        Keywords</link> section of the <link linkend="reference">Portfile
        Reference</link> chapter.</para>

        <programlisting>maintainers       julesverne@example.org</programlisting>

        <note>
          <para>The address <email>nomaintainer@macports.org</email>
          designates a port that may be modified by any committer.</para>
        </note>
      </listitem>

      <listitem>
        <para>Port description</para>

        <programlisting>description       Round Robin Database</programlisting>
      </listitem>

      <listitem>
        <para>Port long_description</para>

        <programlisting>long_description  RRDtool is a system to store and display time-series data</programlisting>
      </listitem>

      <listitem>
        <para>A port's application homepage</para>

        <programlisting>homepage          http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/</programlisting>
      </listitem>

      <listitem>
        <para>Platform statement</para>

        <programlisting>platforms         darwin</programlisting>
      </listitem>

      <listitem>
        <para>A port's download URLs</para>

        <programlisting>master_sites      http://oss.oetiker.ch/rrdtool/pub/ \
                  ftp://ftp.pucpr.br/rrdtool/</programlisting>
      </listitem>

      <listitem>
        <para>Port checksums</para>

        <para>The checksums specified in a Portfile are checked with the
        fetched tarball for security.</para>

        <programlisting>checksums         md5 dafa161bc9c61e57636a6085c87c1fe8</programlisting>
      </listitem>

      <listitem>
        <para>Port dependencies</para>

        <para>A port's dependencies are ports that must be installed before
        another port is installed.</para>

        <programlisting>depends_lib       port:perl5.8 \
                  port:tcl \
                  port:zlib</programlisting>
      </listitem>

      <listitem>
        <para>Port configure arguments (optional)</para>

        <programlisting>configure.args    --prefix=${prefix} \
                  --enable-perl-site-install \
                  --mandir=${prefix}/share/man</programlisting>
      </listitem>
    </orderedlist>
  </section>

  <section id="development.examples">
    <title>Example Portfiles</title>

    <para>In this section we take a look at a complete simple Portfile, and
    then pre- and post- phase definitions to augment and override the MacPorts
    default phases.</para>

    <section id="development.examples.basic">
      <title>A Basic Portfile</title>

      <programlisting># Id$
PortSystem      1.0

name                    rrdtool
version                 1.2.23
categories              net
maintainers             julesverne
description             Round Robin Database
long_description        RRDtool is a system to store and display time-series data
homepage                http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/
platforms               darwin
master_sites            http://oss.oetiker.ch/rrdtool/pub/ \
                        ftp://ftp.pucpr.br/rrdtool/

checksums               md5 dafa161bc9c61e57636a6085c87c1fe8

depends_lib             port:perl5.8 \
                        port:tcl \
                        port:zlib

configure.args          --prefix=${prefix} \
                        --enable-perl-site-install \
                        --mandir=${prefix}/share/man</programlisting>
    </section>

    <section id="development.examples.pre-post">
      <title>Portfile Using Pre- / Post- Phases</title>

      <para>To augment a port's installation phase, and not override it, you
      may use pre- and post- installation phases as shown in this
      example.</para>

      <programlisting>post-destroot {
# Install example files not installed by the Makefile
        file mkdir ${destroot}${prefix}/share/doc/${name}/examples
        file copy ${worksrcpath}/examples/ \
             ${destroot}${prefix}/share/doc/${name}/examples
}</programlisting>
    </section>

    <section id="development.examples.override">
      <title>Portfile that Overrides Default Phases</title>

      <para>To override the automatic MacPorts installation phase processing,
      define your own installation phases as shown in this example.</para>

      <programlisting>destroot {
        xinstall -m 755 -d ${destroot}${prefix}/bin
        xinstall -m 755 ${worksrcpath}/cdpr ${destroot}${prefix}/bin
}</programlisting>
    </section>

    <section id="development.examples.startupitem">
      <title>Portfile Using a StartupItem</title>

      <para>Startupitems may be placed in the global section of a
      Portfile.</para>

      <programlisting>startupitem.create      yes
startupitem.name        nmicmpd
startupitem.executable  "${prefix}/bin/nmicmpd"</programlisting>

      <para>Startupitems keywords may also be used within a variant definition
      to make their installation conditional.</para>

      <programlisting>variant server {
    startupitem.create    yes
    startupitem.start "${prefix}/share/${name}/vm-pop3d.init start"
    startupitem.stop "${prefix}/share/${name}/vm-pop3d.init stop"
}</programlisting>
    </section>
  </section>

  <section id="development.variants">
    <title>Port Variants</title>

    <para>Variants are a way for port authors to provide options that may be
    invoked at install time. They are declared in the global section of a
    Portfile using the "variant" keyword and may provide a description.</para>

    <section id="development.variants.options">
      <title>Variants to Modify Options</title>

      <para>The most common use for a variant is to add or remove
      dependencies, configure arguments, and build arguments from the global
      Portfile section. Here is an example of a port providing four variants
      that add additional configure arguments to a port.</para>

      <programlisting>variant pop     { configure.args-append --enable-pop }
variant imap    { configure.args-append --enable-imap }
variant ssl     { configure.args-append --with-ssl }
variant debug   { configure.args-append --enable-debug }</programlisting>

      <para>In the example variant declaration, the configure argument
      <literal>--without-x</literal> is removed and a numner of others are
      appended.</para>

      <programlisting>variant x11 description {Builds port as an X11 program with Lucid widgets} {
    configure.args-delete   --without-x
    configure.args-append   --with-x-toolkit=lucid \
                            --without-carbon \
                            --with-xpm \
                            --with-jpeg \
                            --with-tiff \
                            --with-gif \
                            --with-png
    depends_lib-append      lib:libX11:XFree86 \
                            lib:libXpm:XFree86 \
                            port:jpeg \
                            port:tiff \
                            port:libungif \
                            port:libpng
}</programlisting>
    </section>

    <section id="development.variants.phase">
      <title>Variant Actions in a Phase</title>

      <para>If a variant requires options in addition to those provided by
      keywords using -append and/or -delete, in other words, any actions that
      would normally take place within a port installation phase, do not try
      to do this within the variant declaration. Rather, modify the behavior
      of any affected phases when the variant is invoked using the
      variant_isset keyword.</para>

      <programlisting>post-destroot {
    xinstall -m 755 -d ${destroot}${prefix}/etc/
    xinstall ${worksrcpath}/examples/foo.conf \
        ${destroot}${prefix}/etc/

    if {[variant_isset] carbon]} {
        delete ${destroot}${prefix}/bin/emacs
        delete ${destroot}${prefix}/bin/emacs-${version}
    }
}</programlisting>
    </section>

    <section id="development.variants.default">
      <title>Default Variants</title>

      <para>Variants are used to specify actions that lie outside the core
      functions of an application or port, but there may be some cases where
      you wish to specify these non-core functions by default. For this
      purpose you may use the keyword default_variants.</para>

      <programlisting>default_variants +foo +bar</programlisting>

      <note>
        <para>The default_variant keyword may only be used in the global
        Portfile section.</para>
      </note>
    </section>
  </section>

  <section id="development.patches">
    <title>Patch Files</title>

    <para>Patch files are files created with the Unix command
    <command>diff</command> that are applied using the command
    <command>patch</command> to modify text files to fix bugs or extend
    functionality.</para>

    <section id="development.patches.portfile">
      <title>Creating Portfile Patches</title>

      <para>If you wish to contribute modifications or fixes to a Portfile,
      you should do so in the form of a patch.</para>

      <orderedlist>
        <listitem>
          <para>Make a copy of the Portfile you wish to modify; both files
          must be in the same directory, though it may be any
          directory.</para>

          <programlisting><prompt>%%</prompt> <userinput>cp Portfile Portfile.org</userinput></programlisting>
        </listitem>

        <listitem>
          <para>Edit the file to make it as you want it to be after it is
          fetched.</para>
        </listitem>

        <listitem>
          <para>Now use the Unix command <command>diff -u </command>to create
          a "unified" diff patch file.</para>

          <programlisting><prompt>%%</prompt> <userinput>diff -u Portfile.org Portfile &gt; Portfile.diff</userinput></programlisting>
        </listitem>

        <listitem>
          <para>A patch file that is a "unified" diff file is the easiest to
          interpret by humans and this type should always be used for ports.
          The Portfile patch below will change the version and checksums when
          applied.</para>

          <programlisting>--- Portfile.org        2007-07-25 18:52:12.000000000 -0700
+++ Portfile    2007-07-25 18:53:35.000000000 -0700
@@ -2,7 +2,7 @@
 PortSystem             1.0
 
 name                   nefu
-version                        1.4.0
+version                        1.3.0
 categories             net
 maintainers            nomaintainer@macports.org
 description            A network monitoring daemon.
@@ -13,9 +13,9 @@

 homepage               http://rsug.itd.umich.edu/software/${name}

 master_sites           ${homepage}/files/
-checksums              md5 f0953b21cdb5eb327e40d4b215110b71 \
+checksums              md5 01532e67a596bfff6a54aa36face26ae \
 extract.suffix  .tgz
 platforms              darwin
</programlisting>
        </listitem>
      </orderedlist>

      <para>Now you may attach the <filename>Portfile.diff</filename> to a
      MacPorts Trac ticket for the port author to evaluate.</para>
    </section>

    <section id="development.patches.source">
      <title>Creating Source Code Patches</title>

      <para>Necessary or useful patches to application source code should be
      sent to the application developer (not the port author) so the
      modifications may be included in the next version, and the port patch
      eventually removed.</para>

      <orderedlist>
        <listitem>
          <para>Locate the file you wish to patch in its original location
          within the unpacked source directory and make a duplicate of
          it.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd foo-1.34/src</userinput>
<prompt>%%</prompt> <userinput>cp Makefile.in Makefile.in.org</userinput></programlisting>
        </listitem>

        <listitem>
          <para>Edit the file to make it as you want it to be after it is
          fetched.</para>
        </listitem>

        <listitem>
          <para>Now use the Unix command <command>diff -u</command> to create
          a "unified" diff patch file.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd foo-1.34</userinput>
<prompt>%%</prompt> <userinput>diff -u Makefile.in.org Makefile.in &gt; patch-Makefile.in</userinput></programlisting>

          <note>
            <para>You must execute the <command>diff</command> command in the
            top-level of the unpacked source code. Otherwise the
            <command>patch</command> command will look for the file to be
            patched in the wrong place and fail.</para>
          </note>
        </listitem>

        <listitem>
          <para>A patch file that is a "unified" diff file is the easiest to
          interpret by humans and this type should always be used for ports.
          See the example below where a patch adds <varname>DESTDIR</varname>
          support to a <filename>Makefile.in</filename> file.</para>

          <programlisting>--- Makefile.in.org   2007-06-01 16:30:47.000000000 -0700
+++ Makefile.in       2007-06-20 10:10:59.000000000 -0700
@@ -131,23 +131,23 @@
        $(INSTALL_DATA)/gdata $(INSTALL_DATA)/perl

 install-lib:
-       -mkdir -p $(INSTALL_LIB)
+       -mkdir -p $(DESTDIR)$(INSTALL_LIB)
        $(PERL) tools/install_lib -s src -l $(INSTALL_LIB) $(LIBS)
-       cp $(TEXT) $(INSTALL_LIB)/
+       cp $(TEXT) $(DESTDIR)$(INSTALL_LIB)/</programlisting>
        </listitem>

        <listitem>
          <para>Now you may place the patch
          <filename>patch-Makefile.in</filename> in the path ${portpath}/files
          of a local repository (or commit it to subversion) and use it in a
          port using the patchfiles keyword.</para>

          <programlisting>patchfiles              patch-Makefile.in</programlisting>
        </listitem>
      </orderedlist>
    </section>

    <section id="development.patches.applying">
      <title>Manually Applying Patches</title>

      <para>Though MacPorts applies patch files automatically, you may want to
      know how to apply patch files manually if you want to apply uncommitted
      Portfile patches or other similar uses.</para>

      <orderedlist>
        <listitem>
          <para>Change to the directory containing the file to be patched. In
          this example, we'll apply a Portfile patch to the postfix
          port.</para>

          <programlisting><prompt>%%</prompt> <userinput>cd /opt/local/var/macports/sources/rsync.macports.org/release/ports/mail/postfix</userinput></programlisting>
        </listitem>

        <listitem>
          <para>Now apply the patch that is on the current user's desktop. The
          patchfile knows the filename of the file to be patched.</para>

          <programlisting><prompt>%%</prompt> <userinput>patch &lt; ~/Desktop/Portfile.diff</userinput></programlisting>

          <screen>patching file Portfile</screen>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section id="development.practices">
    <title>Portfile Best Practices</title>

    <para>This section contains practical guidelines for creating Portfiles
    that install smoothly and provide consistency between ports.</para>

    <section id="development.practices.dont-overwrite">
      <title>Don't Overwrite Config Files</title>

      <para></para>
    </section>

    <section id="development.practices.install-docs">
      <title>Install Docs and Examples</title>

      <para></para>
    </section>

    <section id="development.practices.provide-messages">
      <title>Provide User Messages</title>

      <para></para>
    </section>
  </section>
</chapter>
