<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="reference">
  <title>Portfile Reference</title>

  <para>This chapter serves as a reference for the major elements of a
  Portfile: port phases, dependencies, StartupItems, variables, keywords, and
  Tcl extensions.</para>

  <section id="reference.phases">
    <title>Port Phases</title>

    <para>A MacPorts port has ten distinct phases. The MacPorts base is set to
    perform default steps for applications that use the standard
    <command>configure</command>, <command>make</command>, and <command>make
    install</command> steps, but for applications that do not conform to this
    behavior, installation phases may be declared in a Portfile to <link
    linkend="development.examples.pre-post">augment</link> or <link
    linkend="development.examples.override">override</link> the default
    behavior as described in the <link linkend="development">Portfile
    Development</link> chapter.</para>

    <section id="reference.phases.fetch">
      <title>Fetch</title>

      <para>Overview: Fetch the <varname>${distfiles}</varname> from
      <varname>${master_sites}</varname> and place it in
      <filename>${prefix}/var/macports/distfiles</filename>.</para>
    </section>

    <section id="reference.phases.checksum">
      <title>Checksum</title>

      <para>Overview: Compare <varname>${checksums}</varname> specified in a
      <filename>Portfile</filename> to the checksums of the fetched
      ${distfiles}.</para>
    </section>

    <section id="reference.phases.extract">
      <title>Extract</title>

      <para>Overview: Unzip and untar the <varname>${distfiles}</varname> into
      the path ${prefix}/var/macports/build/..../work</para>
    </section>

    <section id="reference.phases.patch">
      <title>Patch</title>

      <para>Overview: Apply optional <ulink
      url="http://en.wikipedia.org/wiki/Patch_(Unix)">patch</ulink> files
      specified in <varname>${patchfiles}</varname> to modify a port's source
      code file(s).</para>

      <para>Details: Patch files are made using the <ulink
      url="http://en.wikipedia.org/wiki/Diff">diff</ulink> command, and
      MacPorts patches should be created as <ulink
      url="http://en.wikipedia.org/wiki/Diff#Unified_format">unified
      diffs</ulink>.</para>
    </section>

    <section id="reference.phases.configure">
      <title>Configure</title>

      <para>Overview: Execute the command "configure" in
      <varname>${workpath}</varname>.</para>
    </section>

    <section id="reference.phases.build">
      <title>Build</title>

      <para>Overview: Execute the command "make" in
      <varname>${workpath}</varname>.</para>
    </section>

    <section id="reference.phases.destroot">
      <title>Destroot</title>

      <para>Overview: Execute the command <command>make install
      DESTDIR=${destroot}</command> in <varname>${workpath}</varname>.</para>

      <para>Details: Understanding the destroot phase is critical to
      understanding MacPorts, because, unlike some port systems, MacPorts
      "stages" an installation into an intermediate location â€”not the final
      file destination. There are two main advantages to this method.</para>

      <orderedlist>
        <listitem>
          <para>A port's files may be cleanly uninstalled because all files
          and locations are tracked.</para>
        </listitem>

        <listitem>
          <para>Since a port's files are not installed into MacPorts directory
          structure until an activation phase, a port may be deactivated
          through MacPorts to allow activation of a different version of the
          same port, thus allowing two versions of a port to be present,
          though not both active, on a given host.</para>
        </listitem>
      </orderedlist>

      <note>
        <para>The <varname>$(DESTDIR)</varname> variable must be supported in
        an application's Makefile for the MacPorts destroot phase to work
        properly. Urge developers to fully support
        <varname>$(DESTDIR)</varname> in their Makefiles.</para>
      </note>

      <para>At the beginning of the destroot phase, all the directories in the
      file <filename>${prefix}/etc/macports/prefix.mtree</filename> are
      created. Any directories still empty upon completion of the destroot
      phase are removed unless a directory is listed using a destroot.keepdirs
      keyword.</para>
    </section>

    <section id="reference.phases.archive">
      <title>Archive</title>

      <para>Overview: Use tar to create a tarball of a port's destrooted files
      and copy it to
      <filename>${prefix}/var/macports/packages/</filename>.</para>
    </section>

    <section id="reference.phases.install">
      <title>Install</title>

      <para>Overview: Copy a port's destrooted files into
      <filename>${prefix}/var/macports/software</filename>. See <link
      linkend="internals.images">Port Images</link> in the <link
      linkend="internals">MacPorts Internals</link> chapter for
      details.</para>
    </section>

    <section id="reference.phases.activate">
      <title>Activate</title>

      <para>Overview: Set <ulink
      url="http://en.wikipedia.org/wiki/Hard_link">hardlinks</ulink> pointing
      to <filename>${prefix}/var/macports/software</filename> to point to
      ${prefix}.</para>
    </section>
  </section>

  <section id="reference.dependencies">
    <title>Dependencies</title>

    <para>Free and open source software is highly modular, and MacPorts ports
    often require modules not provided in a port's distribution to be
    installed before a port may be installed, compiled, or run. These support
    modules are generally other MacPorts ports, and the ports required to
    satisfy prerequistes for a given port are called a port's
    "dependencies".</para>

    <para>There are three types of dependencies in MacPorts: library, build,
    and run dependencies. The dependency type is important for proper port
    upgrade and uninstall behavior. For example, you may not uninstall a port
    that is a library dependency for another port, though you may remove one
    with a build dependency; likewise, upgrading a port will upgrade its
    library and build dependencies also, but not its run dependencies.</para>

    <section id="reference.dependencies.dependslib">
      <title>depends_lib</title>

      <para>The list of dependencies to check before phases
      <option>configure</option>, <option>build</option>,
      <option>destroot</option>, <option>install</option>, and
      <option>package</option>. Library dependencies are needed both at build
      time (for headers and libraries to link against) and at run time.</para>

      <programlisting>depends_lib         port:rrdtool</programlisting>
    </section>

    <section id="reference.dependencies.dependsbuild">
      <title>depends_build</title>

      <para>The list of dependencies to check before phases
      <option>build</option>, <option>destroot</option>,
      <option>install</option>, and <option>package</option>. Build
      dependencies are needed when software is compiled, but not needed at all
      once the software is compiled and installed.</para>

      <programlisting>depends_build       port:gcc42</programlisting>
    </section>

    <section id="reference.dependencies.dependsrun">
      <title>depends_run</title>

      <para>The list of dependencies to check before phases
      <option>destroot</option>, <option>install</option>, and
      <option>package</option>. Run dependencies are needed when the software
      is run, but not to compile it.</para>

      <programlisting>depends_run         port:apache2</programlisting>
    </section>

    <section id="reference.dependencies.nonport">
      <title>Non-Port Dependencies</title>

      <para>Port dependencies should refer to other MacPorts ports whenever
      possible. However, if satisfying a dependency with a port is not
      practical or desirable for a special reason, you may specify
      dependencies by having MacPorts test for an individual file by replacing
      <literal>port:</literal> with one of the options <literal>lib: bin: or
      path:</literal>.</para>

      <para>In this lib style dependency, if the file
      <filename>libX11.6.x.dylib</filename> is not found in the library path
      the XFree86 port will be installed to satisfy it.</para>

      <programlisting>depends_lib         lib:libX11.6:XFree86</programlisting>

      <para>In this bin style dependency, if the <filename>python</filename>
      binary is not found in the shell's binary path the port python24 will be
      installed.</para>

      <programlisting>depends_build       bin:python:python24</programlisting>

      <para>In this path style dependency, if the file
      <filename>/usr/bin/nano</filename> is not found the nano port will be
      installed.</para>

      <programlisting>depends_run         path:/usr/bin/nano:nano</programlisting>
    </section>
  </section>

  <section id="reference.startupitems">
    <title>StartupItems</title>

    <para>StartupItems are keywords that create Mac OS X startup scripts for
    <ulink
    url="http://developer.apple.com/macosx/launchd.html">launchd</ulink>, the
    facility intoduced by Apple beginning with OS X 10.4, that starts, stops,
    and manages daemons, programs and scripts. Port authors use StartupItem
    keywords within Portfiles to instruct MacPorts to generate and install
    <command>launchd</command> scripts for daemons during port installation.
    To support launchd, a wrapper program named <command>daemondo</command> is
    provided by MacPorts base that serves as an adapter between OS X's
    <command>launchd</command> and daemons that are normally started via
    traditional rc.d style scripts.</para>

    <para>There are three categories of StartupItem keywords. Those that
    trigger StartupItem creation and attributes, those that specify attributes
    of <quote>executable</quote> StartupItems, and those that specify
    attributes of <quote>script</quote> StartupItems.</para>

    <section id="reference.startupitems.creation">
      <title>StartupItem Creation &amp; Attributes</title>

      <para>The keywords in this section may be used with either
      <quote>executable</quote> or <quote>script</quote> StartupItems (see
      below).</para>

      <variablelist>
        <varlistentry>
          <term>startupitem.create</term>

          <listitem>
            <para>Trigger the creation of a StartupItem.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: <option>no</option></member>

              <member>Values: <option>yes no</option></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.create  yes</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>startupitem.name</term>

          <listitem>
            <para>Sets the name for the StartupItem.</para>

            <simplelist>
              <member>Type: required</member>

              <member>Default: none</member>

              <member>Values: <replaceable>any name</replaceable></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.name  OpenSSH</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>startupitem.pidfile</term>

          <listitem>
            <para>This keyword must be defined properly for
            <command>daemondo</command> to be able to monitor a daemon and
            restart it if it dies. This is true for both <quote>script</quote>
            and <quote>executable</quote> StartupItems. It specifies two
            things; a process id (PID) file handling type, and a pidfile name
            and path.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: <option>[none]</option> |
              <filename>[${prefix}/var/run/${name}.pid]</filename></member>

              <member>Values: <option>[none auto manual clean]</option>
              [<replaceable>/path/to/pidfile</replaceable>]</member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.pidfile auto ${prefix}/var/run/${name}.pidfile</programlisting>

            <para>Pidfile handling options:</para>

            <simplelist>
              <member><option>none</option> - The daemon is not to use a
              pidfile.</member>

              <member><option>auto</option> - The daemon generates its own
              pidfile.</member>

              <member><option>manual</option> - The daemon never generates a
              pidfile; the StartupItem must manage the pidfile on its
              own.</member>

              <member><option>clean</option> - The daemon generates its own
              but will not delete it; the StartupItem must delete it.</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>startupitem.logfile</term>

          <listitem>
            <para>Path to a logfile for logging events about the lifetime of
            the StartupItem. Depending on the type of StartupItem, and the
            manner in which it is started, standard output from the daemon may
            also be directed to the logfile.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: <option>/dev/null</option></member>

              <member>Values: <replaceable>/file/path/</replaceable></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.logfile  ${prefix}/var/log/mydaemon.log</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>startupitem.logevents</term>

          <listitem>
            <para>Control whether or not to log events to the log file. If
            logevents is set, events with timestamps are logged to the
            logfile.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: <option>no</option></member>

              <member>Values: <option>yes no</option></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.logevents   yes</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.startupitems.executable">
      <title>Executable StartupItems</title>

      <para><quote>Executable</quote> StartupItems are slightly preferred over
      <quote>script</quote> StartupItems because <command>daemondo</command>
      may be better able to detect when a daemon has died when it launches it
      directly, rather than indirectly via a startup script, though for
      daemondo to monitor either type, the <code>startupitem.pidfile</code>
      keyword must be set (see above). The <quote>executable</quote>
      StartupItem specifies the path and name of the daemon to be run in the
      background.</para>

      <note>
        <para>For a given port, the <quote>executable</quote> StartupItem
        keyword may not be used with any keywords in the <quote>script</quote>
        StartupItem category.</para>
      </note>

      <variablelist>
        <varlistentry>
          <term>startupitem.executable</term>

          <listitem>
            <para>Specifies the name of the daemon to be run in the
            background. It may have multiple arguments, but they must be
            appropriate for a call to exec; arbitrary shell code may not be
            used.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: <option>no</option></member>

              <member>Values:
              <replaceable>/path/to/executable</replaceable></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.executable  "${prefix}/bin/nmicmpd"</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.startupitems.script">
      <title>Script StartupItems</title>

      <para>StartupItems of type <quote>script</quote> let
      <command>daemondo</command> launch daemons via startup scripts. When
      using this type of StartupItem, the <code>startupitem.pidfile</code>
      keyword should be used so <command>daemondo</command> can monitor the
      daemon's PID and restart it if it dies.</para>

      <note>
        <para>For a given port, StartupItem keywords in category
        <quote>script</quote> may not be used with an
        <quote>executable</quote> StartupItem keyword.</para>
      </note>

      <variablelist>
        <varlistentry>
          <term>startupitem.init</term>

          <listitem>
            <para>Shell code that will be executed prior to any of the options
            <code>startupitem.start</code>, <code>startupitem.stop</code> and
            <code>startupitem.restart</code>.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: <option>no</option></member>

              <member>Values: <literal>shell_script</literal></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.init  "PID=/var/run/dhcpd.pid"</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>startupitem.start</term>

          <listitem>
            <para>Specify a shell script to start the daemon.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: none</member>

              <member>Values: <literal>shell_script</literal></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.start ${prefix}/share/mysql/mysql.server start</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>startupitem.stop</term>

          <listitem>
            <para>Specify a shell script to stop the daemon.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: none</member>

              <member>Values: <literal>shell_script</literal></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.start ${prefix}/share/mysql/mysql.server stop</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>startupitem.restart</term>

          <listitem>
            <para>Specify a shell script to restart the daemon. In the absence
            of this key, the daemon will be restarted by taking the stop
            action, followed by taking the start action.</para>

            <simplelist>
              <member>Type: optional</member>

              <member>Default: none</member>

              <member>Values: <literal>shell_script</literal></member>

              <member>Example:</member>
            </simplelist>

            <programlisting>startupitem.start  ${prefix}/share/mysql/mysql.server restart</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="reference.variables">
    <title>Variables</title>

    <para>This section describes the MacPorts preset variables that may be
    used within Portfiles.</para>

    <section id="reference.variables.general">
      <title>General</title>

      <para>These are the variables available to any
      <filename>Portfile</filename>.</para>

      <para><variablelist>
          <varlistentry>
            <term>prefix</term>

            <listitem>
              <para>Installation prefix, set in the system-wide configuration
              file <filename>${prefix}/etc/macports/macports.conf</filename>
              â€”may be overridden on a per port basis. For example, aqua
              applications are installed in
              <filename>/Applications/MacPorts</filename>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>binpath</term>

            <listitem>
              <para>Default PATH to use in finding executables. Read
              only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>libpath</term>

            <listitem>
              <para>Path to the MacPorts TCL libraries. Read only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>portpath</term>

            <listitem>
              <para>Path to the directory containing the downloaded Read
              only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>filesdir</term>

            <listitem>
              <para>Path to port files relative to
              <varname>${portpath}</varname>. Read only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>workpath</term>

            <listitem>
              <para>Full path to work directory. Read only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>worksrcpath</term>

            <listitem>
              <para>Full path to extracted source code. Equivalent to
              <varname>${workpath}/${worksrcdir}</varname>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>destroot</term>

            <listitem>
              <para>Full path into which software will be destrooted.
              Equivalent to <filename>${workpath}/destroot</filename>. Read
              only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>distpath</term>

            <listitem>
              <para>Location to store downloaded distfiles. Read only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>install.user</term>

            <listitem>
              <para>The Unix user at the time of port installation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>install.group</term>

            <listitem>
              <para>The Unix group at the time of port installation.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>os.platform</term>

            <listitem>
              <para>Identifies platform type (ie, "darwin", "freebsd", etc).
              Read only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>os.arch</term>

            <listitem>
              <para>Identifies hardware type (ie, "powerpc", "intel"). Read
              only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>os.version</term>

            <listitem>
              <para>The version number of the host operating system (ie "8.0"
              for Darwin 8.0). Read only.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>os.major</term>

            <listitem>
              <para>The major version number of the host operating system (ie
              "8" for Darwin 8.0). Read only.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section id="reference.variables.portgroup">
      <title>PortGroup Variables</title>

      <para>In addition to the general <filename>Portfile</filename> type for
      standard Unix applications and libraries, there are six optional
      PortGroup types that provide special <filename>Portfile</filename>
      handling to make creating <filename>a Portfile</filename> easier.</para>

      <itemizedlist>
        <listitem>
          <para>perl5</para>
        </listitem>

        <listitem>
          <para>python24 and python25</para>
        </listitem>

        <listitem>
          <para>ruby</para>
        </listitem>

        <listitem>
          <para>xcode</para>
        </listitem>

        <listitem>
          <para>gnustep</para>
        </listitem>

        <listitem>
          <para>zope</para>
        </listitem>
      </itemizedlist>

      <para>Some PortGroups provide additional variables when they are
      declared within a Portfile. The additional variables provided by
      PortGroups perl5, python, and ruby are listed below. You may view the
      port Tcl code for each group in the directory<filename>
      ${prefix}/share/macports/resources/port1.0/group</filename>.</para>

      <variablelist>
        <varlistentry>
          <term>PortGroup perl5</term>

          <listitem>
            <para>Description: The variables available to a
            <filename>Portfile</filename> when the <literal>PortGroup
            perl5</literal> keyword is declared.</para>

            <variablelist>
              <varlistentry>
                <term>perl5.version</term>

                <listitem>
                  <para>The MacPorts Perl version.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>perl5.bin</term>

                <listitem>
                  <para>The Perl binary path (ie,
                  <filename>${prefix}/bin/perl</filename>).</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>perl5.lib</term>

                <listitem>
                  <para>Path to the Perl vendor directory.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>perl5.archlib</term>

                <listitem>
                  <para>Path to the Perl architecture-dependent modules
                  directory.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>PortGroup python2x</term>

          <listitem>
            <para>Description: The variables available to a
            <filename>Portfile</filename> when the <literal>PortGroup
            python2x</literal> keyword is declared.</para>

            <variablelist>
              <varlistentry>
                <term>python.bin</term>

                <listitem>
                  <para>The MacPorts Python binary location.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>python.lib</term>

                <listitem>
                  <para>The Python dynamic library and path (ie,
                  <filename>${prefix}/lib/libpython2.x.dylib</filename>).</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>python.include</term>

                <listitem>
                  <para>Path to the Python include directory.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>python.pkgd</term>

                <listitem>
                  <para>Path to the Python site-packages directory. (ie,
                  <filename>${prefix}/lib/python2.4/site-packages</filename>).</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>

      <variablelist>
        <varlistentry>
          <term>PortGroup ruby</term>

          <listitem>
            <para>Description: The variables available to a
            <filename>Portfile</filename> when the <literal>PortGroup
            ruby</literal> keyword is declared.</para>

            <variablelist>
              <varlistentry>
                <term>ruby.version</term>

                <listitem>
                  <para>The MacPorts Ruby version.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>ruby.bin</term>

                <listitem>
                  <para>The Ruby binary location.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>ruby.lib</term>

                <listitem>
                  <para>Path to the Ruby vendorlibdir directory (ie,
                  <filename>${prefix}/lib/ruby/vendor_ruby/${ruby.version}</filename>)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>ruby.arch</term>

                <listitem>
                  <para>The name for the Ruby architecture-dependent directory
                  name (ie, <literal>i686-darwin8.10.1</literal>).</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>ruby.archlib</term>

                <listitem>
                  <para>Path to the Ruby vendor archdir (ie,
                  <filename>${ruby.lib}/${ruby.arch}</filename>).</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="reference.keywords">
    <title>Keywords</title>

    <para>MacPorts keywords are used to specify required or optional items
    within a <filename>Portfile</filename>, or to override default options
    used by MacPorts base for individual ports when necessary. Keywords are to
    be used within the "global" and "variant" sections of Portfiles, and not
    within optional port phase declarations. In other words, port phase
    keywords are not located within port phase declarations, but rather they
    <emphasis>refer</emphasis> to port phases and set options for those
    phases, and they take affect whether or not phase declarations have been
    explicitly defined by a port author.</para>

    <para>The keywords listed below in category "global" specify information
    for ports as a whole, whereas the keywords listed under a port phase
    specify information to be used during a particular installation
    phase.</para>

    <section id="reference.keywords.append-delete">
      <title>Using -append and -delete Keywords</title>

      <para>It is often necessary to add to a list of keyword values
      previously set by MacPorts base or set by a prior Portfile keyword. In
      these cases we generally don't want to replace the current list, but
      rather to add or delete values from the list. For this purpose there are
      "-append" and "-delete" keywords; they are listed below according to
      keyword category. The three most common uses for these keywords are
      given below.</para>

      <itemizedlist>
        <listitem>
          <para>Preserve default configure arguments.</para>

          <para>MacPorts base sets the gcc compiler flags CFLAGS and LDFLAGS
          for all ports using <literal>configure.cflags</literal> and
          <literal>configure.ldflags</literal>, therefore to keep from
          overwriting the default compiler flags use:</para>

          <itemizedlist>
            <listitem>
              <para><literal>configure.cflags-append</literal></para>
            </listitem>

            <listitem>
              <para><literal>configure.ldflags-append</literal></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Preserve default dependencies within a PortGroup.</para>

          <para>Ports in a PortGroup have default library dependencies set by
          MacPorts base. Therefore, never use <literal>depends_lib</literal>
          in ports belonging to a PortGroup or it will overwrite the default
          library dependencies. Instead, use:</para>

          <itemizedlist>
            <listitem>
              <para><literal>depends_lib-append</literal></para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>Add or delete port dependencies, distfiles, patchfiles, etc.
          for port variants.</para>

          <para>When a variant requires more or fewer dependencies, distfiles,
          or patchfiles, you want to add or remove items to the list of
          dependency keyword values that were set in the global section of the
          Portfile. Use the appropriate keywords, for example:</para>

          <itemizedlist>
            <listitem>
              <para><literal>depends_lib-append</literal> or
              <literal>depends_lib-delete</literal></para>
            </listitem>

            <listitem>
              <para><literal>distfiles-append</literal> or
              <literal>distfiles-delete</literal></para>
            </listitem>

            <listitem>
              <para><literal>patchfiles-append</literal> or
              <literal>patchfiles-delete</literal></para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section id="reference.keywords.global">
      <title>Global Keywords</title>

      <para>The list of global keywords.</para>

      <variablelist>
        <varlistentry>
          <term>PortSystem</term>

          <listitem>
            <para>The top line of every Portfile; it must be followed by a
            blank line. It defines which version of the Portfile interpreter
            will be used.</para>

            <programlisting>PortSystem   1.0

</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>name</term>

          <listitem>
            <para>The name of the Port; it should be lowercase.</para>

            <simplelist>
              <member>Type: required</member>

              <member>Default: none</member>
            </simplelist>

            <programlisting>name         foo</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>version</term>

          <listitem>
            <para>The version of the ported software.</para>

            <programlisting>version      1.23.45</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>revision</term>

          <listitem>
            <para>Optional keyword (default is 0) that is used to track port
            revisions. It should not be incremented for port revisions unless
            it would benefit users to upgrade an installed port, and cleared
            when the port is updated to a newer version.</para>

            <programlisting>revision     1</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>categories</term>

          <listitem>
            <para>The category under which the ported software falls. The
            first category should be the same as the directory within which
            the Portfile is stored; secondary and tertiary categories may be
            selected.</para>

            <programlisting>categories     net security</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>maintainers</term>

          <listitem>
            <para>A port's maintainer is a person or persons who take
            responsibility for keeping the port up-to-date, and the maintainer
            keyword lists maintainer email addresses(s). However, many
            maintainers wish to hide these addresses from spambots; to do so
            follow these conventions:</para>

            <itemizedlist>
              <listitem>
                <para>For addresses in domain @macports.org, simply omit the
                domain name.</para>
              </listitem>

              <listitem>
                <para>For addresses in other domains, say
                <email>account@example.org</email>, use the convention
                example.org:account to specify the address.</para>
              </listitem>
            </itemizedlist>

            <para>In the example below, the maintainer email addresses
            <email>jdoe@macports.org</email> and
            <email>julesverne@example.org</email> are hidden using these
            conventions.</para>

            <programlisting>maintainers       jdoe \
                  example.org:julesverne</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>description</term>

          <listitem>
            <para>A one-sentence description of the ported software.</para>

            <programlisting>description    A clasic shooter arcade game.</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>long_description</term>

          <listitem>
            <para>A long description of the ported software. Break long lines
            with escaped newlines.</para>

            <programlisting>description    A classic shooter arcade game derived from \
               the game alien-munchers.  Not suitable for \
               children under two years old.      </programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>homepage</term>

          <listitem>
            <para>Port application's homepage.</para>

            <programlisting>homepage       http://www.somesite.org/apps</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>platforms</term>

          <listitem>
            <para>The platforms on which the port has been tested.</para>

            <programlisting>platforms      darwin freebsd</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>depends_lib</term>

          <listitem>
            <para>Library dependencies are needed both at build time (for
            headers and libraries to link against) and at run time.</para>

            <programlisting>depends_lib     port:rrdtool</programlisting>

            <simplelist>
              <member>depends_lib-append</member>

              <member>depends_lib-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>depends_build</term>

          <listitem>
            <para>Build dependencies are needed when software is compiled, but
            not needed at all once the software is compiled and
            installed.</para>

            <programlisting>depends_build    port:gcc42</programlisting>

            <simplelist>
              <member>depends_build-append</member>

              <member>depends_build-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>depends_run</term>

          <listitem>
            <para>Run dependencies are needed when the software is run, but
            not to compile it.</para>

            <programlisting>depends_run      port:apache2</programlisting>

            <simplelist>
              <member>depends_run-append</member>

              <member>depends_run-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.keywords.fetch">
      <title>Fetch</title>

      <para>The list of keywords related to the fetch phase.</para>

      <variablelist>
        <varlistentry>
          <term>master_sites</term>

          <listitem>
            <para>A list of urls from which a port's download file(s) may be
            retrieved.</para>

            <para>For ports that require only one download file, the list is
            searched in order until a file matching
            ${distname}${extract.suffix} is found.</para>

            <programlisting>master_sites   http://www.somesite.org/files/ \
               http://www.somemirror.org/somesite_org/files/</programlisting>

            <para>You may also use mirror sites predefined by MacPorts. Here
            the sourceforge and gnu mirrors are used.</para>

            <programlisting>master_sites   sourceforge gnu</programlisting>

            <para>When using mirror master_sites, the subdirectory
            <varname>${name}</varname> is checked on every mirror. If the
            mirror subdirectory does not match ${name}, then you may specify
            it using after the mirror separated by a colon.</para>

            <programlisting>master_sites   sourceforge:widget \
               gnu:widget</programlisting>

            <para>For ports that must fetch multiple download files from
            different locations, you may label the files with tags and match
            the tags in a distfiles statement. The format is
            <literal>mirror:subdirectory:tag</literal>.</para>

            <para>In the example below, file_one.tar.gz is fetched from
            sourceforge mirrors in subdirectory <varname>${name}</varname>;
            file tagtwo.tar.gz is fetched from the gnu mirrors in subdirectory
            sources.</para>

            <programlisting>distfiles       file_one.tar.gz:tagone \
                file_two.tar.gz:tagtwo \
                file_three.tar.gz

master_sites    sourceforge::tagone \
                gnu:sources:tagtwo</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>patch_sites</term>

          <listitem>
            <para>A list of sites from which a port's patchfiles may be
            downloaded, where applicable.</para>

            <programlisting>patch_sites    ftp://ftp.patchcityrepo.com/pub/magic/patches</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>distname</term>

          <listitem>
            <para>The default distname is
            <varname>${name}-${version}</varname>. This keyword is used to
            specify download files that do not meet this standard (excluding
            the extract.suffix).</para>

            <programlisting>distname     ${name}</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>distfiles</term>

          <listitem>
            <para>The default distfile name is
            <varname>${distname}${extract.suffix}</varname>. This keyword is
            used when a download file for a port is not
            <varname>${distname}${extract.suffix}</varname> or to used to
            specify multiple download files.</para>

            <programlisting>distfiles    ${name}-dev_src.tgz</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>extract.suffix</term>

          <listitem>
            <para>The default value is .tar.gz, so is normally used to specify
            file suffixes other than .tar.gz.</para>

            <programlisting>extract.suffix   .tar.gz</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>use_bzip2</term>

          <listitem>
            <para>This keyword is for downloads that are tarred and bzipped.
            It automatically sets these variables:</para>

            <simplelist>
              <member>extract_suffix = .tar.bz2</member>

              <member>extract.cmd = bzip</member>
            </simplelist>

            <programlisting>use_bzip2     yes</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>use_zip</term>

          <listitem>
            <para>This keyword is for downloads are zipped. It automatically
            sets these variables:</para>

            <simplelist>
              <member>extract.suffix = .zip</member>

              <member>extract.cmd = unzip</member>

              <member>extract.pre_args = -q</member>

              <member>extract.post_args = "-d $portpath/$workdir"</member>
            </simplelist>

            <programlisting>use_zip       yes</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.keywords.checksum">
      <title>Checksum</title>

      <para>The list of keywords related to the checksum phase.</para>

      <variablelist>
        <varlistentry>
          <term>checksums</term>

          <listitem>
            <para>Checksum(s) of the distribution files.</para>

            <programlisting>checksums     md5 65b89365a65dcad71d4402b48</programlisting>

            <para>To download multiple files for a port, you must associate
            the files with their checksums by including the filename.</para>

            <programlisting>checksums     ${distname}${extract.suffix} md5 65b89365a65dcad71d4402b44 \
              hobbit.tar.gz md5 65b89365a65dcad71d4402b48</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.keywords.extract">
      <title>Extract</title>

      <para>The list of keywords related to the extract phase.</para>

      <variablelist>
        <varlistentry>
          <term>extract.only</term>

          <listitem>
            <para>List of files to extract into
            <varname>${worksrcpath}</varname>; the default is
            <varname>${distfiles}</varname>. Only use if default extract
            behavior is not correct for your port.</para>

            <programlisting>extract.only     foo.tar.gz bar.tar.gz</programlisting>

            <simplelist>
              <member>extract.only-append</member>

              <member>extract.only-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>extract.cmd</term>

          <listitem>
            <para>Command to perform extraction; the default is "gzip".</para>

            <programlisting>extract.cmd     gunzip</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>extract.pre_args</term>

          <listitem>
            <para>Arguments added to extract.cmd before a file name; the
            default is "-dc".</para>

            <programlisting>extract.pre_args    -cd</programlisting>

            <simplelist>
              <member>extract.pre_args-append</member>

              <member>extract.pre_args-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>extract.args</term>

          <listitem>
            <para>Arguments to extract.cmd; the default is
            <varname>${distpath}/${distfile}</varname>.</para>

            <programlisting>extract.args      </programlisting>

            <simplelist>
              <member>extract.args-append</member>

              <member>extract.args-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>extract.post_args</term>

          <listitem>
            <para>Arguments added to extract.cmd after a file name; the
            default is "| tar -xf".</para>

            <programlisting>extract.post_args     "| tar -xf - --exclude 'CVS'"</programlisting>

            <simplelist>
              <member>extract.post_args-append</member>

              <member>extract.post_args-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.keywords.patch">
      <title>Patch</title>

      <para>The list of keywords related to the patch phase.</para>

      <variablelist>
        <varlistentry>
          <term>patchfiles</term>

          <listitem>
            <para>Specify patch files to be applied for a port.</para>

            <programlisting>patchfiles     patch-Makefile.in patch-source.c</programlisting>

            <simplelist>
              <member>patchfiles-append</member>

              <member>patchfiles-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.keywords.configure">
      <title>Configure</title>

      <para>The list of keywords related to the configure phase.</para>

      <para>MacPorts base sets some important default configure options, so
      should use the -append version of most configure keywords so you don't
      overwrite them. For example, MacPorts base sets default
      <literal>configure.ldflags</literal> so you should always use
      <literal>configure.cflags-append</literal> to set additional CFLAGS in
      Portfiles.</para>

      <variablelist>
        <varlistentry>
          <term>configure.env</term>

          <listitem>
            <para>Set environment variables for configure.</para>

            <programlisting>configure.env     CFLAGS=-I${prefix}/include</programlisting>

            <simplelist>
              <member>configure.env-append</member>

              <member>configure.env-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>configure.pre_args</term>

          <listitem>
            <para>Arguments added to configure.cmd before
            <varname>${configure.args}</varname>; the default is
            --prefix=${prefix}.</para>

            <programlisting>configure.pre_args     --prefix=${prefix}/apache2</programlisting>

            <simplelist>
              <member>configure.pre_args-append</member>

              <member>configure.pre_args-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>configure.args</term>

          <listitem>
            <para>Arguments to pass to configure.</para>

            <programlisting>configure.args         --etcdir=${prefix}/etc</programlisting>

            <simplelist>
              <member>configure.args-append</member>

              <member>configure.args-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>configure.cflags</term>

          <listitem>
            <para>Set CFLAGS compiler flags.</para>

            <programlisting>configure.cflags      -I/usr/X11R6/include</programlisting>

            <simplelist>
              <member>configure.cflags-append</member>

              <member>configure.cflags-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>configure.ldflags</term>

          <listitem>
            <para>Set LDFLAGS for the linker.</para>

            <programlisting>configure.ldflags     -L${prefix}/lib/db44</programlisting>

            <simplelist>
              <member>configure.ldflags-append</member>

              <member>configure.ldflags-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>configure.cppflags</term>

          <listitem>
            <para>Set CPPFLAGS for passing to the C processor.</para>

            <programlisting>configure.cppflags    -I${prefix}/include/db4</programlisting>

            <simplelist>
              <member>configure.cppflags-append</member>

              <member>configure.cppflags-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>
      </variablelist>

      <section id="reference.keywords.configure.automake-autoconf">
        <title>Automake and Autoconf</title>

        <para>The list of configure keywords available for ports that need
        automake and/or autoconf.</para>

        <para><variablelist>
            <varlistentry>
              <term>use_automake</term>

              <listitem>
                <para>Whether or not to use automake; the default is
                "no".</para>

                <programlisting>use_automake      yes</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>automake.env</term>

              <listitem>
                <para>Environment variables to pass to automake.</para>

                <programlisting>automake.env      CFLAGS=-I${prefix}/include</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>automake.args</term>

              <listitem>
                <para>Arguments to pass to automake.</para>

                <programlisting>automake.args     --foreign</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>automake.dir</term>

              <listitem>
                <para>Directory in which to run
                <varname>${automake.cmd}</varname>; the default is
                <varname>${worksrcpath}</varname>.</para>

                <programlisting>automake.dir      ./src</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>use_autoconf</term>

              <listitem>
                <para>Whether or not to use autoconf; the default is
                "no".</para>

                <programlisting>use_autoconf      yes</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>autoconf.env</term>

              <listitem>
                <para>Environmental variables to pass to autoconf.</para>

                <programlisting>autoconf.env      CFLAGS=-I${prefix}/include/gtk12</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>autoconf.args</term>

              <listitem>
                <para>Arguments to pass to autoconf.</para>

                <programlisting>autoconf.args     -l src/aclocaldir</programlisting>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>autoconf.dir</term>

              <listitem>
                <para>Directory in which to run
                <varname>${autoconf.cmd}</varname>; the default is
                <varname>${worksrcpath}</varname>.</para>

                <programlisting>autoconf.dir      src</programlisting>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </section>
    </section>

    <section id="reference.keywords.build">
      <title>Build</title>

      <para>The list of keywords related to the build phase.</para>

      <variablelist>
        <varlistentry>
          <term>build.cmd</term>

          <listitem>
            <para>Make command to run in <varname>${worksrcdir}</varname>; the
            default is "make".</para>

            <programlisting>build.cmd      pbxbuild</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>build.type</term>

          <listitem>
            <para>Defines which "make" is required: "gnu" or "bsd". Sets
            build.cmd to either "gnumake" or "bsdmake" accordingly.</para>

            <programlisting>build.type     gnu</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>build.pre_args</term>

          <listitem>
            <para>Arguments to pass to <varname>${build.cmd}</varname> before
            <varname>${build.args}</varname>; the default is
            <varname>${build.target.current}</varname>.</para>

            <programlisting>build.pre_args      -project AudioSlicer.xcode</programlisting>

            <simplelist>
              <member>build.pre_args-append</member>

              <member>build.pre_args-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>build.args</term>

          <listitem>
            <para>Arguments to pass to <varname>${build.cmd}</varname>.</para>

            <programlisting>build.args          -DNOWARN</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>build.target</term>

          <listitem>
            <para>Target to pass to make for building everything; default is
            "all".</para>

            <programlisting>build.target.all    all-src</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="reference.keywords.destroot">
      <title>Destroot</title>

      <para>The list of keywords related to the destroot phase.</para>

      <variablelist>
        <varlistentry>
          <term>destroot.cmd</term>

          <listitem>
            <para>Install command to run relative to
            <varname>${worksrcdir}</varname>; defaults is
            <varname>${build.cmd}</varname>.</para>

            <programlisting>destroot.cmd         pbxbuild</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>destroot.type</term>

          <listitem>
            <para>Defines which "make" is required: either "gnu" or "bsd".
            Sets install.cmd to either "gnumake" or "bsdmake"
            accordingly.</para>

            <programlisting>destroot.type        gnu</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>destroot.pre_args</term>

          <listitem>
            <para>Arguments to pass to <varname>${destroot.cmd}</varname>
            before <varname>${destroot.args}</varname>; default is
            ${destroot.target}.</para>

            <programlisting>destroot.pre_args    -project AudioSlicer.xcode</programlisting>

            <simplelist>
              <member>destroot.pre_args-append</member>

              <member>destroot.pre_args-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>destroot.target</term>

          <listitem>
            <para>Install target to pass to
            <varname>${destroot.cmd}</varname>.</para>

            <programlisting>destroot.target     install-src</programlisting>

            <simplelist>
              <member>destroot.target-append</member>

              <member>destroot.target-delete</member>
            </simplelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>destroot.destdir</term>

          <listitem>
            <para>Arguments passed to ${destroot.cmd} to install correctly
            into the destroot.</para>

            <programlisting>destroot.destdir     prefix=${destroot}${prefix}</programlisting>

            <note>
              <para>If an application's Makefile properly supports the DESTDIR
              variable, MacPorts will automatically destroot the port
              properly. A port must destroot properly or the port will not
              install correctly, upgrade, or uninstall. If not, you may need
              to set this variable, or even patch the application's
              Makefile.</para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>destroot.keepdirs</term>

          <listitem>
            <para>A list of directories that should not be removed if empty
            upon destroot completion.</para>

            <programlisting>destroot.keepdirs \
                ${destroot}${prefix}/var/run \
                ${destroot}${prefix}/var/log \
                ${destroot}${prefix}/var/cache/mrtg</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>destroot.violate_mtree</term>

          <listitem>
            <para>MacPorts tests for compliance to the common directory
            structure in ${prefix}; the default is "no". If a port is not
            compliant with the standard, set it to "yes".</para>

            <programlisting>destroot.violate_mtree    yes</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>

  <section id="reference.tcl-extensions">
    <title>Tcl Extensions</title>

    <para>A MacPorts Portfile is a Tcl script, so it may contain any arbitrary
    Tcl code you may learn about in a <ulink
    url="http://tmml.sourceforge.net/doc/tcl/">Tcl reference manual</ulink>.
    However, few authors will use arbitrary Tcl code; the vast majority will
    use Tcl extensions that are coded within MacPorts for performing the most
    common tasks needed for Portfiles. The list below is a list of Tcl
    extensions provided by MacPorts base.</para>

    <para><variablelist>
        <varlistentry>
          <term>file</term>

          <listitem>
            <para>Description.</para>

            <variablelist>
              <varlistentry>
                <term>file copy</term>

                <listitem>
                  <para></para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>file move</term>

                <listitem>
                  <para></para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>file rename</term>

                <listitem>
                  <para></para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>file delete [-force]</term>

                <listitem>
                  <para></para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>file mkdir</term>

                <listitem>
                  <para></para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>macros</term>

          <listitem>
            <para>Description.</para>

            <variablelist>
              <varlistentry>
                <term>copy</term>

                <listitem>
                  <para>Shorthand alternative to "file copy".</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>move</term>

                <listitem>
                  <para>Shorthand alternative to "file rename".</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>delete file ...</term>

                <listitem>
                  <para>Deletes each of the given files/directories. Behaves
                  similarly to file delete -force except that file delete
                  -force will fail to delete directories properly on 10.3
                  systems.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>touch</term>

                <listitem>
                  <para>Mimicks the BSD touch command.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>ln</term>

                <listitem>
                  <para>Mimickes the BSD ln command.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>xinstall</term>

          <listitem>
            <para>xinstall copies files and creates directories; it is
            intended to be compatible with install(1).</para>

            <variablelist>
              <varlistentry>
                <term>xinstall [-o owner] [-g group] [-m mode] [file1 file2
                ...] directory</term>

                <listitem>
                  <para>Install the specified file(s) to a destination
                  directory.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>xinstall [-o owner] [-g group] [-m mode] [-W dir] [file1
                file2 ...] directory</term>

                <listitem>
                  <para>Change to <option>dir</option> and install file(s) to
                  a destination directory.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>eval xinstall [-o owner] [-g group] [-m mode] [glob
                regexp] directory</term>

                <listitem>
                  <para>Install the file(s) matching the glob expression to a
                  destination directory.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>xinstall -d [-o owner] [-g group] [-m mode]
                directory</term>

                <listitem>
                  <para>Create a directory.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <para>Defaults:</para>

            <itemizedlist>
              <listitem>
                <para>owner -</para>
              </listitem>

              <listitem>
                <para>group -</para>
              </listitem>

              <listitem>
                <para>mode -</para>
              </listitem>
            </itemizedlist>

            <para>Examples:</para>

            <programlisting>xinstall -m 640 ${worksrcpath}/doc README \
       ${destroot}${prefix}/share/doc/${name}</programlisting>

            <programlisting>xinstall -m 640 -W ${worksrcpath}/doc README INSTALL COPY \
       ${destroot}${prefix}/share/doc/${name}</programlisting>

            <programlisting>eval xinstall -m 640 [glob ${worksrcpath}/doc/*] \
       ${destroot}${prefix}/share/doc/${name}</programlisting>

            <programlisting>xinstall -d ${destroot}${prefix}/share/doc/${name}</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>reinplace</term>

          <listitem>
            <para>Description.</para>

            <para>Examples:</para>

            <programlisting>example 1</programlisting>

            <programlisting>example 2</programlisting>

            <programlisting>example 3</programlisting>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>user/group</term>

          <listitem>
            <para></para>

            <variablelist>
              <varlistentry>
                <term>adduser username [uid=uid] [gid=gid] [passwd=passwd]
                [realname=realname] [home=home] [shell=shell]</term>

                <listitem>
                  <para>Add a new local user to the system with the specified
                  uid, gid, password, real name, home directory and login
                  shell.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>existsuser username</term>

                <listitem>
                  <para>Check if a local user exists.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>nextuid</term>

                <listitem>
                  <para>Returns the highest used uid plus one.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>addgroup group [gid=gid] [passwd=passwd]
                [realname=realname] [users=users]</term>

                <listitem>
                  <para>Add a new local group to the system, with the
                  specified gid, password, real name, and with a list users as
                  members.</para>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>existsgroup group</term>

                <listitem>
                  <para>Check if a local group exists and return the
                  corresponding gid. This can be used with adduser:</para>

                  <programlisting>addgroup foo
adduser foo gid=[existsgroup foo]</programlisting>
                </listitem>
              </varlistentry>
            </variablelist>

            <variablelist>
              <varlistentry>
                <term>nextgid</term>

                <listitem>
                  <para>Returns the highest used gid plus one.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>External program execution</term>

          <listitem>
            <para>Use only when ....</para>
          </listitem>
        </varlistentry>
      </variablelist></para>

    <para></para>
  </section>
</chapter>