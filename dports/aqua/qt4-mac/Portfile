# -*- coding: utf-8; mode: tcl; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 4; truncate-lines: t -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
PortGroup           archcheck 1.0

# use the qt4 group, except for the depends_lib
# since we're building qt4 here.
PortGroup           qt4 1.0
depends_lib-delete  bin:qmake:qt4-mac

name                qt4-mac
conflicts           qt4-mac-devel
version             4.7.0
categories          aqua
platforms           macosx
maintainers         michaelld

homepage            http://qt.nokia.com/
description         Qt Tool Kit
long_description    Qt Tool Kit: A cross-platform framework \
                    (headers, data, and libraries) for writing \
                    cross-platform GUI-based applications.

master_sites        trolltech
distname            qt-everywhere-opensource-src-${version}
checksums           md5     3a2f25b9b115037277f4fb759194a7a5 \
                    sha1    a5796c8f468c8f59249e5c696f913864c979f411 \
                    rmd160  3e9c0f0d9843b5c03ad4bd6193aff98531ee0746

depends_lib-append  port:zlib port:dbus port:openssl port:sqlite3 \
                    port:tiff port:libpng port:libmng port:jpeg

archcheck.files     lib/libz.dylib lib/libdbus-1.dylib \
                    lib/libssl.dylib lib/libsqlite3.dylib \
                    lib/libtiff.dylib lib/libpng.dylib \
                    lib/libmng.dylib lib/libjpeg.dylib

# (1) Test for Precompiled-headers support requires a C++ compiler,
# but configure calls it, by default, with a C compiler.
patchfiles-append   patch-precomp.test.diff

# (2) Tweak various scripts to allow easy replacement of
# MACOSX_DEPLOYMENT_TARGET: build for just the user's current OS.
patchfiles-append   patch-macosx-deployment-target.diff

# (3) Tweak the configure script to allow easy replacement of arch
# type(s).  The location of this patch is dependent on patch (2), but
# 'patch' should be able to figure it out.
patchfiles-append   patch-configure-arch.diff

post-patch {
    # set ARCHES in configure (per the second patchfile),
    # for building QMake.
    set ARCHES ""
    if {[variant_exists universal] && [variant_isset universal]} {
        # build for universal, as defined by the local user
        # first "-arch" is already in place; just 'join' the rest
        set ARCHES [join ${universal_archs} " -arch "]
    } else {
        # build arch & OS-version specific
        set ARCHES ${build_arch}
    }
    reinplace "s|@ARCHES@|${ARCHES}|g" ${worksrcpath}/configure

    # set MACOSX_DEPLOYMENT_TARGET version in various places.  These
    # were all patched in (2) above, and can be easily changed or
    # overridden by the user in a project-local qmake .pro script.
    set minor [expr [lindex [split ${os.version} "."] 0] - 4]
    set MACOSX_DEPLOYMENT_TARGET "10.${minor}"
    foreach fixfile {configure mkspecs/common/mac-g++.conf \
                     mkspecs/common/mac.conf qmake/qmake.pri \
                     src/tools/bootstrap/bootstrap.pro } {
        reinplace "s|@MACOSX_DEPLOYMENT_TARGET@|${MACOSX_DEPLOYMENT_TARGET}|g" \
            ${worksrcpath}/${fixfile}
    }

    # Ensure that correct C/C++ compilers are used.
    reinplace "s| g++\$| ${configure.cxx}|" \
        ${worksrcpath}/mkspecs/common/g++.conf
    reinplace "s| gcc\$| ${configure.cc}|"  \
        ${worksrcpath}/mkspecs/common/g++.conf
    reinplace "s| g++\$| ${configure.cxx}|" \
        ${worksrcpath}/mkspecs/macx-g++/qmake.conf
    reinplace "s| gcc\$| ${configure.cc}|"  \
        ${worksrcpath}/mkspecs/macx-g++/qmake.conf
}

# The build process uses -fconstant-cfstrings.
# configure.compiler should therefore not be one of the MacPorts compilers.

# --prefix is not recognized.
configure.pre_args-delete       --prefix=${prefix}

# --disable-dependency-tracking is not recognized.
configure.universal_args-delete --disable-dependency-tracking

################################################################################
# We do not want flags of any kind -- QT is smart enough to set up its own.    #
################################################################################

configure.cflags
configure.cppflags
configure.cxxflags
configure.ldflags

configure.universal_cflags
configure.universal_cppflags
configure.universal_cxxflags
configure.universal_ldflags

configure.cc_archflags
configure.cxx_archflags
if {[info exists configure.ld_archflags]} {
    configure.ld_archflags
}

#  use compiler.cpath and compiler.library_path, as per
#  http://trac.macports.org/ticket/25321 for all -I and -L entries,
#  so-as to avoid conflicts with already-installed headers and
#  libraries (giving preference to internal-to-this-port first)
#
#  CPATH is used instead of -I to avoid conflicts with other ports.
#  See http://trac.macports.org/ticket/15219 and
#  http://trac.macports.org/ticket/18723.
#
#  set the default paths to include those for SQLITE3 and DBUS-1

set header_path [ list ${prefix}/include/dbus-1.0 \
                       ${prefix}/lib/dbus-1.0/include \
                       ${prefix}/include ]

set library_path [ list ${prefix}/lib ]

# -system-sqlite ensures the use SQLite provided by MacPorts instead of Qt.
#
# -dbus-linked prevends qt4 from trying to dynamically load libdbus-1,
#     which it is not able to find in ${prefix}.
#
# -openssl-linked ensures that the MacPorts openssl is used.
#
# -no-framework ensures that this port is installed as separate
#     libraries and headers, with guaranteed locations and names that
#     can be used for archcheck.
#
# -no-phonon ensures that Qt does not install the 3rd-parth Phonon
#     port or its backend to QuickTime 7; Phonon is now installed via
#     the 'phonon' port, which is more up to date than that provided
#     by Qt.

configure.args                                            \
    -v                                                    \
    -release                                              \
    -confirm-license                                      \
    -opensource                                           \
    -prefix          ${qt_dir}                            \
    -docdir          ${qt_docs_dir}                       \
    -plugindir       ${qt_plugins_dir}                    \
    -importdir       ${qt_imports_dir}                    \
    -datadir         ${qt_data_dir}                       \
    -translationdir  ${qt_translations_dir}               \
    -sysconfdir      ${qt_sysconf_dir}                    \
    -examplesdir     ${qt_examples_dir}                   \
    -demosdir        ${qt_demos_dir}                      \
    -system-sqlite                                        \
    -openssl-linked                                       \
    -dbus-linked                                          \
    -fast                                                 \
    -nomake demos                                         \
    -nomake examples                                      \
    -optimized-qmake                                      \
    -no-framework                                         \
    -no-phonon                                            \
    -no-phonon-backend

# Stop configure script from searching for SQL Drivers
#    not available from MacPorts.
foreach driver {db2 ibase oci tds} {
    configure.args-append -no-sql-${driver}
}

# By default, disable most SQL Drivers.
# There must be at least one enabled (http://trac.macports.org/ticket/15627).
# SQLite is chosen to be always enabled because a copy of it is distributed
#    with Qt, so it is reasonable for the user to expect it.
foreach driver {mysql odbc psql sqlite2} {
    configure.args-append -no-sql-${driver}
}

# use the corrected CPATH and LIBRARY_PATH for configure
pre-configure {
    compiler.cpath [join ${header_path} :]
    compiler.library_path [join ${library_path} :]
}

platform darwin 8 {
    # build as Carbon only, not cocoa.
    configure.args-append -carbon
    post-configure {
        fs-traverse item ${worksrcpath} {
            if {"Makefile" == [file tail ${item}]} {
                reinplace "s|-framework QtHelp|-framework QtHelp -lQtCLucene|" ${item}
            }
        }
    }
}

# make sure the universal variant exists
variant universal {}

platform darwin {
    set ARCHES ""
    set SDK ""
    if {[variant_exists universal] && [variant_isset universal]} {
        # build for universal, as defined by the local user
        set ARCHES ${universal_archs}
        if {[info exists universal_sysroot]} {
            set SDK ${universal_sysroot}
        }
    } else {
        # build arch specific
        set ARCHES ${build_arch}
    }
    configure.args-append -arch \"${ARCHES}\"

    # cannot use pre-compiled headers when compiling with more than 1
    # arch type (typically +universal) or for X11
    if {[llength ${ARCHES}] != 1 || [variant_isset x11]} {
        configure.args-append -no-pch
    } else {
        configure.args-append -pch
    }

    # check to see if not compiling for the native machine hardware
    # (e.g., compiling for just i386 but CPU is x86_64); optimization
    # of QMake does not work in this circumstance.
    if {[lsearch -exact ${ARCHES} [exec uname -m]] == -1} {
        # yes: disable optimizing qmake
        configure.args-delete -optimized-qmake
    }

    # find a way to specify the SDK to use
    if {${SDK} == ""} {
        # else use the one for this OS version, if installed
        set minor [expr [lindex [split ${os.version} "."] 0] - 4]
        # set SDK version depending on OS version
        set sdk_version ""
        if {${minor} == "4"} {
            # OSX 10.4 requires an additional 'u'
            set sdk_version "10.4u"
        } else {
            set sdk_version "10.${minor}"
        }
        set SDK ${developer_dir}/SDKs/MacOSX${sdk_version}.sdk
    }
    if {[file exists ${SDK}]} {
        configure.args-append -sdk ${SDK}
    } else {
        ui_msg \
"No SDK found in ${developer_dir}/SDKs for ${sdk_version} ; \
configure will probably fail. \n \
Please install Apple's Developer Tools again."
    }
}

# Remove any '-I' string from the C*FLAGS for SQLITE and DBUS, so that
# what remains are just non-I flags; these paths are in compiler.cpath .
# The includes for all the other variants are not used by
# 'configure', and are already included in the compiler.cpath .
post-configure {
    # SQLITE
    reinplace "/CFLAGS_SQLITE/s@-I${prefix}/\[^ \]*include\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    # DBUS
    reinplace "/CFLAGS_DBUS/s@-I${prefix}/\[^ \]*include\[^ \]*@@g" \
        ${worksrcpath}/.qmake.cache
    # during the 'build' stage, 'make' will rebuild the Makefiles that
    # depend on any of these changed files.
}

# use the corrected CPATH and LIBRARY_PATH for build
pre-build {
    compiler.cpath [join ${header_path} :]
    compiler.library_path [join ${library_path} :]
}

build.target        first

post-destroot {
    set destroot_qt ${destroot}${qt_dir}

    # Fix .pc and .prl files by changing ${worksrcpath}\${prefix} to
    # ${qt_dir}\${prefix} ("\" means 'take away').  Cannot use
    # "find -E" since it is not necessarily portable.
    regsub ${prefix} ${worksrcpath} "" from_dir
    regsub ${prefix} ${qt_dir} "" to_dir
    foreach fixfile [exec find ${destroot_qt} -name "*.pc"] {
        reinplace "s|${from_dir}|${to_dir}|g" ${fixfile}
    }
    foreach fixfile [exec find ${destroot_qt} -name "*.prl"] {
        reinplace "s|${from_dir}|${to_dir}|g" ${fixfile}
    }

    # Install documentation.
    xinstall -m 755 -d ${worksrcpath}/${qt_docs_dir}
    xinstall -m 644 -W ${worksrcpath} \
        INSTALL LGPL_EXCEPTION.txt LICENSE.FDL \
        LICENSE.GPL3 LICENSE.LGPL README \
        ${destroot}${qt_docs_dir}

    # Fix includes: Remove include/Qt.
    # It should never be used in Qt4 or newer.
    # It is there for legacy purposes: it's how
    # Qt3's headers were installed.
    if {[file exists ${destroot_qt}/include/Qt]} {
        delete ${destroot_qt}/include/Qt
    }

    # Install cmake files (taken from port 'kdelibs4'). To use this
    # file, include '-DCMAKE_MODULE_PATH=...' in configure.args during
    # the initial 'configure' stage (which uses CMake), to the full
    # path of where the CMake files are installed.
    xinstall -m 755 -d ${destroot}${qt_cmake_module_dir}
    xinstall -m 644 -W ${filespath} \
        FindQt4.cmake Qt4ConfigDependentSettings.cmake \
        Qt4Macros.cmake MacroPushRequiredVars.cmake \
        ${destroot}${qt_cmake_module_dir}

    # install qt_menu.nib, used by any applications making use of Qt's
    # application class.
    xinstall -m 755 -d ${destroot_qt}/lib/Resources
    copy ${worksrcpath}/src/gui/mac/qt_menu.nib \
        ${destroot_qt}/lib/Resources

    # Fix import and plugin library ID (self name)
    foreach fixfile [exec find ${destroot_qt}/share/${qt_name} \
                         -name "*.dylib" -type f | \
                          sed -e "s@${destroot}@@g" ] {
        system "install_name_tool -id ${fixfile} ${destroot}${fixfile}"
    }
}

pre-activate {
    # make sure 'none' is selected by qt4_select, so that there is no
    # conflict between it and this port.
    if {[file exists ${prefix}/bin/qt4_select]} {
        if {[exec ${prefix}/bin/qt4_select -s] != "none"} {
            ui_msg "Disabling 'qt4_select' selection."
            system "exec ${prefix}/bin/qt4_select none"
        }
    }
}

variant mysql description {Enable MySQL SQL Driver} {
    depends_lib-append path:lib/mysql5:mysql5
    archcheck.files-append lib/mysql5/mysql/libmysqlclient.dylib
    lunshift header_path ${prefix}/include/mysql5/mysql
    lunshift library_path ${prefix}/lib/mysql5/mysql
    configure.args-delete -no-sql-mysql
    configure.args-append -plugin-sql-mysql
}

variant odbc description {Enable iODBC SQL Driver} {
    depends_lib-append port:libiodbc
    archcheck.files-append lib/libiodbc.dylib
    configure.args-delete -no-sql-odbc
    configure.args-append -plugin-sql-odbc
}

variant psql83 conflicts psql84 psql90 psql91 \
description {Enable Postgre SQL Driver version 8.3} {}

variant psql84 conflicts psql83 psql90 psql91 \
description {Enable Postgre SQL Driver version 8.4} {}

variant psql90 conflicts psql83 psql84 psql91 \
description {Enable Postgre SQL Driver version 9.0} {}

variant psql91 conflicts psql83 psql84 psql90 \
description {Enable Postgre SQL Driver version 9.1} {}

set psql_version ""
if {[variant_isset psql83]} {
    set psql_version "83"
} elseif {[variant_isset psql84]} {
    set psql_version "84"
} elseif {[variant_isset psql90]} {
    set psql_version "90"
} elseif {[variant_isset psql91]} {
    set psql_version "91"
}

if {${psql_version} != ""} {
    depends_lib-append port:postgresql${psql_version}
    archcheck.files-append lib/postgresql${psql_version}/libpgtypes.dylib
    lunshift header_path ${prefix}/include/postgresql${psql_version}
    lunshift library_path ${prefix}/lib/postgresql${psql_version}
    configure.args-delete -no-sql-psql
    configure.args-append -plugin-sql-psql
}

variant sqlite2 description {Enable SQLite version 2 SQL Driver} {
    depends_lib-append port:sqlite2
    archcheck.files-append lib/libsqlite.dylib
    configure.args-delete -no-sql-sqlite2
    configure.args-append -plugin-sql-sqlite2
}

variant raster description {Use raster graphics system by default} {
    configure.args-append -graphicssystem raster
}

variant demos description {Build demos} {
   configure.args-delete -nomake demos
}

variant examples description {Build examples} {
   configure.args-delete -nomake examples
}

variant debug description \
{Build both release and debug library} {
    configure.args-delete -release
    configure.args-append -debug-and-release
}

variant quartz conflicts x11 \
description {Build for Native OSX Quartz GUI, not X11 (default)} {}

variant x11 conflicts quartz \
description {Build for X11 GUI, not Native OSX Quartz} {}

# if neither +x11 or +quartz were specified, default to the latter
if {![variant_isset quartz] && ![variant_isset x11]} {
    default_variants +quartz
}

# check to see if user specified just "-quartz", which can't work.
if {![variant_isset quartz] && ![variant_isset x11]} {
    return -code error \
"\n\nThe variant -quartz will not work alone.
Please select one of +quartz or +x11 as a variant.\n"
}

if {[variant_isset x11]} {
    return -code error "\n\nVariant +x11 is not yet functional; \
please use +quartz for now.\n"
}

livecheck.type      regex
livecheck.url       http://get.qt.nokia.com/qt/source/
livecheck.regex     "qt-everywhere-opensource-src-(\[0-9a-z.-\]+)${extract.suffix}"
