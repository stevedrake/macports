--- SConstruct.orig	2011-10-21 19:52:16.000000000 -0500
+++ SConstruct	2011-10-27 20:35:05.000000000 -0500
@@ -473,21 +473,15 @@
     darwin = True
     platform = "osx" # prettier than darwin
 
-    if env["CXX"] is None:
-        print( "YO" )
-        if os.path.exists( "/usr/bin/g++-4.2" ):
-            env["CXX"] = "g++-4.2"
-
     nix = True
 
-    if force64:
-        env.Append( CPPPATH=["/usr/64/include"] )
-        env.Append( LIBPATH=["/usr/64/lib"] )
-        if installDir == DEFAULT_INSTALL_DIR and not distBuild:
-            installDir = "/usr/64/"
-    else:
-        env.Append( CPPPATH=filterExists(["/sw/include" , "/opt/local/include"]) )
-        env.Append( LIBPATH=filterExists(["/sw/lib/", "/opt/local/lib"]) )
+    env.Append( CPPPATH=["@@PREFIX@@/include"] )
+    env.Append( LIBPATH=["@@PREFIX@@/lib"] )
+    env["CFLAGS"] = os.getenv("CFLAGS")
+    env["CPPFLAGS"] = os.getenv("CPPFLAGS")
+    env["CXXFLAGS"] = os.getenv("CXXFLAGS")
+    env["LINKFLAGS"] = os.getenv("LINKFLAGS")
+
 
 elif "linux2" == os.sys.platform or "linux3" == os.sys.platform:
     linux = True
@@ -670,7 +664,7 @@
         env["CXX"] = "distcc " + env["CXX"]
         
     # -Winvalid-pch Warn if a precompiled header (see Precompiled Headers) is found in the search path but can't be used. 
-    env.Append( CPPFLAGS="-fPIC -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch" )
+    env.Append( CPPFLAGS=" -fPIC -fno-strict-aliasing -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch " )
     # env.Append( " -Wconversion" ) TODO: this doesn't really work yet
     if linux:
         env.Append( CPPFLAGS=" -Werror " )
@@ -757,21 +751,6 @@
         keyfile = "jstests/libs/key%s" % keysuffix
         os.chmod( keyfile , stat.S_IWUSR|stat.S_IRUSR )
 
-for x in os.listdir( "third_party" ):
-    if not x.endswith( ".py" ) or x.find( "#" ) >= 0:
-        continue
-         
-    shortName = x.rpartition( "." )[0]
-    path = "third_party/%s" % x
-
-
-    myModule = imp.load_module( "third_party_%s" % shortName , open( path , "r" ) , path , ( ".py" , "r" , imp.PY_SOURCE ) )
-    fileLists = { "commonFiles" : commonFiles , "serverOnlyFiles" : serverOnlyFiles , "scriptingFiles" : scriptingFiles }
-    
-    options_topass["windows"] = windows
-    options_topass["nix"] = nix
-    
-    myModule.configure( env , fileLists , options_topass )
 
 coreServerFiles += scriptingFiles
 
@@ -963,7 +942,7 @@
 
         myCheckLib( "tcmalloc" , True );  # if successful, appedded 'tcmalloc' to myenv[ LIBS ]
         myenv.Append( CPPDEFINES=[ "HEAP_CHECKING" ] )
-        myenv.Append( CPPFLAGS="-fno-omit-frame-pointer" )
+        myenv.Append( CPPFLAGS=" -fno-omit-frame-pointer " )
 
     # FIXME doConfigure() is being called twice, in the case of the shell. So if it is called 
     # with shell==True, it'd be on its second call and it would need to rearrange the libraries'
