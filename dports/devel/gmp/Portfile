# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem 1.0
PortGroup  muniversal  1.0

name            gmp
version         4.2.4
revision        2
categories      devel math
maintainers     mcalhoun openmaintainer
platforms       darwin
description     GNU multiple precision arithmetic library
long_description \
    GNU MP is a library for arbitrary precision arithmetic, operating on\
    signed integers, rational numbers, and floating point numbers. It   \
    has a rich set of functions, and the functions have a regular       \
    interface. GNU MP is designed to be as fast as possible, both for   \
    small operands and for huge operands. The speed is achieved by using\
    fullwords as the basic arithmetic type, by using fast algorithms, by\
    carefully optimized assembly code for the most common inner loops   \
    for a lots of CPUs, and by a general emphasis on speed (instead of  \
    simplicity or elegance).

homepage        http://gmplib.org/
master_sites    gnu

checksums       md5     fc1e3b3a2a5038d4d74138d0b9cf8dbe \
                sha1    bb721f94fbeeb8c609104540b408da6707c370ec \
                rmd160  15c6c40c377088a3bcf9d432bcc27c777991cb12

use_bzip2       yes
use_parallel_build yes

configure.args  --infodir=${prefix}/share/info \
                --enable-cxx

# if CFLAGS and CXXFLAGS are undefined, configure script tries to build fastest library for build machine.
pre-configure {
    # Set in pre-configure so any universal flags are removed as well.
    configure.cflags
    configure.cxxflags
}

test.run        yes
test.cmd        make
test.target     check

set machine [exec "/usr/bin/machine"]
if { ${machine}=="ppc970" } {
    # Use special 32-bit mode for G5 processors.
    # In http://gmplib.org/manual/ABI-and-ISA.html, mode32 is said to be faster.
    set abi32  mode32
} else {
    set abi32  32
}

if {![variant_isset universal]} {
    configure.env   ABI=${abi32}
} else {
    # Keep configure.cflags and configure.cxxflags empty.
    set merger_arch_flag no

    array set merger_configure_env {
        i386    ABI=32
        ppc64   ABI=mode64
        x86_64  ABI=64
    }
    set merger_configure_env(ppc) ABI=${abi32}

    # universal_archs_to_use might not be set before pre-fetch.
    pre-destroot {
        global merger_dont_diff merger_configure_env

        # if building on a G5, merge might not work.
        if  { [llength ${universal_archs_to_use}]>2 } {
            set merger_dont_diff "${prefix}/include/gmp.h"
        }
    }

    # For cross-compiling, set C compiler and pre-precessor.
    if { ${os.arch}=="i386" } {
        if { ${os.major} >= 10 } {
            lappend merger_configure_env(ppc)  CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
        }
        lappend merger_configure_env(ppc64)    CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
    } else {
        lappend merger_configure_env(i386)     CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
        lappend merger_configure_env(x86_64)   CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
    }
}
