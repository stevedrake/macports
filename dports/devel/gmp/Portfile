# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem 1.0
PortGroup  muniversal  1.0

name            gmp
version         4.3.0
revision        1
categories      devel math
maintainers     mcalhoun openmaintainer
platforms       darwin
description     GNU multiple precision arithmetic library
long_description \
    GNU MP is a library for arbitrary precision arithmetic, operating on\
    signed integers, rational numbers, and floating point numbers. It   \
    has a rich set of functions, and the functions have a regular       \
    interface. GNU MP is designed to be as fast as possible, both for   \
    small operands and for huge operands. The speed is achieved by using\
    fullwords as the basic arithmetic type, by using fast algorithms, by\
    carefully optimized assembly code for the most common inner loops   \
    for a lots of CPUs, and by a general emphasis on speed (instead of  \
    simplicity or elegance).

homepage        http://gmplib.org/
master_sites    gnu

checksums       md5     9687383f0def0cc48dfc19afa36f1eb5 \
                sha1    86dbd8a6b2fbb4c75760a80009227c9a11b801a9 \
                rmd160  db53caaf856a54d2a2c0d60961a7c4b820bcebce

use_bzip2       yes
use_parallel_build yes

# See http://trac.macports.org/ticket/16634
# Use less specialized assembly so that all tests will pass.
patchfiles      patch-gmp-h.in.diff patch-aors_n.asm.diff

configure.args  --infodir=${prefix}/share/info \
                --enable-cxx

post-patch {
    # Use less specialized assembly so that all tests will pass.
    delete ${worksrcpath}/mpn/x86/p6/sse2/popcount.asm
}

# if CFLAGS and CXXFLAGS are undefined, configure script tries to build fastest library for build machine.
# On PowerPC machines, CFLAGS must be empty to get -force_cpusubtype_ALL.
pre-configure {
    # Set in pre-configure so any universal flags are removed as well.
    configure.cflags
    configure.cxxflags
}
configure.pipe  no

test.run        yes
test.cmd        make
test.target     check

if {![variant_isset universal]} {
    configure.env   ABI=32
} else {
    # Keep configure.cflags and configure.cxxflags empty.
    set merger_arch_flag no

    array set merger_configure_env {
        ppc     ABI=32
        i386    ABI=32
        ppc64   ABI=mode64
        x86_64  ABI=64
    }

    # universal_archs_to_use might not be set before pre-fetch.
    pre-destroot {
        global merger_dont_diff merger_configure_env

        # PortGroup muniversal has difficulty merging three files.
        if  { [llength ${universal_archs_to_use}] == 3 } {
            set merger_dont_diff "${prefix}/include/gmp.h"
        }
    }

    # For cross-compiling, set C compiler and pre-precessor.
    if { ${os.arch}=="i386" } {
        if { ${os.major} >= 10 } {
            lappend merger_configure_env(ppc)  CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
        }
        lappend merger_configure_env(ppc64)    CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
    } else {
        lappend merger_configure_env(i386)     CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
        lappend merger_configure_env(x86_64)   CC_FOR_BUILD=${configure.cc} CPP_FOR_BUILD=${configure.cpp}
    }
}
