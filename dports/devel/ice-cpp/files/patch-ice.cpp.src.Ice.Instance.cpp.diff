diff --git a/cpp/src/Ice/Instance.cpp b/cpp/src/Ice/Instance.cpp
index 8f80123..be22705 100644
--- a/cpp/src/Ice/Instance.cpp
+++ b/cpp/src/Ice/Instance.cpp
@@ -71,6 +71,9 @@ namespace
 IceUtil::Mutex* staticMutex = 0;
 bool oneOffDone = false;
 int instanceCount = 0;
+#ifndef _WIN32
+struct sigaction oldAction;
+#endif
 bool printProcessIdDone = false;
 string identForOpenlog;
 
@@ -870,8 +873,7 @@ IceInternal::Instance::Instance(const CommunicatorPtr& communicator, const Initi
                 action.sa_handler = SIG_IGN;
                 sigemptyset(&action.sa_mask);
                 action.sa_flags = 0;
-                sigaction(SIGPIPE, &action, 0);
-                
+                sigaction(SIGPIPE, &action, &oldAction);
                 if(_initData.properties->getPropertyAsInt("Ice.UseSyslog") > 0)
                 {
                     identForOpenlog = _initData.properties->getProperty("Ice.ProgramName");
@@ -1051,12 +1053,8 @@ IceInternal::Instance::~Instance()
 #endif
         
 #ifndef _WIN32
-        struct sigaction action;
-        action.sa_handler = SIG_DFL;
-        sigemptyset(&action.sa_mask);
-        action.sa_flags = 0;
-        sigaction(SIGPIPE, &action, 0);
-        
+        sigaction(SIGPIPE, &oldAction, 0);
+
         if(!identForOpenlog.empty())
         {
             closelog();
diff --git a/cpp/test/Ice/interceptor/Client.cpp b/cpp/test/Ice/interceptor/Client.cpp
index fcc2203..c20cfe8 100644
--- a/cpp/test/Ice/interceptor/Client.cpp
+++ b/cpp/test/Ice/interceptor/Client.cpp
@@ -15,6 +15,14 @@
 #include <AMDInterceptorI.h>
 #include <iostream>
 
+#ifndef _WIN32
+//
+// SIGPIPE test
+//
+#   include <signal.h>
+#endif
+
+
 using namespace std;
 
 class Client : public Ice::Application
@@ -29,16 +37,55 @@ private:
     int runAmd(const Test::MyObjectPrx&, const AMDInterceptorIPtr&); 
 };
 
+#ifndef _WIN32
+void testAction(int)
+{
+    test(false);
+}
+#endif
+
 int
 main(int argc, char* argv[])
 {
+#ifndef _WIN32
+//
+// Set SIGPIPE action
+//
+    struct sigaction action;
+    action.sa_handler = &testAction;
+    sigemptyset(&action.sa_mask);
+    action.sa_flags = 0;
+    sigaction(SIGPIPE, &action, 0);
+#endif
+
     Client app;
-    return app.main(argc, argv);
+    int result = app.main(argc, argv);
+
+#ifndef _WIN32
+//
+// Check SIGPIPE was properly reset to old action
+//
+    struct sigaction newAction;
+    sigaction(SIGPIPE, 0, &newAction);
+    test(action.sa_handler == &testAction);
+#endif
+
+    return result;
 }
 
 int
 Client::run(int, char*[])
 {
+
+#ifndef _WIN32
+//
+// Check SIGPIPE is now SIG_IGN
+//
+    struct sigaction action;
+    sigaction(SIGPIPE, 0, &action);
+    test(action.sa_handler == SIG_IGN);
+#endif
+
     //
     // Create OA and servants  
     //  
