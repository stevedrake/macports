diff --git a/bin/lein b/bin/lein
index 21eef64..26f655e 100755
--- a/bin/lein
+++ b/bin/lein
@@ -1,5 +1,6 @@
 #!/bin/sh
 
+PREFIX=__PREFIX__
 export LEIN_VERSION="1.3.1"
 
 case $LEIN_VERSION in
@@ -31,14 +32,15 @@ do
 done
 
 if [ "$LEIN_HOME" = "" ]; then
-    LEIN_HOME="$HOME/.lein"
+    LEIN_HOME="$PREFIX/share/java/leiningen"
 fi
 
+CLASSPATH="$(find -H $PREFIX -name \*.jar 2> /dev/null -print0 | tr \\0 \:)"
 LEIN_PLUGINS="$(ls -1 lib/dev/*jar 2> /dev/null | tr \\n \:)"
 LEIN_USER_PLUGINS="$(ls -1 $LEIN_HOME/plugins/*jar 2> /dev/null | tr \\n \:)"
 CLASSPATH=$LEIN_USER_PLUGINS:$LEIN_PLUGINS:src/:$CLASSPATH
 LEIN_JAR="$HOME/.m2/repository/leiningen/leiningen/$LEIN_VERSION/leiningen-$LEIN_VERSION-standalone.jar"
-CLOJURE_JAR="$HOME/.m2/repository/org/clojure/clojure/1.2.0/clojure-1.2.0.jar"
+CLOJURE_JAR="$PREFIX/share/java/clojure/lib/clojure.jar"
 NULL_DEVICE=/dev/null
 
 # normalize $0 on certain BSDs
@@ -87,82 +89,38 @@ fi
 
 JAVA_CMD=${JAVA_CMD:-"java"}
 
-# If you're packaging this for a package manager (.deb, homebrew, etc)
-# you need to remove the self-install and upgrade functionality.
-if [ "$1" = "self-install" ]; then
-    echo "Downloading Leiningen now..."
-    LEIN_DIR=`dirname "$LEIN_JAR"`
-    mkdir -p "$LEIN_DIR"
-    LEIN_URL="http://github.com/downloads/technomancy/leiningen/leiningen-$LEIN_VERSION-standalone.jar"
-    $HTTP_CLIENT "$LEIN_JAR" "$LEIN_URL"
-    if [ $? != 0 ]; then
-        echo "Failed to download $LEIN_URL"
-        if [ $SNAPSHOT = "YES" ]; then
-            echo "See README.md for SNAPSHOT build instructions."
-        fi
-        rm $LEIN_JAR
-        exit 1
-    fi
-elif [ "$1" = "upgrade" ]; then
-    if [ $SNAPSHOT = "YES" ]; then
-        echo "The upgrade task is only meant for stable releases."
-        echo "See the \"Hacking\" section of the README."
-        exit 1
-    fi
-    if [ ! -w "$SCRIPT" ]; then
-        echo "You do not have permission to upgrade the installation in $SCRIPT"
-        exit 1
-    else
-        echo "The script at $SCRIPT will be upgraded to the latest stable version."
-        echo -n "Do you want to continue [Y/n]? "
-        read RESP
-        case "$RESP" in
-            y|Y|"")
-                echo
-                echo "Upgrading..."
-                LEIN_SCRIPT_URL="http://github.com/technomancy/leiningen/raw/stable/bin/lein"
-                $HTTP_CLIENT "$SCRIPT" "$LEIN_SCRIPT_URL" \
-                    && chmod +x "$SCRIPT" \
-                    && echo && $SCRIPT self-install && echo && echo "Now running" `$SCRIPT version`
-                exit $?;;
-            *)
-                echo "Aborted."
-                exit 1;;
-        esac
-    fi
-else
-    if [ "$OSTYPE" = "cygwin" ]; then
-        # When running on Cygwin, use Windows-style paths for java
-        CLOJURE_JAR=`cygpath -w "$CLOJURE_JAR"`
-        CLASSPATH=`cygpath -wp "$CLASSPATH"`
-        NULL_DEVICE=NUL
-    fi
+if [ "$OSTYPE" = "cygwin" ]; then
+    # When running on Cygwin, use Windows-style paths for java
+    CLOJURE_JAR=`cygpath -w "$CLOJURE_JAR"`
+    CLASSPATH=`cygpath -wp "$CLASSPATH"`
+    NULL_DEVICE=NUL
+fi
 
-    if [ $DEBUG ]; then
-        echo $CLASSPATH
-        echo $CLOJURE_JAR
-    fi
+if [ $DEBUG ]; then
+    echo $CLASSPATH
+    echo $CLOJURE_JAR
+fi
 
-    if ([ "$1" = "repl" ] || [ "$1" = "interactive" ] || [ "$1" = "int" ]) &&
-        [ -z $INSIDE_EMACS ] && [ "$TERM" != "dumb" ]; then
-        # Use rlwrap if it's available, otherwise fall back to JLine
-        RLWRAP=`which rlwrap`
-        if [ $? -eq 1 ]; then
-            JLINE=jline.ConsoleRunner
-            if [ "$OSTYPE" = "cygwin" ]; then
-		JLINE="-Djline.terminal=jline.UnixTerminal jline.ConsoleRunner"
-		CYGWIN_JLINE=y
-            fi
+if ([ "$1" = "repl" ] || [ "$1" = "interactive" ] || [ "$1" = "int" ]) &&
+    [ -z $INSIDE_EMACS ] && [ "$TERM" != "dumb" ]; then
+    # Use rlwrap if it's available, otherwise fall back to JLine
+    RLWRAP=`which rlwrap`
+    if [ $? -eq 1 ]; then
+        JLINE=jline.ConsoleRunner
+        if [ "$OSTYPE" = "cygwin" ]; then
+    JLINE="-Djline.terminal=jline.UnixTerminal jline.ConsoleRunner"
+    CYGWIN_JLINE=y
         fi
     fi
-
-    # The -Xbootclasspath argument is optional here: if the jar
-    # doesn't exist everything will still work, it will just have a
-    # slower JVM boot.
-    # TODO: add more to the boot classpath
-    test $CYGWIN_JLINE && stty -icanon min 1 -echo
-    exec $RLWRAP $JAVA_CMD -Xbootclasspath/a:"$CLOJURE_JAR" -client $JAVA_OPTS \
-        -cp "$CLASSPATH" $JLINE clojure.main -e "(use 'leiningen.core)(-main)" \
-        $NULL_DEVICE $@
-    test $CYGWIN_JLINE && stty icanon echo
 fi
+
+# The -Xbootclasspath argument is optional here: if the jar
+# doesn't exist everything will still work, it will just have a
+# slower JVM boot.
+# TODO: add more to the boot classpath
+test $CYGWIN_JLINE && stty -icanon min 1 -echo
+exec $RLWRAP $JAVA_CMD -Xbootclasspath/a:"$CLOJURE_JAR" -client $JAVA_OPTS \
+    -cp "$CLASSPATH" $JLINE clojure.main -e "(use 'leiningen.core)(-main)" \
+    $NULL_DEVICE $@
+test $CYGWIN_JLINE && stty icanon echo
+
