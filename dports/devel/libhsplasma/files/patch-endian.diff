--- core/Sys/plUuid.cpp.orig	Thu Nov 11 11:14:21 2010 -0800
+++ core/Sys/plUuid.cpp	Thu Nov 18 15:52:46 2010 -0600
@@ -69,6 +69,9 @@
     fData1 = *(unsigned int*  )(buffer    );
     fData2 = *(unsigned short*)(buffer + 4);
     fData3 = *(unsigned short*)(buffer + 6);
+    fData1 = LESWAP32(fData1);
+    fData2 = LESWAP16(fData2);
+    fData3 = LESWAP16(fData3);
     memcpy(fData4, buffer + 8, 8);
 }
 
@@ -80,9 +83,9 @@
 }
 
 void plUuid::write(unsigned char* buffer) const {
-    *(unsigned int*  )(buffer    ) = fData1;
-    *(unsigned short*)(buffer + 4) = fData2;
-    *(unsigned short*)(buffer + 6) = fData3;
+    *(unsigned int*  )(buffer    ) = LESWAP32(fData1);
+    *(unsigned short*)(buffer + 4) = LESWAP16(fData2);
+    *(unsigned short*)(buffer + 6) = LESWAP16(fData3);
     memcpy(buffer + 8, fData4, 8);
 }
 
--- net/auth/pnAuthClient.cpp.orig	Thu Nov 11 11:14:21 2010 -0800
+++ net/auth/pnAuthClient.cpp	Thu Nov 18 15:52:46 2010 -0600
@@ -64,6 +64,7 @@
     hsUint16 msgId;
 
     sock->recv(&msgId, sizeof(hsUint16));
+    msgId = LESWAP16(msgId);
     const pnNetMsg* msgDesc = GET_Auth2Cli(msgId);
     if (msgDesc == NULL) {
         plDebug::Error("Got invalid message ID (%u)", msgId);
@@ -385,13 +386,13 @@
     hsUbyte connectHeader[51];  // ConnectHeader + AuthConnectHeader
     /* Begin ConnectHeader */
     *(hsUbyte* )(connectHeader     ) = kConnTypeCliToAuth;
-    *(hsUint16*)(connectHeader +  1) = 31;
-    *(hsUint32*)(connectHeader +  3) = fBuildId;
-    *(hsUint32*)(connectHeader +  7) = fBuildType;
-    *(hsUint32*)(connectHeader + 11) = fBranchId;
+    *(hsUint16*)(connectHeader +  1) = LESWAP16(31);
+    *(hsUint32*)(connectHeader +  3) = LESWAP32(fBuildId);
+    *(hsUint32*)(connectHeader +  7) = LESWAP32(fBuildType);
+    *(hsUint32*)(connectHeader + 11) = LESWAP32(fBranchId);
     fProductId.write(connectHeader + 15);
     /* Begin AuthConnectHeader */
-    *(hsUint32*)(connectHeader + 31) = 20;
+    *(hsUint32*)(connectHeader + 31) = LESWAP32(20);
     memset(connectHeader + 35, 0, 16);
     fSock->send(connectHeader, 51);
 
@@ -439,6 +440,7 @@
     } else if (msg == kNetCliSrv2CliError) {
         hsUint32 errorCode;
         fSock->recv(&errorCode, sizeof(hsUint32));
+        errorCode = LESWAP32(errorCode);
         delete fSock;
         fSock = NULL;
         plDebug::Error("Error connecting to Auth server: %s",
--- net/pnSocket.cpp.orig	Thu Nov 11 11:14:21 2010 -0800
+++ net/pnSocket.cpp	Thu Nov 18 15:52:46 2010 -0600
@@ -334,11 +334,11 @@
         } else if (size == 2) {
             hsUint16 v;
             sock->recv(&v, sizeof(hsUint16));
-            data.fUint = v;
+            data.fUint = LESWAP16(v);
         } else if (size == 4) {
             hsUint32 v;
             sock->recv(&v, sizeof(hsUint32));
-            data.fUint = v;
+            data.fUint = LESWAP32(v);
         }
 
 #ifdef COMMDEBUG
@@ -381,10 +381,10 @@
             *(hsUbyte*)buf = (hsUbyte)data.fUint;
             buf += sizeof(hsUbyte);
         } else if (size == 2) {
-            *(hsUint16*)buf = (hsUint16)data.fUint;
+            *(hsUint16*)buf = (hsUint16)LESWAP16(data.fUint);
             buf += sizeof(hsUint16);
         } else if (size == 4) {
-            *(hsUint32*)buf = data.fUint;
+            *(hsUint32*)buf = LESWAP32(data.fUint);
             buf += sizeof(hsUint32);
         }
 
@@ -435,7 +435,7 @@
     size_t bufSize = sizeof(hsUint16) + NCMessageSize(data, msg);
     unsigned char* buffer = new unsigned char[bufSize];
     unsigned char* bp = buffer;
-    *(hsUint16*)bp = msg->fMsgId;
+    *(hsUint16*)bp = LESWAP16(msg->fMsgId);
     bp += sizeof(hsUint16);
 
     unsigned int size = 0;
@@ -450,9 +450,13 @@
         case kFieldString:
             {
                 hsUint16 len = plwcslen(data[i].fString);
-                *(hsUint16*)bp = len;
+                *(hsUint16*)bp = LESWAP16(len);
                 bp += sizeof(hsUint16);
                 memcpy(bp, data[i].fString, len * sizeof(pl_wchar_t));
+#ifdef WORDS_BIGENDIAN
+                for (size_t j=0; j<len; j++)
+                    bp[j] = LESWAP16(bp[j]);
+#endif
                 bp += len * sizeof(pl_wchar_t);
 #ifdef COMMDEBUG
                 plDebug::Debug("     -> Str: %s", plString(data[i].fString, len).cstr());
@@ -462,7 +466,7 @@
         case kFieldVarCount:
             size = field->fSize;
             count = data[i].fUint;
-            *(hsUint32*)bp = count;
+            *(hsUint32*)bp = LESWAP32(count);
             bp += sizeof(hsUint32);
 #ifdef COMMDEBUG
             plDebug::Debug("     -> Count: %d", count);
@@ -536,8 +540,13 @@
             {
                 hsUint16 len;
                 recv(&len, sizeof(hsUint16));
+                len = LESWAP16(len);
                 pl_wchar_t* str = new pl_wchar_t[len + 1];
                 recv(str, len * sizeof(pl_wchar_t));
+#ifdef WORDS_BIGENDIAN
+                for (size_t j=0; j<len; j++)
+                    str[j] = LESWAP16(str[j]);
+#endif
                 str[len] = 0;
                 data[i].fString = str;
 #ifdef COMMDEBUG
@@ -548,7 +557,7 @@
         case kFieldVarCount:
             size = field->fSize;
             recv(&count, sizeof(hsUint32));
-            data[i].fUint = count;
+            data[i].fUint = LESWAP32(count);
 #ifdef COMMDEBUG
             plDebug::Debug("     <- Count: %d", count);
 #endif
--- net/file/pnFileClient.cpp.orig	Thu Nov 11 11:14:21 2010 -0800
+++ net/file/pnFileClient.cpp	Thu Nov 18 15:52:46 2010 -0600
@@ -115,6 +115,8 @@
 
     sock->recv(&header.fMsgSize, sizeof(header.fMsgSize));
     sock->recv(&header.fMsgId, sizeof(header.fMsgId));
+    header.fMsgSize = LESWAP32(header.fMsgSize);
+    header.fMsgId = LESWAP32(header.fMsgId);
     hsUbyte* msgbuf = new hsUbyte[header.fMsgSize - 8];
     hsUint32 read_data = 0;
     while (read_data < header.fMsgSize - 8)
@@ -239,13 +241,13 @@
     hsUbyte connectHeader[43];  // ConnectHeader + FileConnectHeader
     /* Begin ConnectHeader */
     *(hsUbyte* )(connectHeader     ) = kConnTypeCliToFile;
-    *(hsUint16*)(connectHeader +  1) = 31;
+    *(hsUint16*)(connectHeader +  1) = LESWAP16(31);
     *(hsUint32*)(connectHeader +  3) = 0;
-    *(hsUint32*)(connectHeader +  7) = fBuildType;
-    *(hsUint32*)(connectHeader + 11) = fBranchId;
+    *(hsUint32*)(connectHeader +  7) = LESWAP32(fBuildType);
+    *(hsUint32*)(connectHeader + 11) = LESWAP32(fBranchId);
     fProductId.write(connectHeader + 15);
     /* Begin FileConnectHeader */
-    *(hsUint32*)(connectHeader + 31) = 12;
+    *(hsUint32*)(connectHeader + 31) = LESWAP32(12);
     *(hsUint32*)(connectHeader + 35) = 0;
     *(hsUint32*)(connectHeader + 39) = 0;
     fSock->send(connectHeader, 43);
@@ -269,9 +271,9 @@
 void pnFileClient::sendPingRequest(hsUint32 pingTimeMs)
 {
     hsUbyte msgbuf[12];
-    *(hsUint32*)(msgbuf    ) = 12;                      // Msg size
-    *(hsUint32*)(msgbuf + 4) = kCli2File_PingRequest;   // Msg ID
-    *(hsUint32*)(msgbuf + 8) = pingTimeMs;              // Ping time
+    *(hsUint32*)(msgbuf    ) = LESWAP32(12);                    // Msg size
+    *(hsUint32*)(msgbuf + 4) = LESWAP32(kCli2File_PingRequest); // Msg ID
+    *(hsUint32*)(msgbuf + 8) = LESWAP32(pingTimeMs);            // Ping time
     fSock->send(msgbuf, 12);
 }
 
@@ -279,9 +281,9 @@
 {
     hsUint32 transId = nextTransId();
     hsUbyte msgbuf[12];
-    *(hsUint32*)(msgbuf    ) = 12;                          // Msg size
-    *(hsUint32*)(msgbuf + 4) = kCli2File_BuildIdRequest;    // Msg ID
-    *(hsUint32*)(msgbuf + 8) = transId;                     // Trans ID
+    *(hsUint32*)(msgbuf    ) = LESWAP32(12);                        // Msg size
+    *(hsUint32*)(msgbuf + 4) = LESWAP32(kCli2File_BuildIdRequest);  // Msg ID
+    *(hsUint32*)(msgbuf + 8) = LESWAP32(transId);                   // Trans ID
     fSock->send(msgbuf, 12);
     return transId;
 }
@@ -293,12 +295,12 @@
 
     hsUint32 transId = nextTransId();
     hsUbyte msgbuf[536];
-    *(hsUint32*)(msgbuf    ) = 536;                         // Msg size
-    *(hsUint32*)(msgbuf + 4) = kCli2File_ManifestRequest;   // Msg ID
-    *(hsUint32*)(msgbuf + 8) = transId;                     // Trans ID
+    *(hsUint32*)(msgbuf    ) = LESWAP32(536);                       // Msg size
+    *(hsUint32*)(msgbuf + 4) = LESWAP32(kCli2File_ManifestRequest); // Msg ID
+    *(hsUint32*)(msgbuf + 8) = LESWAP32(transId);                   // Trans ID
     memcpy(msgbuf + 12, wgroup.data(), (len >= 260 ? 259 : len) * sizeof(pl_wchar_t));
-    *(pl_wchar_t*)(msgbuf + 530) = 0;                       // Nul terminator
-    *(hsUint32*)(msgbuf + 532) = buildId;                   // Build ID
+    *(pl_wchar_t*)(msgbuf + 530) = 0;                               // Nul terminator
+    *(hsUint32*)(msgbuf + 532) = LESWAP32(buildId);                 // Build ID
     fSock->send(msgbuf, 536);
     return transId;
 }
@@ -310,12 +312,12 @@
 
     hsUint32 transId = nextTransId();
     hsUbyte msgbuf[536];
-    *(hsUint32*)(msgbuf    ) = 536;                             // Msg size
-    *(hsUint32*)(msgbuf + 4) = kCli2File_FileDownloadRequest;   // Msg ID
-    *(hsUint32*)(msgbuf + 8) = transId;                         // Trans ID
+    *(hsUint32*)(msgbuf    ) = LESWAP32(536);                           // Msg size
+    *(hsUint32*)(msgbuf + 4) = LESWAP32(kCli2File_FileDownloadRequest); // Msg ID
+    *(hsUint32*)(msgbuf + 8) = LESWAP32(transId);                       // Trans ID
     memcpy(msgbuf + 12, wfilename.data(), (len >= 260 ? 259 : len) * sizeof(pl_wchar_t));
-    *(pl_wchar_t*)(msgbuf + 530) = 0;                           // Nul terminator
-    *(hsUint32*)(msgbuf + 532) = buildId;                       // Build ID
+    *(pl_wchar_t*)(msgbuf + 530) = 0;                                   // Nul terminator
+    *(hsUint32*)(msgbuf + 532) = LESWAP32(buildId);                     // Build ID
     fSock->send(msgbuf, 536);
     return transId;
 }
@@ -323,20 +325,20 @@
 void pnFileClient::sendManifestEntryAck(hsUint32 transId, hsUint32 readerId)
 {
     hsUbyte msgbuf[16];
-    *(hsUint32*)(msgbuf     ) = 16;                         // Msg size
-    *(hsUint32*)(msgbuf +  4) = kCli2File_ManifestEntryAck; // Msg ID
-    *(hsUint32*)(msgbuf +  8) = transId;                    // Trans ID
-    *(hsUint32*)(msgbuf + 12) = readerId;                   // Reader ID
+    *(hsUint32*)(msgbuf     ) = LESWAP32(16);                           // Msg size
+    *(hsUint32*)(msgbuf +  4) = LESWAP32(kCli2File_ManifestEntryAck);   // Msg ID
+    *(hsUint32*)(msgbuf +  8) = LESWAP32(transId);                      // Trans ID
+    *(hsUint32*)(msgbuf + 12) = LESWAP32(readerId);                     // Reader ID
     fSock->send(msgbuf, 16);
 }
 
 void pnFileClient::sendFileDownloadChunkAck(hsUint32 transId, hsUint32 readerId)
 {
     hsUbyte msgbuf[16];
-    *(hsUint32*)(msgbuf     ) = 16;                             // Msg size
-    *(hsUint32*)(msgbuf +  4) = kCli2File_FileDownloadChunkAck; // Msg ID
-    *(hsUint32*)(msgbuf +  8) = transId;                        // Trans ID
-    *(hsUint32*)(msgbuf + 12) = readerId;                       // Reader ID
+    *(hsUint32*)(msgbuf     ) = LESWAP32(16);                               // Msg size
+    *(hsUint32*)(msgbuf +  4) = LESWAP32(kCli2File_FileDownloadChunkAck);   // Msg ID
+    *(hsUint32*)(msgbuf +  8) = LESWAP32(transId);                          // Trans ID
+    *(hsUint32*)(msgbuf + 12) = LESWAP32(readerId);                         // Reader ID
     fSock->send(msgbuf, 16);
 }
 
--- net/game/pnGameClient.cpp.orig	Thu Nov 11 11:14:21 2010 -0800
+++ net/game/pnGameClient.cpp	Thu Nov 18 15:52:46 2010 -0600
@@ -35,6 +35,7 @@
     hsUint16 msgId;
 
     sock->recv(&msgId, sizeof(hsUint16));
+    msgId = LESWAP16(msgId);
     const pnNetMsg* msgDesc = GET_Game2Cli(msgId);
     if (msgDesc == NULL) {
         plDebug::Error("Got invalid message ID (%u)", msgId);
@@ -153,13 +154,13 @@
     hsUbyte connectHeader[67];  // ConnectHeader + GameConnectHeader
     /* Begin ConnectHeader */
     *(hsUbyte* )(connectHeader     ) = kConnTypeCliToGame;
-    *(hsUint16*)(connectHeader +  1) = 31;
-    *(hsUint32*)(connectHeader +  3) = fBuildId;
-    *(hsUint32*)(connectHeader +  7) = fBuildType;
-    *(hsUint32*)(connectHeader + 11) = fBranchId;
+    *(hsUint16*)(connectHeader +  1) = LESWAP16(31);
+    *(hsUint32*)(connectHeader +  3) = LESWAP32(fBuildId);
+    *(hsUint32*)(connectHeader +  7) = LESWAP32(fBuildType);
+    *(hsUint32*)(connectHeader + 11) = LESWAP32(fBranchId);
     fProductId.write(connectHeader + 15);
     /* Begin GameConnectHeader */
-    *(hsUint32*)(connectHeader + 31) = 36;
+    *(hsUint32*)(connectHeader + 31) = LESWAP32(36);
     fAccountId.write(connectHeader + 35);
     fAgeId.write(connectHeader + 51);
     fSock->send(connectHeader, 67);
@@ -208,6 +209,7 @@
     } else if (msg == kNetCliSrv2CliError) {
         hsUint32 errorCode;
         fSock->recv(&errorCode, sizeof(hsUint32));
+        errorCode = LESWAP32(errorCode);
         delete fSock;
         fSock = NULL;
         plDebug::Error("Error connecting to Game server: %s",
--- net/gate/pnGateKeeperClient.cpp.orig	Thu Nov 11 11:14:21 2010 -0800
+++ net/gate/pnGateKeeperClient.cpp	Thu Nov 18 15:52:46 2010 -0600
@@ -33,6 +33,7 @@
 {
     hsUint16 msgId;
     sock->recv(&msgId, sizeof(hsUint16));
+    msgId = LESWAP16(msgId);
     const pnNetMsg* msgDesc = GET_GateKeeper2Cli(msgId);
     if (msgDesc == NULL) {
         plDebug::Error("Got invalid message ID (%u)", msgId);
@@ -121,13 +122,13 @@
     hsUbyte connectHeader[51];  // ConnectHeader + GateKeeperConnectHeader
     /* Begin ConnectHeader */
     *(hsUbyte* )(connectHeader     ) = kConnTypeCliToGateKeeper;
-    *(hsUint16*)(connectHeader +  1) = 31;
-    *(hsUint32*)(connectHeader +  3) = fBuildId;
-    *(hsUint32*)(connectHeader +  7) = fBuildType;
-    *(hsUint32*)(connectHeader + 11) = fBranchId;
+    *(hsUint16*)(connectHeader +  1) = LESWAP16(31);
+    *(hsUint32*)(connectHeader +  3) = LESWAP32(fBuildId);
+    *(hsUint32*)(connectHeader +  7) = LESWAP32(fBuildType);
+    *(hsUint32*)(connectHeader + 11) = LESWAP32(fBranchId);
     fProductId.write(connectHeader + 15);
     /* Begin GateKeeperConnectHeader */
-    *(hsUint32*)(connectHeader + 31) = 20;
+    *(hsUint32*)(connectHeader + 31) = LESWAP32(20);
     memset(connectHeader + 35, 0, 16);
     fSock->send(connectHeader, 51);
 
@@ -175,6 +176,7 @@
     } else if (msg == kNetCliSrv2CliError) {
         hsUint32 errorCode;
         fSock->recv(&errorCode, sizeof(hsUint32));
+        errorCode = LESWAP32(errorCode);
         delete fSock;
         fSock = NULL;
         plDebug::Error("Error connecting to GateKeeper server: %s",
