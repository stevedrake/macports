--- TcpSocket.cpp.orig
+++ TcpSocket.cpp
@@ -1234,14 +1234,14 @@ void TcpSocket::InitSSLServer()
 }
 
 
-void TcpSocket::InitializeContext(const std::string& context, SSL_METHOD *meth_in)
+void TcpSocket::InitializeContext(const std::string& context, const SSL_METHOD *meth_in)
 {
 	static Mutex mutex;
 	Lock lock(mutex);
 	/* Create our context*/
 	if (m_client_contexts.find(context) == m_client_contexts.end())
 	{
-		SSL_METHOD *meth = meth_in ? meth_in : SSLv3_method();
+		const SSL_METHOD *meth = meth_in ? meth_in : SSLv3_method();
 		m_ssl_ctx = m_client_contexts[context] = SSL_CTX_new(meth);
 		SSL_CTX_set_mode(m_ssl_ctx, SSL_MODE_AUTO_RETRY);
 	}
@@ -1258,7 +1258,7 @@ void TcpSocket::InitializeContext(const std::string& context,const std::string&
 	/* Create our context*/
 	if (m_server_contexts.find(context) == m_server_contexts.end())
 	{
-		SSL_METHOD *meth = meth_in ? meth_in : SSLv3_method();
+		const SSL_METHOD *meth = meth_in ? meth_in : SSLv3_method();
 		m_ssl_ctx = m_server_contexts[context] = SSL_CTX_new(meth);
 		SSL_CTX_set_mode(m_ssl_ctx, SSL_MODE_AUTO_RETRY);
 		// session id
@@ -1294,7 +1294,7 @@ void TcpSocket::InitializeContext(const std::string& context,const std::string&
 	/* Create our context*/
 	if (m_server_contexts.find(context) == m_server_contexts.end())
 	{
-		SSL_METHOD *meth = meth_in ? meth_in : SSLv3_method();
+		const SSL_METHOD *meth = meth_in ? meth_in : SSLv3_method();
 		m_ssl_ctx = m_server_contexts[context] = SSL_CTX_new(meth);
 		SSL_CTX_set_mode(m_ssl_ctx, SSL_MODE_AUTO_RETRY);
 		// session id
--- TcpSocket.h.orig
+++ TcpSocket.h
@@ -271,7 +271,7 @@ protected:
 #ifdef HAVE_OPENSSL
 	/** SSL; Initialize ssl context for a client socket. 
 		\param meth_in SSL method */
-	void InitializeContext(const std::string& context, SSL_METHOD *meth_in = NULL);
+	void InitializeContext(const std::string& context, const SSL_METHOD *meth_in = NULL);
 	/** SSL; Initialize ssl context for a server socket. 
 		\param keyfile Combined private key/certificate file 
 		\param password Password for private key 
