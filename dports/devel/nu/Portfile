# $Id$

PortSystem 1.0

name                nu
version             0.2.0
revision            1
categories          devel
maintainers         eridius
description         Nu is an interpreted object-oriented lisp-like language written in Objective-C.
long_description    \
    Nu is an interpreted object-oriented language. \
    It uses a Lisp-style grammar, but is semantically closer to Ruby than to Lisp. \
    Nu is written in Objective-C and is designed to take full advantange of \
    the Objective-C runtime and the many mature class libraries written in Objective-C. \
    Nu code can fully interoperate with code written in Objective-C\; \
    messages can be sent to and from objects with no concern for whether those messages \
    are implemented in Objective-C or Nu.
homepage            http://programming.nu/
platforms           darwin
master_sites        http://programming.nu/releases/
extract.suffix      .tgz

checksums           md5 2d99de5b3ec7a019e505e854b7e10338 \
                    sha1 e88c071cc8e0df7dd9f97a01d012e6d4e06e97cb

patchfiles          patch-Rakefile patch-Nukefile patch-Nukefile-single-arch patch-libffi-single-arch

depends_build       port:pcre bin:rake:rb-rake

use_configure       no
test.run            yes
test.cmd            nuke

livecheck.check     regex
livecheck.url       http://programming.nu/downloads
livecheck.regex     {Nu-([\d.]+).tgz}

platform darwin 8 {
    # set up the variant for pre-build
}

variant universal {
    patchfiles-delete patch-Nukefile-single-arch patch-libffi-single-arch
}

post-patch {
    reinplace s|@@PREFIX@@|$prefix|g ${worksrcpath}/Rakefile
    
    # fix the tools
    foreach tool [list enu nubile nudoc nuke nutest] {
        reinplace s|/usr/local|$prefix| ${worksrcpath}/tools/$tool
    }
    
    # fix the examples
    reinplace s|/usr/local|$prefix| ${worksrcpath}/examples/NuAnywhere/nu-anywhere
}

pre-build {
    if {[variant_isset darwin_8]} {
        ui_info "$UI_PREFIX Building libffi"
        system "cd ${worksrcpath}/libffi && rake"
    }
}

build {
    system "cd ${worksrcpath} && rake"
    system "cd ${worksrcpath} && PREFIX=${prefix} ./mininush tools/nuke"
}

pre-destroot {
    file mkdir ${destroot}/Library/Frameworks
}

destroot.cmd        "./mininush tools/nuke"
destroot.destdir    ""
destroot.env-append PREFIX=${prefix}
destroot.env-append DESTDIR=${destroot}
