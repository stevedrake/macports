# $Id$

PortSystem 1.0

name                nu
version             0.1.1
categories          devel
maintainers         eridius
description         Nu is an interpreted object-oriented language written in Objective-C.
long_description    \
    Nu is an interpreted object-oriented language. \
    It uses a Lisp-style grammar, but is semantically closer to Ruby than to Lisp. \
    Nu is written in Objective-C and is designed to take full advantange of \
    the Objective-C runtime and the many mature class libraries written in Objective-C. \
    Nu code can fully interoperate with code written in Objective-C\; \
    messages can be sent to and from objects with no concern for whether those messages \
    are implemented in Objective-C or Nu.
homepage            http://programming.nu/
platforms           darwin
master_sites        http://programming.nu/releases/
extract.suffix      .tgz

checksums           md5 8492dc39806073b99b0af3b0b300a8ac \
                    sha1 eadd5e7b16f980d53fb4f67a167a2f1028c73896

patchfiles          patch-Rakefile patch-Nukefile patch-libffi-Rakefile

depends_lib         port:pcre
depends_build       bin:rake:rb-rake

use_configure       no
universal_variant   no
test.run            yes
test.cmd            nuke

platform darwin 8 {
    # set up the variant for pre-build
}

post-patch {
    # fix prefixes
    foreach file [list Rakefile Nukefile] {
        reinplace s|@@PREFIX@@|$prefix|g ${worksrcpath}/$file
        reinplace s|@@DESTROOT@@|$destroot|g ${worksrcpath}/$file
    }
    
    # we're only interested in building one architecture right now
    if {${os.arch} == "powerpc"} {
        set arch "ppc"
    } else {
        set arch ${os.arch}
    }
    reinplace s|@@ARCH@@|"$arch"|g ${worksrcpath}/Nukefile
    
    # fix the shebangs of the tools
    foreach tool [list enu nubile nudoc nuke nutest] {
        reinplace s|#!/usr/local|#!$prefix| ${worksrcpath}/tools/$tool
    }
}

pre-build {
    if {[variant_isset darwin_8]} {
        ui_info "$UI_PREFIX Building libffi"
        system "cd ${worksrcpath}/libffi && rake"
    }
}

build {
    system "cd ${worksrcpath} && rake"
    system "cd ${worksrcpath} && ./mininush tools/nuke"
}

pre-destroot {
    file mkdir ${destroot}/Library/Frameworks
}

destroot.cmd        "./mininush tools/nuke"
destroot.destdir    ""
