# $Id$

PortSystem      1.0

name            poco
version         1.3.2
categories      devel
maintainers     nox
platforms       darwin
description     POCO C++ Libraries

long_description \
    POCO aims to be for network-centric, cross-platform C++ software development \
    what Apple's Cocoa is for Mac development, or Ruby on Rails is for Web \
    development -- a powerful, yet easy to use platform to build your applications upon.

homepage        http://pocoproject.org/
master_sites    sourceforge
use_bzip2       yes
set my_distname ${distname}

checksums       poco-1.3.2.tar.bz2 \
                    md5     ba0a8e58522a01e77981ea2b42d369a6 \
                    sha1    ec1eb28ceda24bca524c485a73da92e2ac78df0e \
                    rmd160  ba6cb689c05f9c718f6381918183a7f72da85d4c \
                poco-1.3.2-data.tar.bz2 \
                    md5     110f8daf889b915f50e78ca0f8edd800 \
                    sha1    b8d884beab455b63c9edc0c60bf4c11b504ccf7a \
                    rmd160  73112ddd532b093bd55bb611759ce96c39395e52 \
                poco-1.3.2-doc.tar.gz \
                    md5     a92ccd7038573064515a9f2f3b0f8562 \
                    sha1    cbf72f9cfbb624f28978f3d752cba7d4dc471ce6 \
                    rmd160  813f8b0ce8cb18269c5fcbf1c577375bca7db0c4

if {[variant_isset universal]} {
    patchfiles-append   patch-rules-deps-universal.diff
}

set config      Darwin

pre-configure {
    reinplace -E "/^C(XX)?FLAGS +=/s|\$| ${configure.cppflags} ${configure.cflags}|" \
        ${worksrcpath}/build/config/${config}
    reinplace -E "/^((SH|DY)LIB|LINKFLAGS) +=/s|\$| ${configure.ldflags}|" \
        ${worksrcpath}/build/config/${config}
}

configure.args  --no-samples

use_parallel_build  yes

build.target    poco

test.run        yes

test {
    proc luniq {list} {
        set x() {}; unset x
        foreach {item} ${list} {
            set x(${item}) ""
        }
        return [array names x]
    }

    set file [open ${worksrcpath}/components]

    set components {}
    while {[gets ${file} component] != -1} {
        lappend components ${component}
    }

    close ${file}

    foreach {component} [luniq ${components}] {
        foreach {testrunner} [glob -nocomplain ${worksrcpath}/${component}/testsuite/bin/*/*/testrunner{,d}] {
            catch {system "${testrunner} -all -print"}
        }
    }
}

set docdir      ${prefix}/share/doc/${name}-${version}

post-destroot {
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} CHANGELOG CONTRIBUTORS LICENSE NEWS README VERSION \
        ${destroot}${docdir}

    if {![variant_isset doc]} {
        xinstall -d ${destroot}${docdir}/html
        xinstall -m 0644 -W ${worksrcpath}/doc Acknowledgements.html ${destroot}${docdir}/html
    }

    set libdir ${prefix}/lib

    foreach {dylib} [glob -types f -tails -directory ${destroot}${libdir} *.dylib] {
        system "install_name_tool -id ${libdir}/${dylib} ${destroot}${libdir}/${dylib}"

        set otool [lrange [split [exec otool -L ${destroot}${libdir}/${dylib}] \n] 2 end]

        foreach {otoolentry} ${otool} {
            set lib [lindex ${otoolentry} 0]

            if {! [string match ${worksrcpath}/* ${lib}]} {
                continue
            }

            system "install_name_tool -change ${lib} ${libdir}/[file tail ${lib}] \
                ${destroot}${libdir}/${dylib}"
        }
    }
}

variant ssl description {Build NetSSL library} {
    distname                ${my_distname}-ssl
    depends_lib-append      port:openssl
}

variant data description {Build Data library} {
    distname                ${my_distname}-data
    depends_lib-append      lib:libiodbc:unixODBC

    post-patch {
        if {! [variant_isset ssl]} {
            reinplace -E {/^(COMPONENTS|\.PHONY|libexecs|tests|samples)/s/NetSSL_OpenSSL[^ ]*//} \
                ${worksrcpath}/Makefile
            reinplace {/NETSSL_OpenSSL/d} ${worksrcpath}/components
        }
    }
}

variant doc description {Install extra documentation} {
    extract.only            ${distfiles}
    distfiles-append        ${my_distname}-doc.tar.gz

    post-extract {
        system "tar xzf ${distpath}/${my_distname}-doc.tar.gz -C ${workpath}"
    }

    post-destroot {
        set workdocpath ${workpath}/${my_distname}-doc

        xinstall -d ${destroot}${docdir}/html/CppUnit
        eval xinstall -m 0644 [glob ${workdocpath}/*.html] ${destroot}${docdir}/html
        eval xinstall -m 0644 [glob ${worksrcpath}/CppUnit/doc/*] ${destroot}${docdir}/html/CppUnit

        foreach {dir} {images css} {
            xinstall -d ${destroot}${docdir}/html/${dir}
            eval xinstall -m 0644 [glob ${workdocpath}/${dir}/*] ${destroot}${docdir}/html/${dir}
        }
    }
}

platform darwin 7 {
    set config              Darwin7
    configure.args-append   --config=${config}
}

livecheck.regex "<title>sources ${name}-(.*) released.*</title>"
