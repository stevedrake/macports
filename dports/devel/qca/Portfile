# -*- coding: utf-8; mode: tcl; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 4; truncate-lines: t -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4
# $Id$

PortSystem          1.0
name                qca
version             2.0.2
revision            5
set branch          [join [lrange [split ${version} .] 0 1] .]
categories          devel crypto security
maintainers         michaelld openmaintainer
license             LGPLv2.1
description         Qt Cryptographic Architecture
long_description \
    Qt Cryptographic Architecture provides an easy API for the following \
    features: SSL/TLS, X509, SASL, RSA, Hashing (SHA1, MD5), Ciphers \
    (BlowFish, 3DES, AES).  Functionality is supplied via plugins.

platforms            darwin

homepage             http://delta.affinix.com/qca/
master_sites         http://delta.affinix.com/download/qca/${branch}/
use_bzip2            yes

checksums            md5     27ebdfbd9869d90dae078a6decd029f4 \
                     sha1    5a414c3296cd37d1ec34182be0d089c5073f55a8 \
                     rmd160  18b0f497709f9700227644977946735d2ec3c623

depends_build        port:pkgconfig
depends_lib          port:qt4-mac

# (1) correct pkgconfig file for framework install, if selected.
# (2) allow for 'debug' and 'framework' options at the same time.
#     This change is needed to allow for +debug [+framework] --
#     disallow just debug framework via no variants for it.
# (3) allow simple replacement for universal arch arguments, if that
#     variant is requested.
patchfiles           patch-configure.diff

set qt_dir           ${prefix}/libexec/qt4-mac
set qca_dir          ${prefix}/libexec/qt4-mac

# set QT4 plugins to install into the QT4 directory
configure.pre_args   --prefix=${qca_dir}

# defaults: release only, framework, specific build_arch.
# use variants to change these
configure.args        --verbose         \
                      --qtdir=${qt_dir} \
                      --release         \
                      --framework

destroot.destdir      INSTALL_ROOT="${destroot}"

post-destroot {
    # alias to destroot QCA top-level directory
    set destroot_qca ${destroot}${qca_dir}

    # tweak header install for framework only
    if {![variant_isset no_framework]} {
        # when installed as a framework, link headers from
        # the framework into ${destroot_qca}/include
        xinstall -d 755 ${destroot_qca}/include
        ln -s ${qca_dir}/lib/qca.framework/Headers \
            ${destroot_qca}/include/QtCrypto
    }

    # install docs
    xinstall -d 755 ${destroot_qca}/share/doc/${name}
    xinstall -m 644 -W ${worksrcpath} COPYING README TODO \
        ${destroot_qca}/share/doc/${name}

    # install cmake file (taken from port 'kdelibs4'). To use this
    # file, include '-DCMAKE_MODULE_PATH=...' in configure.args during
    # the initial 'configure' stage (which uses CMake), to the full
    # path of where the CMake files are installed.
    xinstall -d 755 ${destroot_qca}/share/cmake/modules
    xinstall -m 644 -W ${filespath} FindQCA2.cmake \
        ${destroot_qca}/share/cmake/modules
}

variant no_framework description \
{Build as a library, not framework} {
    configure.args-delete --framework
    configure.args-append --no-framework
}

variant debug description \
{Build both release and debug library / framework} {
    configure.args-delete --release
    configure.args-append --debug-and-release
}

variant examples description \
{Include examples in install} {
    post-destroot {
        xinstall -d 755 ${destroot}${qca_dir}/share/examples/${name}
        eval file copy [glob ${worksrcpath}/examples/*] \
            ${destroot}${qca_dir}/share/examples/${name}
    }
}

post-patch {
    if {[variant_exists universal] && [variant_isset universal]} {
        # set universal arch types, depending on what the user has specified
        array set macports_to_qt_build_arch {
            ppc     ppc
            i386    x86
            ppc64   ppc64
            x86_64  x86_64
        }
        set qca_arch_types ""
        set qca_qt_config_str ""
        foreach arch ${universal_archs} {
            set this_arch_in_qt $macports_to_qt_build_arch($arch)
            lappend qca_arch_types ${this_arch_in_qt}
            lappend qca_qt_config_strs "contains(QT_CONFIG,${this_arch_in_qt})"
        }
        set qca_arch_types_str [join ${qca_arch_types} " "]
        set qca_qt_config_str [join ${qca_qt_config_strs} ":"]
        reinplace "s/@UNIVERSAL_CONTAINS@/${qca_qt_config_str}/g" \
            ${worksrcpath}/configure
        reinplace "s/@UNIVERSAL_TYPES@/${qca_arch_types_str}/g" \
            ${worksrcpath}/configure
    }
}

platform darwin 8 {
    # might not be necessary
    if {[variant_exists universal] && [variant_isset universal]} {
        configure.args-append --mac-sdk=${developer_dir}/SDKs/MacOSX10.4u.sdk
    }
}

# QCA's configure does not handle this flag,
# but does not generate an error either.
configure.universal_args-delete --disable-dependency-tracking
configure.args-delete  --disable-dependency-tracking

variant universal {
    # Add the universal flag understood by qmake
    configure.universal_args-append --universal
}

livecheck.type  regex
livecheck.url   ${homepage}
livecheck.regex "${name}-(\\d+(?:\\.\\d+)*)${extract.suffix}"
