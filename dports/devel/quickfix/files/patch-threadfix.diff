--- src/C++/Acceptor.h.orig	2006-08-25 13:45:57.000000000 -0600
+++ src/C++/Acceptor.h	2009-12-01 23:44:00.000000000 -0700
@@ -110,7 +110,7 @@
   typedef std::set < SessionID > SessionIDs;
   typedef std::map < SessionID, Session* > Sessions;
 
-  unsigned m_threadid;
+  pthread_t m_threadid;
   Sessions m_sessions;
   SessionIDs m_sessionIDs;
   Application& m_application;
--- src/C++/HttpServer.h.orig	2006-08-09 16:13:09.000000000 -0600
+++ src/C++/HttpServer.h	2009-12-01 23:44:23.000000000 -0700
@@ -64,7 +64,7 @@
 
   SocketServer* m_pServer;
   SessionSettings m_settings;
-  unsigned m_threadid;
+  pthread_t m_threadid;
   int m_port;
   bool m_stop;
 
--- src/C++/Initiator.h.orig	2006-08-25 13:45:57.000000000 -0600
+++ src/C++/Initiator.h	2009-12-01 23:44:43.000000000 -0700
@@ -133,7 +133,7 @@
   SessionIDs m_disconnected;
   SessionState m_sessionState;
 
-  unsigned m_threadid;
+  pthread_t m_threadid;
   Application& m_application;
   MessageStoreFactory& m_messageStoreFactory;
   SessionSettings m_settings;
--- src/C++/ThreadedSocketAcceptor.cpp.orig	2006-09-13 14:47:22.000000000 -0600
+++ src/C++/ThreadedSocketAcceptor.cpp	2009-12-01 23:46:08.000000000 -0700
@@ -126,7 +126,7 @@
     Locker l( m_mutex );
     int port = m_socketToPort[*i];
     AcceptorThreadInfo* info = new AcceptorThreadInfo( this, *i, port );
-    unsigned thread;
+    pthread_t thread;
     thread_spawn( &socketAcceptorThread, info, thread );
     addThread( *i, thread );
   }
@@ -170,7 +170,7 @@
   QF_STACK_POP
 }
 
-void ThreadedSocketAcceptor::addThread( int s, int t )
+void ThreadedSocketAcceptor::addThread( int s, pthread_t t )
 { QF_STACK_PUSH(ThreadedSocketAcceptor::addThread)
 
   Locker l(m_mutex);
@@ -228,7 +228,7 @@
       stream << "Accepted connection from " << socket_peername( socket ) << " on port " << port;
       pAcceptor->onEvent( stream.str() );
 
-      unsigned thread;
+      pthread_t thread;
       if ( !thread_spawn( &socketConnectionThread, info, thread ) )
         delete info;
       pAcceptor->addThread( socket, thread );
--- src/C++/ThreadedSocketAcceptor.h.orig	2006-04-27 08:45:34.000000000 -0600
+++ src/C++/ThreadedSocketAcceptor.h	2009-12-01 23:54:10.000000000 -0700
@@ -72,7 +72,7 @@
   typedef std::set < SessionID > Sessions;
   typedef std::map < int, Sessions > PortToSessions;
   typedef std::map < int, int > SocketToPort;
-  typedef std::map < int, int > SocketToThread;
+  typedef std::map < int, pthread_t > SocketToThread;
 
   void onConfigure( const SessionSettings& ) throw ( ConfigError );
   void onInitialize( const SessionSettings& ) throw ( RuntimeError );
@@ -81,7 +81,7 @@
   bool onPoll();
   void onStop();
 
-  void addThread( int s, int t );
+  void addThread( int s, pthread_t t );
   void removeThread( int s );
   static THREAD_PROC socketAcceptorThread( void* p );
   static THREAD_PROC socketConnectionThread( void* p );
--- src/C++/ThreadedSocketInitiator.cpp.orig	2006-09-13 14:47:22.000000000 -0600
+++ src/C++/ThreadedSocketInitiator.cpp	2009-12-01 23:55:30.000000000 -0700
@@ -162,7 +162,7 @@
 
     {
       Locker l( m_mutex );
-      unsigned thread;
+      pthread_t thread;
       if ( !thread_spawn( &socketThread, pair, thread ) )
         delete pair;
       addThread( socket, thread );
@@ -174,7 +174,7 @@
   QF_STACK_POP
 }
 
-void ThreadedSocketInitiator::addThread( int s, int t )
+void ThreadedSocketInitiator::addThread( int s, pthread_t t )
 { QF_STACK_PUSH(ThreadedSocketInitiator::addThread)
 
   Locker l(m_mutex);
--- src/C++/ThreadedSocketInitiator.h.orig	2006-01-26 11:33:35.000000000 -0700
+++ src/C++/ThreadedSocketInitiator.h	2009-12-01 23:56:12.000000000 -0700
@@ -48,7 +48,7 @@
   virtual ~ThreadedSocketInitiator();
 
 private:
-  typedef std::map < int, int > SocketToThread;
+  typedef std::map < int, pthread_t > SocketToThread;
   typedef std::map < SessionID, int > SessionToHostNum;
   typedef std::pair < ThreadedSocketInitiator*, ThreadedSocketConnection* > ThreadPair;
 
@@ -61,7 +61,7 @@
 
   bool doConnect( const SessionID& s, const Dictionary& d );
 
-  void addThread( int s, int t );
+  void addThread( int s, pthread_t t );
   void removeThread( int s );
   static THREAD_PROC socketThread( void* p );
 
--- src/C++/Utility.h.orig	2006-09-13 17:23:18.000000000 -0600
+++ src/C++/Utility.h	2009-12-02 00:03:14.000000000 -0700
@@ -136,11 +136,11 @@
 #define THREAD_PROC void *
 #endif
 
-bool thread_spawn( THREAD_START_ROUTINE func, void* var, unsigned& thread );
+bool thread_spawn( THREAD_START_ROUTINE func, void* var, pthread_t& thread );
 bool thread_spawn( THREAD_START_ROUTINE func, void* var );
-void thread_join( unsigned thread );
-void thread_detach( unsigned thread );
-unsigned thread_self();
+void thread_join( pthread_t thread );
+void thread_detach( pthread_t thread );
+pthread_t thread_self();
 
 void process_sleep( double s );
 
--- src/C++/Utility.cpp.orig	2006-08-23 16:32:42.000000000 -0600
+++ src/C++/Utility.cpp	2009-12-02 00:03:03.000000000 -0700
@@ -442,7 +442,7 @@
   QF_STACK_POP
 }
 
-bool thread_spawn( THREAD_START_ROUTINE func, void* var, unsigned& thread )
+bool thread_spawn( THREAD_START_ROUTINE func, void* var, pthread_t& thread )
 {
 #ifdef _MSC_VER
   unsigned int result = 0;
@@ -453,47 +453,46 @@
   pthread_t result = 0;
   if( pthread_create( &result, 0, func, var ) != 0 ) return false;
 #endif
-  thread = (unsigned)result;
+  thread = result;
   return true;
 }
 
 bool thread_spawn( THREAD_START_ROUTINE func, void* var )
-{ unsigned thread = 0;
+{ pthread_t thread = 0;
   return thread_spawn( func, var, thread );
 }
 
-void thread_join( unsigned thread )
+void thread_join( pthread_t thread )
 { QF_STACK_PUSH(thread_join)
 
 #ifdef _MSC_VER
   WaitForSingleObject( ( void* ) thread, INFINITE );
   CloseHandle((HANDLE)thread);
 #else
-  pthread_join( ( pthread_t ) thread, 0 );
+  pthread_join( thread, 0 );
 #endif
 
   QF_STACK_POP
 }
 
-void thread_detach( unsigned thread )
+void thread_detach( pthread_t thread )
 { QF_STACK_PUSH(thread_detach)
 
 #ifdef _MSC_VER
   CloseHandle((HANDLE)thread);
 #else
-  pthread_t t = (pthread_t)thread;
-  pthread_detach( t );
+  pthread_detach( thread );
 #endif
 
   QF_STACK_POP
 }
 
-unsigned thread_self()
+pthread_t thread_self()
 {
 #ifdef _MSC_VER
   return ( unsigned ) GetCurrentThread();
 #else
-  return ( unsigned ) pthread_self();
+  return pthread_self();
 #endif
 }
 
--- src/C++/CallStack.h.orig	2006-07-09 18:12:46.000000000 -0600
+++ src/C++/CallStack.h	2009-12-02 00:08:00.000000000 -0700
@@ -105,8 +105,8 @@
   static Context& getContext();
   static Context& getErrorContext();
 
-  static std::map<unsigned, Context> s_stack;
-  static std::map<unsigned, Context> s_error;
+  static std::map<pthread_t, Context> s_stack;
+  static std::map<pthread_t, Context> s_error;
   static Mutex s_mutex;
 };
 
--- src/C++/CallStack.cpp.orig	2006-01-26 11:33:35.000000000 -0700
+++ src/C++/CallStack.cpp	2009-12-02 00:10:59.000000000 -0700
@@ -29,8 +29,8 @@
 
 namespace FIX
 {
-  std::map<unsigned, CallStack::Context> CallStack::s_stack;
-  std::map<unsigned, CallStack::Context> CallStack::s_error;
+  std::map<pthread_t, CallStack::Context> CallStack::s_stack;
+  std::map<pthread_t, CallStack::Context> CallStack::s_error;
   Mutex CallStack::s_mutex;
   int CallStack::Ignore::s_count = 0;
 
@@ -63,7 +63,7 @@
   void CallStack::output()
   {
     Locker locker(s_mutex);
-    std::map<unsigned, CallStack::Context>::iterator i;
+    std::map<pthread_t, CallStack::Context>::iterator i;
     for( i = s_error.begin(); i != s_error.end(); ++i )
     {
       Context& c = i->second;
