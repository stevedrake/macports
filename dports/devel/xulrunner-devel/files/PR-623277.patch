--- js/src/jsdbgapi.cpp	
+++ js/src/jsdbgapi.cpp	
@@ -111,37 +111,37 @@ IsScriptLive(JSContext *cx, JSScript *sc
 #endif
 
 JS_PUBLIC_API(void)
 JS_SetRuntimeDebugMode(JSRuntime *rt, JSBool debug)
 {
     rt->debugMode = debug;
 }
 
+#ifdef JS_METHODJIT
 static void
 PurgeCallICs(JSContext *cx, JSScript *start)
 {
-#ifdef JS_METHODJIT
     for (JSScript *script = start;
          &script->links != &cx->compartment->scripts;
          script = (JSScript *)script->links.next)
     {
         // Debug mode does not use call ICs.
         if (script->debugMode)
             continue;
 
         JS_ASSERT(!IsScriptLive(cx, script));
 
         if (script->jitNormal)
             script->jitNormal->nukeScriptDependentICs();
         if (script->jitCtor)
             script->jitCtor->nukeScriptDependentICs();
     }
+}
 #endif
-}
 
 JS_FRIEND_API(JSBool)
 js_SetDebugMode(JSContext *cx, JSBool debug)
 {
     cx->compartment->debugMode = debug;
 #ifdef JS_METHODJIT
     for (JSScript *script = (JSScript *)cx->compartment->scripts.next;
          &script->links != &cx->compartment->scripts;
--- js/src/jsinterpinlines.h	
+++ js/src/jsinterpinlines.h	
@@ -581,17 +581,21 @@ InvokeSessionGuard::invoke(JSContext *cx
 {
     /* N.B. Must be kept in sync with Invoke */
 
     /* Refer to canonical (callee, this) for optimized() sessions. */
     formals_[-2] = savedCallee_;
     formals_[-1] = savedThis_;
 
     void *code;
+#ifdef JS_METHODJIT
     if (!optimized() || !(code = script_->getJIT(false /* !constructing */)->invokeEntry))
+#else
+    if (!optimized())
+#endif
         return Invoke(cx, args_, 0);
 
     /* Clear any garbage left from the last Invoke. */
     JSStackFrame *fp = frame_.fp();
     fp->clearMissingArgs();
     fp->resetInvokeCallFrame();
     SetValueRangeToUndefined(fp->slots(), script_->nfixed);
 
--- js/src/shell/js.cpp.orig	2011-01-10 19:26:08.000000000 -0800
+++ js/src/shell/js.cpp	2011-01-16 20:02:59.000000000 -0800
@@ -4249,7 +4249,11 @@ Deserialize(JSContext *cx, uintN argc, j
 JSBool
 MJitStats(JSContext *cx, uintN argc, jsval *vp)
 {
+#ifdef JS_METHODJIT
     JS_SET_RVAL(cx, vp, INT_TO_JSVAL(cx->runtime->mjitMemoryUsed));
+#else
+    JS_SET_RVAL(cx, vp, JSVAL_VOID);
+#endif
     return true;
 }
 
