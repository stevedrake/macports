Index: src/unexmacosx.c
===================================================================
RCS file: /cvsroot/emacs/emacs/src/unexmacosx.c,v
retrieving revision 1.22.2.1
diff -c -p -r1.22.2.1 unexmacosx.c
*** src/unexmacosx.c	25 Jul 2007 05:15:30 -0000	1.22.2.1
--- src/unexmacosx.c	29 Oct 2007 23:09:00 -0000
*************** unexec_regions_recorder (task_t task, vo
*** 443,457 ****

    while (num && num_unexec_regions < MAX_UNEXEC_REGIONS)
      {
!       /* Subtract the size of trailing null pages from filesize.  It
  	 can be smaller than vmsize in segment commands.  In such a
! 	 case, trailing pages are initialized with zeros.  */
!       for (p = ranges->address + ranges->size; p > ranges->address;
! 	   p -= sizeof (int))
! 	if (*(((int *) p)-1))
! 	  break;
!       filesize = ROUNDUP_TO_PAGE_BOUNDARY (p - ranges->address);
!       assert (filesize <= ranges->size);

        unexec_regions[num_unexec_regions].filesize = filesize;
        unexec_regions[num_unexec_regions++].range = *ranges;
--- 443,455 ----

    while (num && num_unexec_regions < MAX_UNEXEC_REGIONS)
      {
!       /* Subtract the size of trailing null bytes from filesize.  It
  	 can be smaller than vmsize in segment commands.  In such a
! 	 case, trailing bytes are initialized with zeros.  */
!       for (p = ranges->address + ranges->size; p > ranges->address; p--)
!       	if (*(((char *) p)-1))
!       	  break;
!       filesize = p - ranges->address;

        unexec_regions[num_unexec_regions].filesize = filesize;
        unexec_regions[num_unexec_regions++].range = *ranges;
*************** unexec_regions_merge ()
*** 503,513 ****
--- 501,519 ----
  {
    int i, n;
    unexec_region_info r;
+   vm_size_t padsize;

    qsort (unexec_regions, num_unexec_regions, sizeof (unexec_regions[0]),
  	 &unexec_regions_sort_compare);
    n = 0;
    r = unexec_regions[0];
+   padsize = r.range.address & (pagesize - 1);
+   if (padsize)
+     {
+       r.range.address -= padsize;
+       r.range.size += padsize;
+       r.filesize += padsize;
+     }
    for (i = 1; i < num_unexec_regions; i++)
      {
        if (r.range.address + r.range.size == unexec_regions[i].range.address
*************** unexec_regions_merge ()
*** 520,525 ****
--- 526,542 ----
  	{
  	  unexec_regions[n++] = r;
  	  r = unexec_regions[i];
+ 	  padsize = r.range.address & (pagesize - 1);
+ 	  if (padsize)
+ 	    {
+ 	      if ((unexec_regions[n-1].range.address
+ 		   + unexec_regions[n-1].range.size) == r.range.address)
+ 		unexec_regions[n-1].range.size -= padsize;
+ 
+ 	      r.range.address -= padsize;
+ 	      r.range.size += padsize;
+ 	      r.filesize += padsize;
+ 	    }
  	}
      }
    unexec_regions[n++] = r;
*************** print_load_command_name (int lc)
*** 562,567 ****
--- 579,589 ----
      case LC_TWOLEVEL_HINTS:
        printf ("LC_TWOLEVEL_HINTS");
        break;
+ #ifdef LC_UUID
+     case LC_UUID:
+       printf ("LC_UUID          ");
+       break;
+ #endif
      default:
        printf ("unknown          ");
      }
