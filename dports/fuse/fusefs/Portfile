# $Id$

PortSystem 1.0
PortGroup xcode 1.0

name                fusefs
version             1.1
revision            2
categories          fuse devel
platforms           darwin
maintainers         eridius@macports.org
description         A FUSE-Compliant File System Implementation Mechanism for Mac OS X
long_description    MacFUSE implements a mechanism that makes it possible to implement \
                    a fully functional file system in a user-space program on Mac OS X \
                    (10.4 and above). It aims to be API-compliant with the FUSE \
                    (File-system in USErspace) mechanism that originated on Linux. \
                    Therefore, many existing FUSE file systems become readily usable on \
                    Mac OS X. The core of MacFUSE is in a dynamically loadable kernel extension.

homepage            http://code.google.com/p/macfuse/
master_sites        macports
distname            macfuse-${version}
checksums           md5 42487d7684b1f9a8eb2f8a61b10f7913 \
                    sha1 6347e5b6b0f810a3e5b0fbc82cbccfdf3f4c6311

platform darwin 8 {}

if {[variant_isset darwin_8]} {
    set product_version 10.4
} else {
    set product_version 10.5
}

worksrcdir          ${distname}/core/${product_version}/${name}
livecheck.distname  MacFUSE-Core-${product_version}-(.*).dmg

use_bzip2           yes

destroot.violate_mtree yes

xcode.configuration     Release
xcode.target            fusefs load_fusefs fusefs.fs mount_fusefs
xcode.build.settings    OBJROOT=build/ SYMROOT=build/

# ensure that user is running OS X 10.4
pre-fetch {
    if {${os.platform} == "darwin"} {
        set vers [split [exec sw_vers -productVersion] .]
        set majorVersion [lindex $vers 0]
        set minorVersion [lindex $vers 1]
        if {"$majorVersion.$minorVersion" < 10.4} {
            return -code error "MacFUSE requires at least Mac OS X 10.4 to run"
        }
    } else {
        return -code error "MacFUSE is for Mac OS X only"
    }
}

destroot {
    if {[variant_isset darwin_8]} {
        set sysfsdir ${destroot}/System/Library/Filesystems
    } else {
        set sysfsdir ${destroot}/Library/Filesystems
    }
    set macfuse_bundle_dir ${sysfsdir}/fusefs.fs
    set macfuse_support_dir ${macfuse_bundle_dir}/Support
    
    set builddir ${worksrcpath}/build/${xcode.configuration}
    
    # ensure sysfsdir exists
    xinstall -d -m 755 -o root -g wheel ${sysfsdir}
    
    # copy fusefs.fs
    file copy -- ${builddir}/fusefs.fs ${macfuse_bundle_dir}
    
    # ensure Support dir exists
    xinstall -d -m 755 -o root -g wheel ${macfuse_support_dir}
    
    # copy Support files
    file copy -- ${builddir}/fusefs.kext ${macfuse_support_dir}/fusefs.kext
    xinstall -m 4555 ${builddir}/load_fusefs ${macfuse_support_dir}/load_fusefs
    xinstall ${builddir}/mount_fusefs ${macfuse_support_dir}/mount_fusefs
    
    # set permissions
    fs-traverse file [list ${macfuse_bundle_dir}] {
        file attributes $file -owner root -group wheel
    }
}

post-activate {
    if {[string length [exec kextstat -lb com.google.filesystems.fusefs]] > 0} {
        ui_msg "********************************************************"
        ui_msg "*  fusefs is already loaded. You may need to restart.  *"
        ui_msg "*  Alternatively, if feeling adventurous, you can run  *"
        ui_msg "*  `sudo kextunload -b com.google.filesystems.fusefs`  *"
        ui_msg "********************************************************"
    }
}
