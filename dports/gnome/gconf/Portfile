# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem      1.0

name            gconf
set my_name     GConf
version         2.24.0
revision	1
set branch      [join [lrange [split ${version} .] 0 1] .]
maintainers     nomaintainer
categories      gnome
platforms       darwin
description     GConf is a configuration database system.

long_description \
    GConf is a configuration database system, \
    functionally similar to the Windows registry \
    but lots better. :-) It's being written for \
    the GNOME desktop but does not require GNOME.

homepage        http://www.gnome.org/projects/gconf/
master_sites    gnome:sources/${my_name}/${branch}/
distname        ${my_name}-${version}
use_bzip2       yes

checksums       md5     4971d96f5ba94fe4a69396267bd5afe8 \
                sha1    e93ff2609c0278075acabdf609f42aa406e20c8e \
                rmd160  b4016275e9dffa248620303bc2241f6c0081be06

depends_build   port:pkgconfig \
                port:intltool

depends_lib     path:lib/pkgconfig/glib-2.0.pc:glib2 \
                port:gettext \
                port:libxml2 \
                port:gtk2 \
                port:dbus \
                port:dbus-glib \
                port:orbit2

configure.cppflags-append -L${prefix}/lib

destroot.keepdirs \
    ${destroot}${prefix}/etc/gconf/gconf.xml.mandatory \
    ${destroot}${prefix}/etc/gconf/gconf.xml.defaults

platform darwin 7 {
    configure.cflags-append -DBIND_8_COMPAT=1
}

livecheck.check regex
livecheck.url   http://ftp.gnome.org/pub/gnome/sources/${my_name}/${branch}/
livecheck.regex {LATEST-IS-(\d+(?:\.\d+)*)}

if {![info exists universal_archs]} {
    set universal_archs {i386 ppc}
}
set first_arch [lindex ${universal_archs} 0]

set my_worksrcpaths ${worksrcpath}

variant universal {
    set my_worksrcpaths {}
    foreach arch ${universal_archs} {
        lappend my_worksrcpaths ${workpath}/${arch}
    }

    post-patch {
        foreach arch ${universal_archs} {
            if {[string equal ${arch} ${first_arch}]} {
                move ${worksrcpath} ${workpath}/${first_arch}
            } else {
                copy ${workpath}/${first_arch} ${workpath}/${arch}
            }
        }
    }
    
    configure {
        foreach arch ${universal_archs} {
            set my_arch_flag "-arch ${arch}"
            set my_cflags "${configure.cflags} -isysroot ${sysroot} ${my_arch_flag}"
            set my_ldflags "${configure.ldflags} ${my_arch_flag}"
            system "cd ${workpath}/${arch} && CFLAGS=\"${my_cflags}\" CXXFLAGS=\"${my_cflags}\" LDFLAGS=\"${my_ldflags}\" ${configure.cmd} ${configure.pre_args}"
        }
    }
    
    build {
        foreach arch ${universal_archs} {
            system "cd ${workpath}/${arch} && ${build.cmd} ${build.pre_args}"
        }
    }
    
    destroot {
        system "cd ${workpath}/${first_arch} && ${destroot.cmd} ${destroot.pre_args} ${destroot.post_args}"
        foreach lib [list [file readlink ${workpath}/${first_arch}/gconf/.libs/libgconf-2.dylib] libgconf-2.a] {
            set output_lib ${destroot}${prefix}/lib/${lib}
            set lipo_args {}
            foreach arch ${universal_archs} {
                lappend lipo_args -arch ${arch} ${workpath}/${arch}/gconf/.libs/${lib}
            }
            lappend lipo_args -create -output ${output_lib}
            delete ${output_lib}
            system "lipo ${lipo_args}"
        }

        set lipo_args {}  
        foreach arch ${universal_archs} {
            lappend lipo_args -arch ${arch} ${workpath}/${arch}/gconf/gconftool-2
        }
        lappend lipo_args -create -output ${destroot}${prefix}/bin/gconftool-2
        delete ${destroot}${prefix}/bin/gconftool-2
        system "lipo ${lipo_args}"
        
        set lipo_args {}  
        foreach arch ${universal_archs} {
            lappend lipo_args -arch ${arch} ${workpath}/${arch}/backends/gconf-merge-tree
        }
        lappend lipo_args -create -output ${destroot}${prefix}/bin/gconf-merge-tree
        delete ${destroot}${prefix}/bin/gconf-merge-tree
        system "lipo ${lipo_args}"
    }
}
