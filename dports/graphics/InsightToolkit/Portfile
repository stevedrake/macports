# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem      1.0

name            InsightToolkit
version         3.12.0
revision        0
set branch	    [join [lrange [split ${version} .] 0 1] .]

categories      graphics math science devel

maintainers     dweber openmaintainer

description     Insight Segmentation and Registration Toolkit (ITK)

long_description \
ITK  is an open-source software toolkit for performing registration and segmentation. Segmentation is the process of identifying and classifying data found in a digitally sampled representation. Typically the sampled representation is an image acquired from such medical instrumentation as CT or MRI scanners. Registration is the task of aligning or developing correspondences between data. For example, in the medical environment, a CT scan may be aligned with an MRI scan in order to combine the information contained in both.

homepage        http://www.itk.org/
master_sites    sourceforge:itk

distname        InsightToolkit-${branch}
distfiles       InsightToolkit-${version}.tar.gz \
                CableSwig-ITK-${version}.tar.gz

checksums       InsightToolkit-${version}.tar.gz \
                    md5  0bdf73a88f0d6936496addf036b07215 \
                    sha1 7db0e20c8cbfe1c12a3ad86428cb6eefd8169f58 \
                    rmd160 0adcab3705b96db08dbf5110d9a09cc265821a9d \
                CableSwig-ITK-${version}.tar.gz \
                    md5  04a8610e3724e7fef9207a90fd4bfde3 \
                    sha1 04ab4f03a8e08267b9e78aafea055ef2a5058798 \
                    rmd160 5758c7ee205a53a205a8a72a721aafeff7c8b194

platforms       darwin

depends_build   port:cmake

depends_lib     port:xorg-libs \
                port:ossp-uuid

# Use gmake and build in a separate directory from the source
build.type      gnu
build.dir       ${workpath}/${distname}-build

# Using this dummy stage to inspect MacPorts variables (using 'port -d fetch InsightToolkit')
#fetch { system "echo ${distfiles} && echo ${checksums}" }

post-extract {
    move ${workpath}/InsightToolkit-${version} ${workpath}/${distname}
    move ${workpath}/CableSwig-ITK-${version}  ${workpath}/${distname}/Utilities/CableSwig
}

configure {
    xinstall -d -o root -g admin -m 0755 ${build.dir}
    system "cd ${build.dir} && cmake ${configure.args} ${worksrcpath}"
}

# To double-check all the cmake variable settings after the configure
#cd ${build.dir}
#sudo cmake -LAH ../itk-${branch} > ~/cmake_vars.txt
# Similarly, for an interactive configuration with ccmake, try:
#cd ${build.dir}
#sudo ccmake ../itk-${branch}

# Get the size of RAM in Gigabits
set gigabits [expr [exec sysctl -n hw.memsize] / pow(1024,3)]

configure.args-append \
    -DBUILD_DOXYGEN:BOOL=OFF \
    -DBUILD_EXAMPLES:BOOL=OFF \
    -DBUILD_TESTING:BOOL=OFF \
    -DBUILD_SHARED_LIBS:BOOL=OFF \
    -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
    -DCMAKE_INCLUDE_PATH:PATH=${prefix}/include \
    -DCMAKE_LIBRARY_PATH:PATH=${prefix}/lib \
    -DCMAKE_INSTALL_NAME_DIR:STRING=${prefix}/lib/${distname} \
    -DCMAKE_INSTALL_PREFIX:PATH=${prefix} \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DITK_COMPUTER_MEMORY_SIZE:STRING=${gigabits} 


post-destroot {
    move ${destroot}${prefix}/lib/InsightToolkit ${destroot}${prefix}/lib/${distname} 
    move ${destroot}${prefix}/include/InsightToolkit ${destroot}${prefix}/include/${distname} 
}


# -----------------------------------------------------------------------------
# VARIANTS
# variant name [requires variant] [conflicts variant] [description description]

default_variants \
    +doc \
    +shared

# Global variables
#
# See doc variant for details
set itkDocFile  DoxygenInsightToolkit-${version}.tar.gz
set itkDocPath  ${prefix}/share/${distname}/doc
# See data variants for details 
set itkDataPath ${prefix}/share/${distname}/data


variant doc description {provide doxygen documentation [default: ${prefix}/share/${distname}/doc]} {
    global itkDocFile
    distfiles-append    ${itkDocFile}
    checksums-append    ${itkDocFile} \
                        md5  99dcad9f8e7a3d0acb9da62efdf5fd13 \
                        sha1 e6800094f493e6ef2b1484ce2da578a19a978c40 \
                        rmd160 a20167892a6e91e6f530313c3c057e4d08999d62
    post-destroot {
        global itkDocFile
        set itkDocPathMain ${prefix}/share/${distname}/doc
        set itkDocPathLink ${prefix}/share/doc/${distname}
        xinstall -d -o root -g admin -m 0755 ${destroot}/${itkDocPathMain}
        xinstall -d -o root -g admin -m 0755 ${destroot}/${itkDocPathLink}
        # Add the doxygen documentation 
        system "tar --strip-components 1 -C ${destroot}/${itkDocPathMain} -zxf ${distpath}/${itkDocFile}"
        # Add basic documentation
        file copy ${worksrcpath}/Copyright     ${destroot}/${itkDocPathMain}/
        file copy ${worksrcpath}/Copyright.txt ${destroot}/${itkDocPathMain}/
        file copy ${worksrcpath}/README.html   ${destroot}/${itkDocPathMain}/
        # Create a symlink to the $prefix path (not the destroot path); use the
        # system to do this because the $prefix path doesn't exist yet and the
        # tcl ln command fails, whereas this system command will allow it.
        system "ln -Fhs ${itkDocPathMain} ${destroot}/${itkDocPathLink}"
    }
}

# --- Data variants

# Change this to the itkDataPath and use post-destroot to relocate all this data
#-DITK_DATA_ROOT:PATH=${worksrcpath}/Testing/Data

##// Directory with data taken from http://public.kitware.com/pub/itk/Data/BrainWeb/
##ITK_BRAINWEB_DATA_ROOT:PATH=ITK_BRAINWEB_DATA_ROOT-NOTFOUND
variant brainweb description {provide ITK BrainWeb data: ${prefix}/share/${distname}/data]} {
    master_sites-append \
        http://public.kitware.com/pub/itk/Data/BrainWeb:brainweb
    eval extract.only ${distfiles}
    distfiles-append \
        BrainPart1.tgz:brainweb \
        BrainPart1Rotated10Translated15.tgz:brainweb \
        BrainPart1Rotated20Translated20.tgz:brainweb \
        BrainPart2.tgz:brainweb \
        BrainPart2Rotated10Translated15.tgz:brainweb \
        BrainPart2Rotated20Translated20.tgz:brainweb \
        BrainPart3.tgz:brainweb \
        BrainPart3Rotated10Translated15.tgz:brainweb \
        BrainPart3Rotated20Translated20.tgz:brainweb
    checksums-append \
        BrainPart1.tgz \
            md5  e722d697f9d0b51023652b3fe7348658 \
            sha1 e91f5c4928c880b944e1559eee015170c1badc4b \
            rmd160 b5cbb557df0b019afe3f411deea72ef464626ace \
        BrainPart1Rotated10Translated15.tgz \
            md5  9d052710929477b1ddb5095575a5d7f9 \
            sha1 effc10374f1e70ded967fb55237cd600b6ef51ca \
            rmd160 3e1f19dbe48b7912f46f255459330fde50f96b62 \
        BrainPart1Rotated20Translated20.tgz \
            md5  36af81caf9ea7ce9b72987ff6d08ddf3 \
            sha1 4c10b5ab612282361f344d1432664067bc94c736 \
            rmd160 d6d23117fbf8803b0488b4fd5bddb739576d983f \
        BrainPart2.tgz \
            md5  458b0903a2fb52a1cae616eddf817142 \
            sha1 21659b5ee37a9ed0958c79a1943dd5ebafbe27ec \
            rmd160 dc85b393c8dfbf04ba2aa0690237acfb185ada4e \
        BrainPart2Rotated10Translated15.tgz \
            md5  8c978a660e442e4ed06e77bc4f769af2 \
            sha1 58c1b5a6d9e8a965f3e73febca012747b0246702 \
            rmd160 3867b0d006fa8b5af084a78fa812aff69c2ad0c1 \
        BrainPart2Rotated20Translated20.tgz \
            md5  5f53d805ab4346b933ce52c7b34e67b2 \
            sha1 f29740e4760ffc602e9a6b2aa2b96efabcff1aa6 \
            rmd160 2441747f0c98e9f2fa24a1c7ca9294bed729dcc0 \
        BrainPart3.tgz \
            md5  c6f5edccbb2c0ba418e4666fe989eb15 \
            sha1 20cdee786c710aed0df6943bcbaa9c62bb82e773 \
            rmd160 3f730bf426a6509c73c58902220b64cb3324b136 \
        BrainPart3Rotated10Translated15.tgz \
            md5  61893ca3df13d24530275758de702fef \
            sha1 4f6ba74d68a7e477fd43237213d4d4e4ce839503 \
            rmd160 ba408d2ff6297af7f76af82ae24e9afe519bb80c \
        BrainPart3Rotated20Translated20.tgz \
            md5  db63c7567d1c021860d59812eb41dfa9 \
            sha1 2e14b66beef00acc8cd17942d9bf0c155841a934 \
            rmd160 42d403505116e8b9885d00964376cee909711bd0
    global itkDataPath
    configure.args-append \
        -DITK_BRAINWEB_DATA_ROOT:PATH=${itkDataPath}
    post-destroot {
        global itkDataPath
        xinstall -d -o root -g admin -m 0755 ${destroot}/${itkDataPath}
        foreach tgz [exec find ${distpath} -name "BrainPart*.tgz"] {
            system "tar -C ${destroot}/${itkDataPath} -zxf ${tgz}"
        }
    }
}


##// Directory with data taken from http://public.kitware.com/pub/itk/Data/HealthyVolunteersMRIDatabase/
##ITK_MRI_UNC_DATABASE_DATA_ROOT:PATH=ITK_MRI_UNC_DATABASE_DATA_ROOT-NOTFOUND
#http://public.kitware.com/pub/itk/Data/HealthyVolunteersMRIDatabase/Brain_MRA_From_UNC_Collection.zip
#http://public.kitware.com/pub/itk/Data/HealthyVolunteersMRIDatabase/LICENSE.txt
# During install, use a message to echo the LICENSE.txt file


##// Directory with data taken from http://www.osirix-viewer.com/Downloads.html
##ITK_OSIRIX_DATA_ROOT:PATH=ITK_OSIRIX_DATA_ROOT-NOTFOUND
# sourceforge downloads:
#http://prdownloads.sourceforge.net/osirix/CardiacCT.zip?download
#http://prdownloads.sourceforge.net/osirix/PET-CT.zip?download
# More datasets available from:
#http://pubimage.hcuge.ch:8080/


variant examples description {provide ITK examples [default: ${prefix}/share/${distname}/examples]} {
    configure.args-delete \
        -DBUILD_EXAMPLES:BOOL=OFF
    configure.args-append \
        -DBUILD_EXAMPLES:BOOL=ON
    #post-destroot {
    #    set itkExamplePath ${prefix}/share/${distname}/examples
    #    xinstall -d -o root -g admin -m 0755 ${destroot}/${itkExamplePath}/bin
    #    foreach f [glob ${worksrcpath}/Examples/*] {
    #        file copy ${f} ${destroot}/${itkExamplePath}/
    #    }
    #    # Installations for the example binaries are in ${build.dir}/bin/.
    #    set buildBinPath ${build.dir}/bin
    #    foreach f [glob ${buildBinPath}/*] {
    #        if {![string match {*.dylib} ${f}]} {
    #          file copy ${f} ${destroot}/${itkExamplePath}/bin/
    #        }
    #    }
    #    # All the rpath settings for these binaries point to the build.dir, so
    #    # they are reset using install_name_tool.
    #    set itkLibPath ${prefix}/lib/${distname}
    #    foreach f [glob ${destroot}/${itkExamplePath}/bin/*] {
    #        if [string equal [file extension ${f}] ".app"] {
    #            set exeName [file rootname [lindex [file split ${f}] end]]
    #            set f [format "%s/Contents/MacOS/%s" ${f} ${exeName}]
    #        }
    #        if [expr [file isfile ${f}] && [file executable ${f}]] {
    #            foreach dep [exec otool -L ${f}] {
    #                if [string match "*/libitk*.dylib" ${dep}] {
    #                    set newdep [strsed ${dep} #${buildBinPath}#${itkLibPath}#]
    #                    system "install_name_tool -change ${dep} ${newdep} ${f}"
    #                }
    #            }
    #        }
    #    }
    #}
}


# Notes on RPATH settings for the shared dylib build and install:
#
# CMake book, Appendix A, p 234: "CMAKE_SKIP_BUILD_RPATH: Do not include RPATHs
# in the build tree.  Normally CMake uses the build tree for the RPATH when
# building executables etc. on systems that use RPATH.  When the software is
# installed the executables etc.  are relinked by CMake to have the install
# RPATH.  If this variable is set to true then the software is always built with
# no RPATH."
#
# CMake book, Appendix B, p. 301: "... SKIP_BUILD_RPATH is a boolean specifying
# whether to skip automatic generation of an rpath allowing the target to run
# from the build tree.  BUILD_WITH_INSTALL_RPATH is a boolean specifying whether
# to link the target in the build tree with the INSTALL_RPATH.  This takes
# precedence over SKIP_BUILD_RPATH and avoids the need for relinking before
# installation."
#
# Using CMAKE_SKIP_BUILD_RPATH:BOOL=OFF, we get all the executables and dylibs
# built with the $build.dir in the rpath.  For this to work, we must also have
# CMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF.  After the build, at the destroot
# phase, all the installation candidates (which excludes the examples and
# testing binaries) have their rpath settings reset to the INSTALL_RPATH (which
# should point to $prefix..., not the $destroot location).  VTK_USE_RPATH
# is required to ensure that rpath is set for all the installed executables and
# dylibs.

variant shared description {build shared libraries [default]} {
    configure.args-delete \
        -DBUILD_SHARED_LIBS:BOOL=OFF
    configure.args-append \
        -DBUILD_SHARED_LIBS:BOOL=ON \
        -DCMAKE_SKIP_RPATH:BOOL=OFF \
        -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF \
        -DCMAKE_INSTALL_RPATH:STRING=${prefix}/lib/${distname}
}


variant testing description {provide ITK testing [default: ${prefix}/share/${distname}/testing]} {
    configure.args-delete \
        -DBUILD_TESTING:BOOL=OFF
    configure.args-append \
        -DBUILD_TESTING:BOOL=ON
    #post-destroot {
    #    set itkExamplePath ${prefix}/share/${distname}/examples
    #    xinstall -d -o root -g admin -m 0755 ${destroot}/${itkExamplePath}/bin
    #    foreach f [glob ${worksrcpath}/Examples/*] {
    #        file copy ${f} ${destroot}/${itkExamplePath}/
    #    }
    #    # Installations for the example binaries are in ${build.dir}/bin/.
    #    set buildBinPath ${build.dir}/bin
    #    foreach f [glob ${buildBinPath}/*] {
    #        if {![string match {*.dylib} ${f}]} {
    #          file copy ${f} ${destroot}/${itkExamplePath}/bin/
    #        }
    #    }
    #    # All the rpath settings for these binaries point to the build.dir, so
    #    # they are reset using install_name_tool.
    #    set itkLibPath ${prefix}/lib/${distname}
    #    foreach f [glob ${destroot}/${itkExamplePath}/bin/*] {
    #        if [string equal [file extension ${f}] ".app"] {
    #            set exeName [file rootname [lindex [file split ${f}] end]]
    #            set f [format "%s/Contents/MacOS/%s" ${f} ${exeName}]
    #        }
    #        if [expr [file isfile ${f}] && [file executable ${f}]] {
    #            foreach dep [exec otool -L ${f}] {
    #                if [string match "*/libitk*.dylib" ${dep}] {
    #                    set newdep [strsed ${dep} #${buildBinPath}#${itkLibPath}#]
    #                    system "install_name_tool -change ${dep} ${newdep} ${f}"
    #                }
    #            }
    #        }
    #    }
    #}
}

# --- external languages support
#
#variant wrap requires shared {
#    depends_lib-append \
#        port:guile
#    configure.args-append \
#        -DUSE_WRAP_ITK:BOOL=ON \
#        -DITK_USE_REVIEW:BOOL=ON \
#        -DGUILE_EXECUTABLE:FILEPATH=${prefix}/bin/guile \
#        -DGUILE_LIBRARY:FILEPATH=${prefix}/lib/libguile.dylib \
#        -DGUILE_INCLUDE_PATH:PATH=${prefix}/include/guile \
#        -DSWIG_BUILD_EXAMPLES:BOOL=ON
#}
#
#
#variant java requires wrap {
#    configure.args-append \
#        -DITK_CSWIG_JAVA:BOOL=ON
#        # The following variables are defined automatically by cmake:
#        #-DJAVA_ARCHIVE                    /usr/bin/jar
#        #-DJAVA_AWT_INCLUDE_PATH           /System/Library/Frameworks/JavaVM.framework/Headers
#        #-DJAVA_AWT_LIBRARY                -framework
#        #-DJAVA_COMPILE                    /usr/bin/javac
#        #-DJAVA_INCLUDE_PATH               /System/Library/Frameworks/JavaVM.framework/Headers
#        #-DJAVA_INCLUDE_PATH2              /System/Library/Frameworks/JavaVM.framework/Headers
#        #-DJAVA_JVM_LIBRARY                -framework
#        #-DJAVA_RUNTIME                    /usr/bin/java
#}
#
#variant py26 requires wrap description {python 2.6 wrapper} {
#    set pyver        2.6
#    set python       python${pyver}
#    set pyport       [join [lrange [split ${python} .] 0 1] ""]
#    set pyframe      ${prefix}/Library/Frameworks/Python.framework/Versions/${pyver}
#    depends_lib-append \
#        port:${pyport}
#    configure.args-append \
#        -DITK_CSWIG_PYTHON:BOOL=ON \
#        -DPYTHON_DEBUG_LIBRARY:FILEPATH=-framework \
#        -DPYTHON_EXECUTABLE:FILEPATH=${prefix}/bin/${python} \
#        -DPYTHON_INCLUDE_PATH:FILEPATH=${prefix}/Library/Frameworks/Python.framework/Headers \
#        -DPYTHON_LIBRARY:FILEPATH=-framework
#        #-DPYTHON_LIBRARY:FILEPATH=${prefix}/lib/lib${python}.dylib \
#        #-DPYTHON_DEBUG_LIBRARY:FILEPATH=${prefix}/lib/lib${python}.dylib \
#        #-DVTK_PYTHON_SETUP_ARGS:STRING='--prefix=${pyframe} --root=${destroot}'
#}
#
#variant tcl requires wrap description {tcl wrapper (MacPorts tcl/tk)} {
#    depends_lib-append \
#        port:tcl \
#        port:tk
#    configure.args-append \
#        -DTCL_TCLSH:FILEPATH=${prefix}/bin/tclsh \
#        -DTCL_INCLUDE_PATH:PATH=${prefix}/include \
#        -DTCL_LIBRARY:FILEPATH=${prefix}/lib/libtcl.dylib \
#        -DTK_INCLUDE_PATH:PATH=${prefix}/include \
#        -DTK_LIBRARY:FILEPATH=${prefix}/lib/libtk.dylib
#}
        #-DITK_CSWIG_TCL:BOOL=ON \


# The following were possibilities identified by ccmake

#-DPERL_EXECUTABLE                 /opt/local/bin/perl
#-DPERL_INCLUDE_PATH               PERL_INCLUDE_PATH-NOTFOUND
#-DPERL_LIBRARY                    PERL_LIBRARY-NOTFOUND

#-DPHP4_EXECUTABLE                 /opt/local/bin/php
#-DPHP4_FOUND_INCLUDE_PATH         PHP4_FOUND_INCLUDE_PATH-NOTFOUND

#-DPIKE_EXECUTABLE                 PIKE_EXECUTABLE-NOTFOUND
#-DPIKE_INCLUDE_PATH               PIKE_INCLUDE_PATH-NOTFOUND

#-DRUBY_EXECUTABLE                 RUBY_EXECUTABLE-NOTFOUND
#-DRUBY_INCLUDE_PATH               /System/Library/Frameworks/Ruby.framework/Headers
#-DRUBY_LIBRARY                    RUBY_LIBRARY-NOTFOUND







#ITK_USE_LIBXML2
#ITK_USE_MINC2
#

#VNL_CONFIG_*

#VXL_UPDATE_CONFIGURATION

#variant kwstyle description {provide Kitware Style checking} {
#    depends_lib-append \
#        port:kwstyle
#    configure.args-append \
#        -DITK_USE_KWSTYLE:BOOL=ON
#}

#// Use an outside build of GDCM.
#ITK_USE_SYSTEM_GDCM:BOOL=OFF
#
#// Use the system's libxml2 library.
#ITK_USE_SYSTEM_LIBXML2:BOOL=OFF
#
#// Use the system's png library.
#ITK_USE_SYSTEM_PNG:BOOL=OFF
#
#// Use the system's tiff library.
#ITK_USE_SYSTEM_TIFF:BOOL=OFF
#
#// Use an outside build of VXL.
#ITK_USE_SYSTEM_VXL:BOOL=OFF
#
#// Use the system's zlib library.
#ITK_USE_SYSTEM_ZLIB:BOOL=OFF



#livecheck.check     sourceforge
#livecheck.regex     <title>itk InsightToolkit-(.*) released.*</title>

