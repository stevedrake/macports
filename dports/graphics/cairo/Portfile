# $Id$

PortSystem          1.0

name                cairo
version             1.4.12
categories          graphics
maintainers         ryandesign
homepage            http://cairographics.org/
master_sites        ${homepage}releases/
platforms           darwin

description \
	Cairo is a vector graphics library with cross-device output support.

long_description \
	Cairo is designed to produce identical output on all output media \
	while taking advantage of display hardware acceleration when available \
	(eg. through the X Render Extension).

checksums \
	md5 8e50c2c0d56388e4ee94196c0c7a7904 \
	sha1 45d5257e5a0c1524bcc25660a96b2c79d012ad3f \
	rmd160 5ed65d5872c0561f3392e60007898d9360d83d0a

depends_lib \
	port:xrender \
	port:fontconfig \
	port:freetype \
	port:libpng \
	port:render \
	port:zlib \
	port:expat

# The +universal variant is easier to code if there is always something in
# configure.args, so define these here, even though they're the default.
configure.args \
	--enable-shared \
	--enable-static

variant glitz conflicts no_x11 description {Add glitz graphics interface} {
	depends_lib-append port:glitz
	configure.args-append --enable-glitz
}

# Quartz and ATSUI support is still experimental in cairo, and the use of
# these variants is not expected to bring you joy at this time.
variant quartz description {Add experimental Quartz graphics interface} {
	configure.args-append --enable-quartz
}
variant atsui description {Add experimental ATSUI font interface} {
	configure.args-append --enable-atsui
}
variant no_x11 requires quartz atsui conflicts glitz description {Omit X11 support and build with experimental Quartz and ATSUI support only} {
	depends_lib-delete \
		port:xrender \
		port:render
	configure.args-append \
		--disable-xlib
}
variant pdf description "Enable PDF backend" {
	configure.args-append --enable-pdf
}

set my_worksrcpaths ${worksrcpath}

post-configure {
	foreach my_worksrcpath ${my_worksrcpaths} {
		reinplace "s/-dynamiclib/-dynamiclib -flat_namespace/" ${my_worksrcpath}/libtool
	}
}

set my_universal_archs {i386 ppc}
set first_arch [lindex ${my_universal_archs} 0]
set my_worksrcpaths {}

variant universal {
	post-patch {
		foreach arch ${my_universal_archs} {
			if {[string equal ${arch} ${first_arch}]} {
				move ${worksrcpath} ${workpath}/${first_arch}
			} else {
				copy ${workpath}/${first_arch} ${workpath}/${arch}
			}
			lappend my_worksrcpaths ${workpath}/${arch}
		}
	}
	
	configure {
		foreach arch ${my_universal_archs} {
			set my_arch_flag "-arch ${arch}"
			set my_cflags "${configure.cflags} -isysroot ${sysroot} ${my_arch_flag}"
			set my_ldflags "${configure.ldflags} ${my_arch_flag}"
			system "cd ${workpath}/${arch} && CFLAGS=\"${my_cflags}\" CXXFLAGS=\"${my_cflags}\" LDFLAGS=\"${my_ldflags}\" ${configure.cmd} ${configure.pre_args} ${configure.args}"
		}
	}
	
	build {
		foreach arch ${my_universal_archs} {
			system "cd ${workpath}/${arch} && ${build.cmd} ${build.pre_args}"
		}
	}
	
	destroot {
		system "cd ${workpath}/${first_arch} && ${destroot.cmd} ${destroot.pre_args} ${destroot.post_args}"
		foreach lib [list [file readlink ${workpath}/${first_arch}/src/.libs/libcairo.dylib] libcairo.a] {
			set output_lib ${destroot}${prefix}/lib/${lib}
			set lipo_args {}
			foreach arch ${my_universal_archs} {
				lappend lipo_args -arch ${arch} ${workpath}/${arch}/src/.libs/${lib}
			}
			lappend lipo_args -create -output ${output_lib}
			delete ${output_lib}
			system "lipo ${lipo_args}"
		}
	}
}

livecheck.check     regex
livecheck.url       ${homepage}news/
livecheck.regex     ${name}-(\[0-9\]+\\.\[0-9\]*\[02468\]\\.\[0-9\]+)
