diff -Nur ../graphviz-1.16.orig/dotty/mswin32/dotty.c ./dotty/mswin32/dotty.c
--- ../graphviz-1.16.orig/dotty/mswin32/dotty.c	Mon Apr 17 23:55:20 2000
+++ ./dotty/mswin32/dotty.c	Wed Sep 15 19:31:42 2004
@@ -17,7 +17,7 @@
 static char * NEAR shellpath;
 
 static char *buildpath (char *);
-static void panic (char *, int, char *, char *, ...);
+static void dotty_panic (char *, int, char *, char *, ...);
 
 int PASCAL WinMain (HANDLE hInstance, HANDLE hPrevInstance,
         LPSTR lpCmdLine, int nCmdShow) {
@@ -81,7 +81,7 @@
     return NULL;
 }
 
-static void panic (char *file, int line, char *func, char *fmt, ...) {
+static void dotty_panic (char *file, int line, char *func, char *fmt, ...) {
     va_list args;
 
     va_start(args, fmt);
diff -Nur ../graphviz-1.16.orig/lefty/aix_mods/common.h ./lefty/aix_mods/common.h
--- ../graphviz-1.16.orig/lefty/aix_mods/common.h	Wed Jul 14 23:14:37 2004
+++ ./lefty/aix_mods/common.h	Wed Sep 15 19:32:42 2004
@@ -67,7 +67,7 @@
 char *buildpath (char *, int);
 char *buildcommand (char *, char *, int, int, char *);
 void warning (char *, int, char *, char *, ...);
-void panic (char *, int, char *, char *, ...);
+void lefty_panic (char *, int, char *, char *, ...);
 void panic2 (char *, int, char *, char *, ...);
 #endif /* _COMMON_H */
 
diff -Nur ../graphviz-1.16.orig/lefty/aix_mods/exec.c ./lefty/aix_mods/exec.c
--- ../graphviz-1.16.orig/lefty/aix_mods/exec.c	Fri Mar 19 20:50:26 2004
+++ ./lefty/aix_mods/exec.c	Wed Sep 15 19:33:33 2004
@@ -156,7 +156,7 @@
         return NULL;
 
     if (Tgettype (co) != T_CODE)
-        panic (POS, "Eunit", "argument type is not T_CODE");
+        lefty_lefty_panic (POS, "Eunit", "argument type is not T_CODE");
 
     m = Mpushmark (co);
     PUSHJMP (oeljbufp, eljbufp, eljbuf);
@@ -392,7 +392,7 @@
         /* NOT REACHED */
         break;
     default:
-        panic (POS, "eeval", "unknown program token type %d", ctype);
+        lefty_lefty_panic (POS, "eeval", "unknown program token type %d", ctype);
     }
     return v1o;
 }
@@ -456,7 +456,7 @@
         sinfop[ownsinfoi].fco = fdo;
         sinfop[ownsinfoi].fci = bi;
         if (fid < 0 || fid >= Ifuncn)
-            panic (POS, "efcall", "no such internal function: %d", fid);
+            lefty_panic (POS, "efcall", "no such internal function: %d", fid);
         rtno = Ttrue;
         if ((*Ifuncs[fid].func) (i, &lvarp[flvari]) == L_FAILURE) {
             rtno = NULL;
@@ -838,7 +838,7 @@
     case C_GT: return (r >  0) ? TRUE : FALSE;
     case C_GE: return (r >= 0) ? TRUE : FALSE;
     }
-    panic (POS, "orderop", "bad op code");
+    lefty_panic (POS, "orderop", "bad op code");
     return FALSE; /* NOT REACHED */
 }
 
diff -Nur ../graphviz-1.16.orig/lefty/aix_mods/tbl.c ./lefty/aix_mods/tbl.c
--- ../graphviz-1.16.orig/lefty/aix_mods/tbl.c	Fri Mar 19 20:50:26 2004
+++ ./lefty/aix_mods/tbl.c	Wed Sep 15 19:33:52 2004
@@ -198,7 +198,7 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinsi", "insert attempted on non-table");
+        lefty_panic (POS, "Tinsi", "insert attempted on non-table");
     tm = Mpushmark (to);
     if (vo)
         Mpushmark (vo);
@@ -211,7 +211,7 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinsr", "insert attempted on non-table");
+        lefty_panic (POS, "Tinsr", "insert attempted on non-table");
     tm = Mpushmark (to);
     if (vo)
         Mpushmark (vo);
@@ -224,7 +224,7 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinss", "insert attempted on non-table");
+        lefty_panic (POS, "Tinss", "insert attempted on non-table");
     tm = Mpushmark (to);
     if (vo)
         Mpushmark (vo);
@@ -236,9 +236,9 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinso", "insert attempted on non-table");
+        lefty_panic (POS, "Tinso", "insert attempted on non-table");
     if (!ko || !(T_ISINTEGER (ko) || T_ISREAL (ko) || T_ISSTRING (ko)))
-        panic (POS, "Tinso", "bad key");
+        lefty_panic (POS, "Tinso", "bad key");
     tm = Mpushmark (to);
     Mpushmark (ko);
     if (vo)
@@ -251,7 +251,7 @@
     if (!to)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfindi", "find attempted on non-table");
+        lefty_panic (POS, "Tfindi", "find attempted on non-table");
     keyi.i = ik;
     return find (to, &keyi, NULL);
 }
@@ -260,7 +260,7 @@
     if (!to)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfindr", "find attempted on non-table");
+        lefty_panic (POS, "Tfindr", "find attempted on non-table");
     keyr.d = rk;
     return find (to, &keyr, NULL);
 }
@@ -269,7 +269,7 @@
     if (!to)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfinds", "find attempted on non-table");
+        lefty_panic (POS, "Tfinds", "find attempted on non-table");
     return find (to, &keys, sk);
 }
 
@@ -277,9 +277,9 @@
     if (!to || !ko)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfindo", "find attempted on non-table");
+        lefty_panic (POS, "Tfindo", "find attempted on non-table");
     if (!(T_ISINTEGER (ko) || T_ISREAL (ko) || T_ISSTRING (ko)))
-        panic (POS, "Tfindo", "bad key");
+        lefty_panic (POS, "Tfindo", "bad key");
     return find (to, ko, NULL);
 }
 
@@ -287,7 +287,7 @@
     if (!to)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdeli", "delete attempted on non-table");
+        lefty_panic (POS, "Tdeli", "delete attempted on non-table");
     keyi.i = ik;
     delete (to, &keyi, NULL);
 }
@@ -296,7 +296,7 @@
     if (!to)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdelr", "delete attempted on non-table");
+        lefty_panic (POS, "Tdelr", "delete attempted on non-table");
     keyr.d = rk;
     delete (to, &keyr, NULL);
 }
@@ -305,7 +305,7 @@
     if (!to)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdels", "delete attempted on non-table");
+        lefty_panic (POS, "Tdels", "delete attempted on non-table");
     delete (to, &keys, sk);
 }
 
@@ -313,9 +313,9 @@
     if (!to || !ko)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdelo", "delete attempted on non-table");
+        lefty_panic (POS, "Tdelo", "delete attempted on non-table");
     if (!(T_ISINTEGER (ko) || T_ISREAL (ko) || T_ISSTRING (ko)))
-        panic (POS, "Tdelo", "bad key");
+        lefty_panic (POS, "Tdelo", "bad key");
     delete (to, ko, NULL);
 }
 
@@ -635,7 +635,7 @@
 
     lp = &map.list[(unsigned long) fmo % MAPLISTN];
     if (!(cep = Mallocate (MAPENTRYSIZE)))
-        panic (POS, "mapinsert", "cannot allocate mapentry");
+        lefty_panic (POS, "mapinsert", "cannot allocate mapentry");
     cep->fmo = fmo, cep->too = too;
     cep->next = *lp, *lp = cep;
 }
diff -Nur ../graphviz-1.16.orig/lefty/common.c ./lefty/common.c
--- ../graphviz-1.16.orig/lefty/common.c	Wed Aug 25 15:34:08 2004
+++ ./lefty/common.c	Wed Sep 15 19:34:52 2004
@@ -83,9 +83,9 @@
         innetscape = TRUE, nswin = getenv ("NSWIN");
 #endif
     if (!(pathp = malloc (PATHINCR * PATHSIZE)))
-        panic (POS, "init", "pathp malloc failed");
+        lefty_panic (POS, "init", "pathp malloc failed");
     if (!(cmdp = malloc (CMDINCR * CMDSIZE)))
-        panic (POS, "init", "cmdp malloc failed");
+        lefty_panic (POS, "init", "cmdp malloc failed");
     shellpath = getenv ("PATH");
 #if defined(FEATURE_GTK) || defined(FEATURE_X11)
     if (!strchr (aout, PATHDEL)) {
@@ -102,7 +102,7 @@
         s1 = aout;
     *s1 = 0;
     if (!(leftypath = malloc (PATHINCR * PATHSIZE)))
-        panic (POS, "init", "leftypath malloc failed");
+        lefty_panic (POS, "init", "leftypath malloc failed");
     leftypath[0] = 0;
     if ((s1 = getenv ("LEFTYPATH")))
         strcat (leftypath, s1), strcat (leftypath, PATHSEPSTR);
@@ -366,7 +366,7 @@
 }
 
 /* varargs function for printing an error message and aborting */
-void panic (char *file, int line, char *func, char *fmt, ...) {
+void lefty_panic (char *file, int line, char *func, char *fmt, ...) {
     va_list args;
 
 #ifndef FEATURE_MS
diff -Nur ../graphviz-1.16.orig/lefty/common.h ./lefty/common.h
--- ../graphviz-1.16.orig/lefty/common.h	Tue Aug 24 18:52:28 2004
+++ ./lefty/common.h	Wed Sep 15 19:34:16 2004
@@ -129,7 +129,7 @@
 char *buildpath (char *, int);
 char *buildcommand (char *, char *, int, int, char *);
 void warning (char *, int, char *, char *, ...);
-void panic (char *, int, char *, char *, ...);
+void lefty_panic (char *, int, char *, char *, ...);
 void panic2 (char *, int, char *, char *, ...);
 #endif /* _COMMON_H */
 
diff -Nur ../graphviz-1.16.orig/lefty/display.c ./lefty/display.c
--- ../graphviz-1.16.orig/lefty/display.c	Fri Mar 19 20:50:26 2004
+++ ./lefty/display.c	Wed Sep 15 19:35:12 2004
@@ -81,7 +81,7 @@
     indent += 2;
     n = ((Ttable_t *) pnode->vo)->n;
     if (!(list = malloc (n * sizeof (dnode_t))))
-        panic (POS, "update", "list malloc failed");
+        lefty_panic (POS, "update", "list malloc failed");
     for (cnode = &list[0], Tgetfirst (pnode->vo, &tkvi); tkvi.kvp;
             cnode++, Tgetnext (&tkvi)) {
         cnode->ko = tkvi.kvp->ko;
diff -Nur ../graphviz-1.16.orig/lefty/dot2l/dot2l.c ./lefty/dot2l/dot2l.c
--- ../graphviz-1.16.orig/lefty/dot2l/dot2l.c	Mon Apr 19 19:25:36 2004
+++ ./lefty/dot2l/dot2l.c	Wed Sep 15 19:35:48 2004
@@ -509,7 +509,7 @@
     attrclass = GRAPH;
 
     if (!(gstack = Mallocate (sizeof (graphframe_t))))
-        panic (POS, "D2Lbegingraph", "cannot allocate graph stack");
+        lefty_panic (POS, "D2Lbegingraph", "cannot allocate graph stack");
     gstack->next = NULL;
     gstack->estack = NULL;
     topgframe = gstack;
@@ -561,7 +561,7 @@
     long gid;
 
     if (!(gframe = Mallocate (sizeof (graphframe_t))))
-        panic (POS, "D2Lpushgraph", "cannot allocate graph stack");
+        lefty_panic (POS, "D2Lpushgraph", "cannot allocate graph stack");
     gframe->next = gstack, gstack = gframe;
     gstack->estack = NULL;
 
@@ -655,7 +655,7 @@
 
 void D2Lbeginedge (int type, Tobj obj, char *port) {
     if (!(gstack->estack = Mallocate (sizeof (edgeframe_t))))
-        panic (POS, "D2Lbeginedge", "cannot allocate edge stack");
+        lefty_panic (POS, "D2Lbeginedge", "cannot allocate edge stack");
     gstack->estack->next = NULL;
     gstack->estack->type = type;
     gstack->estack->obj = obj;
@@ -667,7 +667,7 @@
     edgeframe_t *eframe;
 
     if (!(eframe = Mallocate (sizeof (edgeframe_t))))
-        panic (POS, "D2Lmidedge", "cannot allocate edge stack");
+        lefty_panic (POS, "D2Lmidedge", "cannot allocate edge stack");
     eframe->next = gstack->estack, gstack->estack = eframe;
     gstack->estack->type = type;
     gstack->estack->obj = obj;
diff -Nur ../graphviz-1.16.orig/lefty/exec.c ./lefty/exec.c
--- ../graphviz-1.16.orig/lefty/exec.c	Tue Jul 20 14:30:35 2004
+++ ./lefty/exec.c	Wed Sep 15 19:36:11 2004
@@ -168,7 +168,7 @@
         return NULL;
 
     if (Tgettype (co) != T_CODE)
-        panic (POS, "Eunit", "argument type is not T_CODE");
+        lefty_panic (POS, "Eunit", "argument type is not T_CODE");
 
     m = Mpushmark (co);
     PUSHJMP (oeljbufp, eljbufp, eljbuf);
@@ -406,7 +406,7 @@
         /* NOT REACHED */
         break;
     default:
-        panic (POS, "eeval", "unknown program token type %d", ctype);
+        lefty_panic (POS, "eeval", "unknown program token type %d", ctype);
     }
     return v1o;
 }
@@ -470,7 +470,7 @@
         sinfop[ownsinfoi].fco = fdo;
         sinfop[ownsinfoi].fci = bi;
         if (fid < 0 || fid >= Ifuncn)
-            panic (POS, "efcall", "no such internal function: %d", fid);
+            lefty_panic (POS, "efcall", "no such internal function: %d", fid);
         rtno = Ttrue;
         if ((*Ifuncs[fid].func) (i, &lvarp[flvari]) == L_FAILURE) {
             rtno = NULL;
@@ -858,7 +858,7 @@
     default:
 	break;
     }
-    panic (POS, "orderop", "bad op code");
+    lefty_panic (POS, "orderop", "bad op code");
     return FALSE; /* NOT REACHED */
 }
 
diff -Nur ../graphviz-1.16.orig/lefty/g.c ./lefty/g.c
--- ../graphviz-1.16.orig/lefty/g.c	Fri Mar 19 20:50:26 2004
+++ ./lefty/g.c	Wed Sep 15 19:36:25 2004
@@ -778,7 +778,7 @@
     new->udata = 0;
     /* HACK: should do a switch on type, but ... */
     if (!(new->u.c = (Gcw_t *) malloc (wsizes[type])))
-        panic (POS, "newwidget", "cannot allocate data");
+        lefty_panic (POS, "newwidget", "cannot allocate data");
     return new;
 }
 
diff -Nur ../graphviz-1.16.orig/lefty/gfxview.c ./lefty/gfxview.c
--- ../graphviz-1.16.orig/lefty/gfxview.c	Tue Aug 24 19:28:10 2004
+++ ./lefty/gfxview.c	Wed Sep 15 19:36:54 2004
@@ -1528,7 +1528,7 @@
             return;
         }
     if (!(crp = malloc (sizeof (gfxrect_t))))
-        panic (POS, "rectinsert", "rect malloc failed");
+        lefty_panic (POS, "rectinsert", "rect malloc failed");
 
     crp->ko = ko;
     crp->r.o.x = min (r.o.x, r.c.x);
@@ -1553,7 +1553,7 @@
             return;
         }
     if (!(crp = malloc (sizeof (gfxrect_t))))
-        panic (POS, "rectmerge", "rect malloc failed");
+        lefty_panic (POS, "rectmerge", "rect malloc failed");
 
     crp->ko = ko;
     crp->r.o.x = min (r.o.x, r.c.x);
@@ -1625,7 +1625,7 @@
             return;
         }
     if (!(cmp = malloc (sizeof (gfxmenu_t))))
-        panic (POS, "menuinsert", "menu malloc failed");
+        lefty_panic (POS, "menuinsert", "menu malloc failed");
 
     cmp->ko = ko;
     cmp->time = time;
diff -Nur ../graphviz-1.16.orig/lefty/internal.c ./lefty/internal.c
--- ../graphviz-1.16.orig/lefty/internal.c	Mon Apr 19 19:25:36 2004
+++ ./lefty/internal.c	Wed Sep 15 19:37:35 2004
@@ -189,7 +189,7 @@
     int i;
 
     if (!(bufp = malloc (BUFINCR * BUFSIZE)))
-        panic (POS, "Iinit", "buf malloc failed");
+        lefty_panic (POS, "Iinit", "buf malloc failed");
     bufn = BUFINCR;
     for (i = 0; Ifuncs[i].name; i++)
         Efunction (Pfunction (Ifuncs[i].name, i), Ifuncs[i].name);
@@ -774,6 +774,6 @@
 static void growbufp (int newsize) {
     if (!(bufp = realloc (bufp,
             ((newsize + BUFINCR - 1) / BUFINCR) * BUFINCR * BUFSIZE)))
-        panic (POS, "growbufp", "buf realloc failed");
+        lefty_panic (POS, "growbufp", "buf realloc failed");
     bufn = ((newsize + BUFINCR - 1) / BUFINCR) * BUFINCR;
 }
diff -Nur ../graphviz-1.16.orig/lefty/lefty.c ./lefty/lefty.c
--- ../graphviz-1.16.orig/lefty/lefty.c	Fri Mar 19 20:50:26 2004
+++ ./lefty/lefty.c	Wed Sep 15 19:38:01 2004
@@ -486,7 +486,7 @@
             fp = stdin;
         else {
             if ((fp = fopen (argv[0], "r")) == NULL)
-                panic (POS, "main", "cannot open input file: %s", argv[0]);
+                lefty_panic (POS, "main", "cannot open input file: %s", argv[0]);
         }
         argv++, argc--;
     }
diff -Nur ../graphviz-1.16.orig/lefty/lex.c ./lefty/lex.c
--- ../graphviz-1.16.orig/lefty/lex.c	Fri Mar 19 20:50:26 2004
+++ ./lefty/lex.c	Wed Sep 15 19:38:19 2004
@@ -265,7 +265,7 @@
         return;
     }
     if (ucp == unitp)
-        panic (POS, "sungetc", "unget before start of string");
+        lefty_panic (POS, "sungetc", "unget before start of string");
     ucp--;
     if (*ucp == '\n')
         linenum--;
diff -Nur ../graphviz-1.16.orig/lefty/mem.c ./lefty/mem.c
--- ../graphviz-1.16.orig/lefty/mem.c	Fri Mar 19 20:50:26 2004
+++ ./lefty/mem.c	Wed Sep 15 19:38:46 2004
@@ -165,13 +165,13 @@
     void *p;
 
     if (!(p = malloc (size)))
-        panic (POS, "Marrayallocate", "cannot allocate array");
+        lefty_panic (POS, "Marrayallocate", "cannot allocate array");
     return p;
 }
 
 void *Marraygrow (void *p, long size) {
     if (!(p = realloc (p, size)))
-        panic (POS, "Marrayreallocate", "cannot re-allocate array");
+        lefty_panic (POS, "Marrayreallocate", "cannot re-allocate array");
     return p;
 }
 
@@ -193,9 +193,9 @@
         if (!arraymap[i].k)
             break;
     if (i == 100)
-        panic (POS, "Marrayalloc", "out of space in arraymap");
+        lefty_panic (POS, "Marrayalloc", "out of space in arraymap");
     if (!(arraymap[i].k = GlobalAlloc (GPTR, size)))
-        panic (POS, "Marrayallocate", "cannot allocate array");
+        lefty_panic (POS, "Marrayallocate", "cannot allocate array");
     arraymap[i].v = GlobalLock (arraymap[i].k);
     return arraymap[i].v;
 }
@@ -207,9 +207,9 @@
         if (arraymap[i].v == p)
             break;
     if (i == 100)
-        panic (POS, "Marraygrow", "cannot locate pointer");
+        lefty_panic (POS, "Marraygrow", "cannot locate pointer");
     if (!(arraymap[i].k = GlobalReAlloc (arraymap[i].k, size, GMEM_MOVEABLE)))
-        panic (POS, "Marraygrow", "cannot re-allocate array");
+        lefty_panic (POS, "Marraygrow", "cannot re-allocate array");
     arraymap[i].v = GlobalLock (arraymap[i].k);
     return arraymap[i].v;
 }
@@ -221,7 +221,7 @@
         if (arraymap[i].v == p)
             break;
     if (i == 100)
-        panic (POS, "Marrayfree", "cannot locate pointer");
+        lefty_panic (POS, "Marrayfree", "cannot locate pointer");
     GlobalUnlock (arraymap[i].k);
     GlobalFree (arraymap[i].k);
     arraymap[i].k = 0;
@@ -366,7 +366,7 @@
 
     if (size >= freen) {
         if (size > M_SIZEMAX)
-            panic (POS, "allocbuffer", "size is too big");
+            lefty_panic (POS, "allocbuffer", "size is too big");
         freearray = Marraygrow (freearray, (long) (size + 1) * FREESIZE);
         for (i = freen; i < size + 1; i++)
             freearray[i] = NULL;
@@ -375,9 +375,9 @@
     n = CALCNUM (size);
     if (!freearray[size]) {
         if (!(bp = malloc (BUFFERSIZE)))
-            panic (POS, "allocbuffer", "cannot allocate buffer struct");
+            lefty_panic (POS, "allocbuffer", "cannot allocate buffer struct");
         if (!(bp->data = malloc (size * M_UNITSIZE * n)))
-            panic (POS, "allocbuffer", "cannot allocate buffer");
+            lefty_panic (POS, "allocbuffer", "cannot allocate buffer");
         bp->next = bufferlist, bufferlist = bp;
         bytes = size * M_UNITSIZE;
         for (i = 0, p = bp->data; i < n - 1; i++, p += bytes) {
diff -Nur ../graphviz-1.16.orig/lefty/os/mswin32/io.c ./lefty/os/mswin32/io.c
--- ../graphviz-1.16.orig/lefty/os/mswin32/io.c	Fri Mar 19 20:50:27 2004
+++ ./lefty/os/mswin32/io.c	Wed Sep 15 19:39:01 2004
@@ -24,7 +24,7 @@
             iop[ioi].type = IO_FILE;
             iop[ioi].ifp = iop[ioi].ofp = fdopen (ioi, "r+");
             if (!(iop[ioi].buf = malloc (IOBUFSIZE)))
-                panic (POS, "IOinit", "malloc failed");
+                lefty_panic (POS, "IOinit", "malloc failed");
             iop[ioi].buf[0] = 0;
         }
 }
@@ -64,7 +64,7 @@
     p = &iop[i];
     p->type = type;
     if (!(p->buf = malloc (IOBUFSIZE)))
-        panic (POS, "IOopen", "malloc failed");
+        lefty_panic (POS, "IOopen", "malloc failed");
     p->buf[0] = 0;
     switch (type) {
     case IO_FILE:
@@ -234,20 +234,20 @@
     save[0] = GetStdHandle (STD_INPUT_HANDLE);
     save[1] = GetStdHandle (STD_OUTPUT_HANDLE);
     if (!SetStdHandle (STD_OUTPUT_HANDLE, p1[1]))
-        panic (POS, "pipeopen", "cannot set stdout handle");
+        lefty_panic (POS, "pipeopen", "cannot set stdout handle");
     if (!SetStdHandle (STD_INPUT_HANDLE, p2[0]))
-        panic (POS, "pipeopen", "cannot set stdin handle");
+        lefty_panic (POS, "pipeopen", "cannot set stdin handle");
     h = p1[0];
     if (!DuplicateHandle (GetCurrentProcess (), h,
             GetCurrentProcess (), &p1[0], 0, FALSE,
             DUPLICATE_SAME_ACCESS))
-        panic (POS, "pipeopen", "cannot dup input handle");
+        lefty_panic (POS, "pipeopen", "cannot dup input handle");
     CloseHandle (h);
     h = p2[1];
     if (!DuplicateHandle (GetCurrentProcess(), h,
             GetCurrentProcess(), &p2[1], 0, FALSE,
             DUPLICATE_SAME_ACCESS))
-        panic (POS, "pipeopen", "cannot dup output handle");
+        lefty_panic (POS, "pipeopen", "cannot dup output handle");
     CloseHandle (h);
     sinfo.cb = sizeof (STARTUPINFO);
     sinfo.lpReserved = NULL;
@@ -261,12 +261,12 @@
     sinfo.wShowWindow = SW_HIDE;
     if (!CreateProcess (NULL, cmd, NULL, NULL, TRUE, 0, NULL,
             NULL, &sinfo, &pinfo))
-        panic (POS, "pipeopen", "cannot create child process");
+        lefty_panic (POS, "pipeopen", "cannot create child process");
     *pidp = pinfo.hProcess;
     if (!SetStdHandle (STD_INPUT_HANDLE, save[0]))
-        panic (POS, "pipeopen", "cannot restore stdin");
+        lefty_panic (POS, "pipeopen", "cannot restore stdin");
     if (!SetStdHandle (STD_OUTPUT_HANDLE, save[1]))
-        panic (POS, "pipeopen", "cannot restore stdout");
+        lefty_panic (POS, "pipeopen", "cannot restore stdout");
     CloseHandle (p1[1]);
     CloseHandle (p2[0]);
     *ifp = p1[0], *ofp = p2[1];
diff -Nur ../graphviz-1.16.orig/lefty/str.c ./lefty/str.c
--- ../graphviz-1.16.orig/lefty/str.c	Mon Apr 19 19:25:36 2004
+++ ./lefty/str.c	Wed Sep 15 19:39:26 2004
@@ -38,7 +38,7 @@
 
 void Sinit (void) {
     if (!(sbufp = malloc (SBUFINCR * SBUFSIZE)))
-        panic (POS, "Sinit", "sbuf malloc failed");
+        lefty_panic (POS, "Sinit", "sbuf malloc failed");
     sbufi = 0;
     sbufn = SBUFINCR;
     indent = 0;
@@ -436,7 +436,7 @@
         }
         break;
     default:
-       panic (POS, "codestr", "bad object type: %d", ct);
+       lefty_panic (POS, "codestr", "bad object type: %d", ct);
     }
 }
 
@@ -490,7 +490,7 @@
 
     nsize = ((sbufn + ssize) / SBUFINCR + 1) * SBUFINCR;
     if (!(sbufp = realloc (sbufp, nsize * SBUFSIZE)))
-        panic (POS, "growsbuf", "sbuf realloc failed");
+        lefty_panic (POS, "growsbuf", "sbuf realloc failed");
     sbufn = nsize;
 }
 
@@ -499,7 +499,7 @@
 
     sbufp[sbufi++] = '\000';
     if (!(newsbufp = malloc (sbufi * sizeof (char))))
-        panic (POS, "copysbuf", "newsbuf malloc failed");
+        lefty_panic (POS, "copysbuf", "newsbuf malloc failed");
     strcpy (newsbufp, sbufp);
     return newsbufp;
 }
diff -Nur ../graphviz-1.16.orig/lefty/tbl.c ./lefty/tbl.c
--- ../graphviz-1.16.orig/lefty/tbl.c	Fri Aug  6 22:40:21 2004
+++ ./lefty/tbl.c	Wed Sep 15 19:39:44 2004
@@ -208,7 +208,7 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinsi", "insert attempted on non-table");
+        lefty_panic (POS, "Tinsi", "insert attempted on non-table");
     tm = Mpushmark (to);
     if (vo)
         Mpushmark (vo);
@@ -221,7 +221,7 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinsr", "insert attempted on non-table");
+        lefty_panic (POS, "Tinsr", "insert attempted on non-table");
     tm = Mpushmark (to);
     if (vo)
         Mpushmark (vo);
@@ -234,7 +234,7 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinss", "insert attempted on non-table");
+        lefty_panic (POS, "Tinss", "insert attempted on non-table");
     tm = Mpushmark (to);
     if (vo)
         Mpushmark (vo);
@@ -246,9 +246,9 @@
     long tm;
 
     if (!to || !T_ISTABLE (to))
-        panic (POS, "Tinso", "insert attempted on non-table");
+        lefty_panic (POS, "Tinso", "insert attempted on non-table");
     if (!ko || !(T_ISINTEGER (ko) || T_ISREAL (ko) || T_ISSTRING (ko)))
-        panic (POS, "Tinso", "bad key");
+        lefty_panic (POS, "Tinso", "bad key");
     tm = Mpushmark (to);
     Mpushmark (ko);
     if (vo)
@@ -261,7 +261,7 @@
     if (!to)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfindi", "find attempted on non-table");
+        lefty_panic (POS, "Tfindi", "find attempted on non-table");
     keyi.i = ik;
     return find (to, &keyi, NULL);
 }
@@ -270,7 +270,7 @@
     if (!to)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfindr", "find attempted on non-table");
+        lefty_panic (POS, "Tfindr", "find attempted on non-table");
     keyr.d = rk;
     return find (to, &keyr, NULL);
 }
@@ -279,7 +279,7 @@
     if (!to)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfinds", "find attempted on non-table");
+        lefty_panic (POS, "Tfinds", "find attempted on non-table");
     return find (to, &keys, sk);
 }
 
@@ -287,9 +287,9 @@
     if (!to || !ko)
         return NULL;
     if (!T_ISTABLE (to))
-        panic (POS, "Tfindo", "find attempted on non-table");
+        lefty_panic (POS, "Tfindo", "find attempted on non-table");
     if (!(T_ISINTEGER (ko) || T_ISREAL (ko) || T_ISSTRING (ko)))
-        panic (POS, "Tfindo", "bad key");
+        lefty_panic (POS, "Tfindo", "bad key");
     return find (to, ko, NULL);
 }
 
@@ -297,7 +297,7 @@
     if (!to)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdeli", "delete attempted on non-table");
+        lefty_panic (POS, "Tdeli", "delete attempted on non-table");
     keyi.i = ik;
     delete (to, &keyi, NULL);
 }
@@ -306,7 +306,7 @@
     if (!to)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdelr", "delete attempted on non-table");
+        lefty_panic (POS, "Tdelr", "delete attempted on non-table");
     keyr.d = rk;
     delete (to, &keyr, NULL);
 }
@@ -315,7 +315,7 @@
     if (!to)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdels", "delete attempted on non-table");
+        lefty_panic (POS, "Tdels", "delete attempted on non-table");
     delete (to, &keys, sk);
 }
 
@@ -323,9 +323,9 @@
     if (!to || !ko)
         return;
     if (!T_ISTABLE (to))
-        panic (POS, "Tdelo", "delete attempted on non-table");
+        lefty_panic (POS, "Tdelo", "delete attempted on non-table");
     if (!(T_ISINTEGER (ko) || T_ISREAL (ko) || T_ISSTRING (ko)))
-        panic (POS, "Tdelo", "bad key");
+        lefty_panic (POS, "Tdelo", "bad key");
     delete (to, ko, NULL);
 }
 
@@ -650,7 +650,7 @@
 
     lp = &map.list[(unsigned long) fmo % MAPLISTN];
     if (!(cep = Mallocate (MAPENTRYSIZE)))
-        panic (POS, "mapinsert", "cannot allocate mapentry");
+        lefty_panic (POS, "mapinsert", "cannot allocate mapentry");
     cep->fmo = fmo, cep->too = too;
     cep->next = *lp, *lp = cep;
 }
diff -Nur ../graphviz-1.16.orig/lefty/txtview.c ./lefty/txtview.c
--- ../graphviz-1.16.orig/lefty/txtview.c	Thu Jul 15 17:01:00 2004
+++ ./lefty/txtview.c	Wed Sep 15 19:40:07 2004
@@ -226,7 +226,7 @@
     Gawsetmode (&Gwidgets[listwi], FALSE);
 
     if (!(txtroot = malloc (sizeof (txtnode_t))))
-        panic (POS, "TXTinit", "txtroot malloc failed");
+        lefty_panic (POS, "TXTinit", "txtroot malloc failed");
     *txtroot = defnode;
     txtroot->mode = TXT_FULL;
     txtroot->vo = root;
@@ -394,7 +394,7 @@
     pnode->u.f.t.n = ((Ttable_t *) pnode->vo)->n;
     if (!(pnode->u.f.t.list =
             malloc (max (pnode->u.f.t.n, 1) * sizeof (txtnode_t))))
-        panic (POS, "buildlist", "list malloc failed");
+        lefty_panic (POS, "buildlist", "list malloc failed");
 
     for (cnode = &pnode->u.f.t.list[0], Tgetfirst (pnode->vo, &tkvi);
             tkvi.kvp; Tgetnext (&tkvi)) {
@@ -429,7 +429,7 @@
     pnode->u.f.t.n = ((Ttable_t *) pnode->vo)->n;
     if (!(pnode->u.f.t.list =
             malloc (max (pnode->u.f.t.n, 1) * sizeof (txtnode_t))))
-        panic (POS, "rebuildlist", "list malloc failed");
+        lefty_panic (POS, "rebuildlist", "list malloc failed");
 
     for (cnode = &pnode->u.f.t.list[0], Tgetfirst (pnode->vo, &tkvi);
             tkvi.kvp; Tgetnext (&tkvi)) {
diff -Nur ../graphviz-1.16.orig/lefty/ws/mswin32/garray.c ./lefty/ws/mswin32/garray.c
--- ../graphviz-1.16.orig/lefty/ws/mswin32/garray.c	Fri Mar 19 20:50:27 2004
+++ ./lefty/ws/mswin32/garray.c	Wed Sep 15 19:40:43 2004
@@ -223,7 +223,7 @@
 void Gawinitialize (Gwidget_t *widget, int mode) {
     WAU->data.type = mode;
     if (!(WAU->data.carray = Marrayalloc ((long) AWCARRAYINCR * AWCARRAYSIZE)))
-        panic (POS, "Gawinitialize", "cannot allocate carray");
+        lefty_panic (POS, "Gawinitialize", "cannot allocate carray");
     WAU->data.cn = AWCARRAYINCR;
     WAU->data.cj = 0;
     WAU->data.batchmode = FALSE;
diff -Nur ../graphviz-1.16.orig/lefty/ws/mswin32/gcommon.c ./lefty/ws/mswin32/gcommon.c
--- ../graphviz-1.16.orig/lefty/ws/mswin32/gcommon.c	Fri Mar 19 20:50:27 2004
+++ ./lefty/ws/mswin32/gcommon.c	Wed Sep 15 19:41:07 2004
@@ -55,7 +55,7 @@
         wc.lpszMenuName = 0;
         wc.lpszClassName = "LeftyClass";
         if (!(rtn = RegisterClass (&wc)))
-            panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
+            lefty_panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
 
         wc.style = NULL;
         wc.lpfnWndProc = ArrayWndProc;
@@ -68,7 +68,7 @@
         wc.lpszMenuName = 0;
         wc.lpszClassName = "ArrayClass";
         if (!(rtn = RegisterClass (&wc)))
-            panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
+            lefty_panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
 
         wc.style = CS_OWNDC;
         wc.lpfnWndProc = CanvasWndProc;
@@ -81,7 +81,7 @@
         wc.lpszMenuName = 0;
         wc.lpszClassName = "CanvasClass";
         if (!(rtn = RegisterClass (&wc)))
-            panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
+            lefty_panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
 
         wc.style = NULL;
         wc.lpfnWndProc = ScrollWndProc;
@@ -94,7 +94,7 @@
         wc.lpszMenuName = 0;
         wc.lpszClassName = "ScrollClass";
         if (!(rtn = RegisterClass (&wc)))
-            panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
+            lefty_panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
 
         wc.style = NULL;
         wc.lpfnWndProc = LabelWndProc;
@@ -107,7 +107,7 @@
         wc.lpszMenuName = 0;
         wc.lpszClassName = "LabelClass";
         if (!(rtn = RegisterClass (&wc)))
-            panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
+            lefty_panic (POS, "GXinit", "register class rtn = %d", (int) rtn);
     }
     if (getenv ("LEFTY3BMOUSE"))
         twobmouse = FALSE;
@@ -118,7 +118,7 @@
     deffont = GetStockObject (SYSTEM_FONT);
 #ifndef FEATURE_MS
     if (!(Gxfp = fopen ("/dev/windows", "r")))
-        panic (POS, "GXinit", "cannot open windows device");
+        lefty_panic (POS, "GXinit", "cannot open windows device");
     Gxfd = fileno (Gxfp);
 #endif
     Gpopdownflag = FALSE;
diff -Nur ../graphviz-1.16.orig/lefty/ws/x11/gtext.c ./lefty/ws/x11/gtext.c
--- ../graphviz-1.16.orig/lefty/ws/x11/gtext.c	Fri Mar 19 20:50:28 2004
+++ ./lefty/ws/x11/gtext.c	Wed Sep 15 19:41:31 2004
@@ -245,7 +245,7 @@
             else if (mode == XawtextRead)
                 attrp[ai].u.t = "output";
             else {
-                panic (POS, "GTgetwidgetattr", "unexpected text mode");
+                lefty_panic (POS, "GTgetwidgetattr", "unexpected text mode");
                 return -1;
             }
             break;
diff -Nur ../graphviz-1.16.orig/lneato/mswin32/lneato.c ./lneato/mswin32/lneato.c
--- ../graphviz-1.16.orig/lneato/mswin32/lneato.c	Thu Apr 29 14:01:02 2004
+++ ./lneato/mswin32/lneato.c	Wed Sep 15 19:42:37 2004
@@ -17,7 +17,7 @@
 static char * NEAR shellpath;
 
 static char *buildpath (char *);
-static void panic (char *, int, char *, char *, ...);
+static void dotty_panic (char *, int, char *, char *, ...);
 
 static char *prolog =
 " -e \"load('dotty.lefty');dotty.protogt.lserver='neato';dotty.protogt.graph.type = 'graph';";
@@ -83,7 +83,7 @@
     return NULL;
 }
 
-static void panic (char *file, int line, char *func, char *fmt, ...) {
+static void dotty_panic (char *file, int line, char *func, char *fmt, ...) {
     va_list args;
 
     va_start(args, fmt);
