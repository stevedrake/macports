--- kdelibs-4.6.0/kinit/kinit.cpp.wee	2011-01-28 11:33:58.000000000 -0500
+++ kdelibs-4.6.0/kinit/kinit.cpp	2011-01-28 11:34:54.000000000 -0500
@@ -537,6 +537,14 @@
       init_startup_info( startup_id, name, envc, envs );
 #endif
 
+  // Don't run this inside the child process, it crashes on OS/X 10.6
+  const QByteArray docPath = QFile::encodeName(KGlobalSettings::documentPath());
+  const QString helperpath = s_instance->dirs()->findExe(QString::fromLatin1("kdeinit4_helper"));
+#ifdef Q_WS_MAC
+  const QString bundlepath = s_instance->dirs()->findExe(QFile::decodeName(execpath));
+  const QString argvexe = s_instance->dirs()->findExe(QString::fromLatin1(_name));
+#endif
+
   d.errorMsg = 0;
   d.fork = fork();
   switch(d.fork) {
@@ -565,7 +573,6 @@
          // on Maemo5, documentPath() is on the SD card, setting it as working directory would block
          // USB mass storage access
 #ifndef Q_WS_MAEMO_5
-         const QByteArray docPath = QFile::encodeName(KGlobalSettings::documentPath());
          (void)chdir(docPath.constData());
 #endif
      }
@@ -602,10 +609,9 @@
      {
        int r;
        QByteArray procTitle;
-       d.argv = (char **) malloc(sizeof(char *) * (argc+1));
+       d.argv = (char **) malloc(sizeof(char *) * (argc+2));
        d.argv[0] = (char *) _name;
 #ifdef Q_WS_MAC
-       QString argvexe = s_instance->dirs()->findExe(QString::fromLatin1(d.argv[0]));
        if (!argvexe.isEmpty()) {
           QByteArray cstr = argvexe.toLocal8Bit();
           kDebug(7016) << "kdeinit4: launch() setting argv: " << cstr.data();
@@ -681,7 +687,6 @@
 
         QByteArray executable = execpath;
 #ifdef Q_WS_MAC
-        QString bundlepath = s_instance->dirs()->findExe(QFile::decodeName(executable));
         if (!bundlepath.isEmpty())
            executable = QFile::encodeName(bundlepath);
 #endif
@@ -695,25 +700,13 @@
         exit(255);
      }
 
-     void * sym = l.resolve( "kdeinitmain");
-     if (!sym )
-        {
-        sym = l.resolve( "kdemain" );
-        if ( !sym )
-           {
-            QString ltdlError = l.errorString();
-            fprintf(stderr, "Could not find kdemain: %s\n", qPrintable(ltdlError) );
-              QString errorMsg = i18n("Could not find 'kdemain' in '%1'.\n%2",
-                                      libpath, ltdlError);
-              exitWithErrorMsg(errorMsg);
-           }
-        }
-
-     d.result = 0; // Success
+     d.result = 2; // Try execing
      write(d.fd[1], &d.result, 1);
-     close(d.fd[1]);
 
-     d.func = (int (*)(int, char *[])) sym;
+     // We set the close on exec flag.
+     // Closing of d.fd[1] indicates that the execvp succeeded!
+     fcntl(d.fd[1], F_SETFD, FD_CLOEXEC);
+
      if (d.debug_wait)
      {
         fprintf(stderr, "kdeinit4: Suspending process\n"
@@ -727,8 +720,18 @@
         setup_tty( tty );
      }
 
-     exit( d.func(argc, d.argv)); /* Launch! */
+     QByteArray helperexe = QFile::encodeName(helperpath);
+     QByteArray libpathbytes = QFile::encodeName(libpath);
+     d.argv[argc] = libpathbytes.data();
+     d.argv[argc+1] = 0;
+
+     if (!helperexe.isEmpty())
+        execvp(helperexe, d.argv);
 
+     d.result = 1; // Error
+     write(d.fd[1], &d.result, 1);
+     close(d.fd[1]);
+     exit(255);
      break;
   }
   default:
