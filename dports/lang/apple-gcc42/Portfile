# $Id$

PortSystem 1.0
PortGroup select 1.0

name			apple-gcc42
version			5666.3
revision		1
categories		lang
platforms		darwin
maintainers		jeremyhu openmaintainer
description		Apple's version of gcc 4.2
long_description	Apple's version of the GNU compiler collection, \
			version 4.2. Supports C, Objective-C, anc C++

homepage		http://opensource.apple.com/
master_sites		http://opensource.apple.com/tarballs/gcc/
distname		gcc-${version}
checksums               md5     188c7769db5c898922b0976fab148a63 \
                        sha1    292a0cfcfdc061cb083658efd9a3812a120a1f50 \
                        rmd160  a01d000f89c0e89dd0079dcd202bba7629ba78dc

depends_run             port:gcc_select

use_configure no

select.group    gcc
select.file     ${filespath}/${name}

set srcroot ${worksrcpath}
set objroot ${workpath}/objroot
set symroot ${workpath}/symroot

# system-libstdc++.patch   : Adjust build system to use libstdc++ from / since we don't have it in MacPorts
# no-rm-system.patch       : Comment out a rogue rm /usr/... in the build script
# prefix.patch             : Fix hardcoded instances of /usr
# suffix.patch             : Make binaries end in -apple-4.2
# stage1-cc.patch          : Use $CC for our stage1 compiler
# makeinfo.patch           : Fix version detection for makeinfo in configure scripts
# werror-*.patch           : Fix compilation errors when building for x86_64
patchfiles \
	system-libstdc++.patch \
	no-rm-system.patch \
	prefix.patch \
	suffix.patch \
	makeinfo.patch \
	stage1-cc.patch \
	werror-c-incpath.patch \
	werror-local-alloc.patch

post-patch {
	# Install documentation in a MacPorts location
	reinplace "/^HTMLDIR=/ s:=.*$:=\"${prefix}/share/doc/${name}/html\":" ${worksrcpath}/build_gcc

	# arch returns i386 even when we want x86_64
	reinplace "/^BUILD=/ s:arch:echo ${build_arch}:" ${worksrcpath}/build_gcc

	# ppc not tested, but it should hopefully work...
	if {${build_arch} == "ppc"} {
		reinplace "/^PPC_SYSROOT=/ s:=.*$:=/:" ${worksrcpath}/build_gcc
	} elseif {[file exists ${developer_dir}/SDKs/MacOSX10.5.sdk]} {
		reinplace "/^PPC_SYSROOT=/ s:=.*$:=${developer_dir}/SDKs/MacOSX10.5.sdk:" ${worksrcpath}/build_gcc
	} elseif {[file exists ${developer_dir}/SDKs/MacOSX10.4u.sdk]} {
		reinplace "/^PPC_SYSROOT=/ s:=.*$:=${developer_dir}/SDKs/MacOSX10.4u.sdk:" ${worksrcpath}/build_gcc
	} elseif {[file exists ${developer_dir}/SDKs/MacOSX10.3.9.sdk]} {
		reinplace "/^PPC_SYSROOT=/ s:=.*$:=${developer_dir}/SDKs/MacOSX10.3.9.sdk:" ${worksrcpath}/build_gcc
	}

	# Disable -Werror for our bootstrap gcc
	if {${configure.compiler} == "clang" ||
	    ${configure.compiler} == "macports-clang"} {
		reinplace "s:--enable-werror : :" ${worksrcpath}/build_gcc
	}
}

# TODO: Use MacPorts dependencies
build.env \
	LIBRARY_PATH="/usr/lib" \
	CPATH="/usr/include" \
	PATH="/bin:/usr/bin:/sbin:/usr/sbin"

#	MAKEINFO=${prefix}/bin/makeinfo

build.args-append \
	CC="${configure.cc} -std=gnu89" \
	PREFIX="${prefix}" \
	SRCROOT="${srcroot}" \
	OBJROOT="${objroot}" \
	SYMROOT="${symroot}" \
	DSTROOT="${destroot}" \
	RC_NONARCH_CFLAGS="-pipe -std=gnu89" \
	RC_OS="macos"

if {[variant_isset universal]} {
	build.args-append \
		RC_ARCHS="${universal_archs}"
} else {
	build.args-append \
		RC_ARCHS="${build_arch}"
}

set build_targets {i386}

if {[file exists ${developer_dir}/SDKs/MacOSX10.3.9.sdk] ||
    [file exists ${developer_dir}/SDKs/MacOSX10.4u.sdk] ||
    [file exists ${developer_dir}/SDKs/MacOSX10.5.sdk] ||
    ${build_arch} == "ppc"} {
	lappend build_targets ppc
}

# TODO: arm?

build.args-append \
	TARGETS="${build_targets}"

# Yes, use "install" ... the build system does make/install in one go
# TODO: split the build_gcc script into two to better match MacPorts
build.target install
destroot {}

livecheck.type		regex
livecheck.url		[lindex ${master_sites} 0]
livecheck.regex		gcc-(\\d+(?:\\.\\d+)*)\\.tar
