Index: sid/srfi/srfi-60.c
===================================================================
--- sid.orig/srfi/srfi-60.c	2006-11-30 23:40:16.000000000 -0800
+++ ./srfi/srfi-60.c	2006-11-30 23:40:18.000000000 -0800
@@ -59,7 +59,7 @@
 
 
 SCM_DEFINE (scm_srfi60_copy_bit, "copy-bit", 3, 0, 0,
-            (SCM index, SCM n, SCM bit),
+            (SCM index, SCM n, SCM newbit),
 	    "Return @var{n} with the bit at @var{index} set according to\n"
 	    "@var{newbit}.  @var{newbit} should be @code{#t} to set the bit\n"
 	    "to 1, or @code{#f} to set it to 0.  Bits other than at\n"
@@ -75,7 +75,7 @@
   int bb;
 
   ii = scm_to_ulong (index);
-  bb = scm_to_bool (bit);
+  bb = scm_to_bool (newbit);
 
   if (SCM_I_INUMP (n))
     {
@@ -86,7 +86,7 @@
       if (ii < SCM_LONG_BIT-1)
         {
           nn &= ~(1L << ii);  /* zap bit at index */
-          nn |= (bb << ii);   /* insert desired bit */
+          nn |= (((unsigned long) bb) << ii);   /* insert desired bit */
           return scm_from_long (nn);
         }
       else
Index: sid/test-suite/tests/numbers.test
===================================================================
--- sid.orig/test-suite/tests/numbers.test	2006-11-30 23:40:16.000000000 -0800
+++ ./test-suite/tests/numbers.test	2006-12-01 18:33:27.000000000 -0800
@@ -2243,7 +2243,7 @@
 
     (with-test-prefix "big / real"
       (pass-if (nan? (max big*5 +nan.0)))
-      (pass-if (= big*5  (max big*5 -inf.0)))
+      (pass-if (eqv? (exact->inexact big*5)  (max big*5 -inf.0)))
       (pass-if (= +inf.0 (max big*5 +inf.0)))
       (pass-if (= 1.0 (max (- big*5) 1.0)))
       (pass-if (inexact? (max big*5 1.0)))
@@ -2252,7 +2252,7 @@
     (with-test-prefix "real / big"
       (pass-if (nan? (max +nan.0 big*5)))
       (pass-if (= +inf.0 (max +inf.0 big*5)))
-      (pass-if (= big*5  (max -inf.0 big*5)))
+      (pass-if (eqv? (exact->inexact big*5)  (max -inf.0 big*5)))
       (pass-if (= 1.0 (max 1.0 (- big*5))))
       (pass-if (inexact? (max 1.0 big*5)))
       (pass-if (= (exact->inexact big*5) (max 1.0 big*5))))
@@ -2370,7 +2370,7 @@
 
     (with-test-prefix "big / real"
       (pass-if (nan? (min big*5 +nan.0)))
-      (pass-if (= big*5  (min big*5  +inf.0)))
+      (pass-if (eqv? (exact->inexact big*5)  (min big*5  +inf.0)))
       (pass-if (= -inf.0 (min big*5  -inf.0)))
       (pass-if (= 1.0 (min big*5 1.0)))
       (pass-if (inexact? (min (- big*5) 1.0)))
@@ -2378,7 +2378,7 @@
 
     (with-test-prefix "real / big"
       (pass-if (nan? (min +nan.0 big*5)))
-      (pass-if (= big*5  (min +inf.0 big*5)))
+      (pass-if (eqv? (exact->inexact big*5)  (min +inf.0 big*5)))
       (pass-if (= -inf.0 (min -inf.0 big*5)))
       (pass-if (= 1.0 (min 1.0 big*5)))
       (pass-if (inexact? (min 1.0 (- big*5))))
Index: sid/test-suite/standalone/test-conversion.c
===================================================================
--- sid.orig/test-suite/standalone/test-conversion.c	2006-12-01 18:18:40.000000000 -0800
+++ ./test-suite/standalone/test-conversion.c	2006-12-01 18:30:47.000000000 -0800
@@ -29,7 +29,7 @@
   if (r != result)
     {
       fprintf (stderr, "fail: scm_is_signed_integer (%s, %Ld, %Ld) == %d\n",
-	       str, min, max, result);
+               str, (long long) min, (long long) max, result);
       exit (1);
     }
 }
@@ -114,7 +114,9 @@
   if (r != result)
     {
       fprintf (stderr, "fail: scm_is_unsigned_integer (%s, %Lu, %Lu) == %d\n",
-	       str, min, max, result);
+               str,
+               (unsigned long long) min, (unsigned long long) max,
+               result);
       exit (1);
     }
 }
@@ -234,7 +236,7 @@
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_signed_int (%s, %Ld, %Ld) -> out of range\n",
-		   str, min, max);
+                   str, (long long) min, (long long) max);
 	  exit (1);
 	}
     }
@@ -246,7 +248,7 @@
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_signed_int (%s, %Ld, %Ld) -> wrong type\n",
-		   str, min, max);
+                   str, (long long) min, (long long) max);
 	  exit (1);
 	}
     }
@@ -259,7 +261,7 @@
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_signed_int (%s, %Ld, %Ld) = %Ld\n",
-		   str, min, max, result);
+                   str, (long long) min, (long long) max, (long long) result);
 	  exit (1);
 	}
     }
@@ -366,7 +368,7 @@
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_unsigned_int (%s, %Lu, %Lu) -> out of range\n",
-		   str, min, max);
+                   str, (unsigned long long) min, (unsigned long long) max);
 	  exit (1);
 	}
     }
@@ -378,7 +380,7 @@
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_unsigned_int (%s, %Lu, %Lu) -> wrong type\n",
-		   str, min, max);
+                   str, (unsigned long long) min, (unsigned long long) max);
 	  exit (1);
 	}
     }
@@ -391,7 +393,9 @@
 	{
 	  fprintf (stderr,
 		   "fail: scm_to_unsigned_int (%s, %Lu, %Lu) == %Lu\n",
-		   str, min, max, result);
+                   str,
+                   (unsigned long long) min, (unsigned long long) max,
+                   (unsigned long long) result);
 	  exit (1);
 	}
     }
@@ -447,7 +451,7 @@
   if (scm_is_false (scm_equal_p (scm_from_signed_integer (val), res)))
     {
       fprintf (stderr, "fail: scm_from_signed_integer (%Ld) == %s\n",
-	       val, result);
+               (long long) val, result);
       exit (1);
     }
 }
@@ -479,7 +483,7 @@
   if (scm_is_false (scm_equal_p (scm_from_unsigned_integer (val), res)))
     {
       fprintf (stderr, "fail: scm_from_unsigned_integer (%Lu) == %s\n",
-	       val, result);
+               (unsigned long long) val, result);
       exit (1);
     }
 }
@@ -507,7 +511,8 @@
 
   if (scm_is_false (scm_equal_p (n, r)))
     {
-      fprintf (stderr, "fail: %s (%Ld) == %s\n", func, c_n, result);
+      fprintf (stderr, "fail: %s (%Ld) == %s\n",
+               func, (long long) c_n, result);
       exit (1);
     }
 }
@@ -521,7 +526,8 @@
 
   if (scm_is_false (scm_equal_p (n, r)))
     {
-      fprintf (stderr, "fail: %s (%Lu) == %s\n", func, c_n, result);
+      fprintf (stderr, "fail: %s (%Lu) == %s\n",
+               func, (unsigned long long) c_n, result);
       exit (1);
     }
 }
@@ -580,7 +586,8 @@
 	  || data.result != result)
 	{
 	  fprintf (stderr,
-		   "fail: %s (%s) = %Ld\n", func_name, str, result);
+                   "fail: %s (%s) = %Ld\n",
+                   func_name, str, (long long) result);
 	  exit (1);
 	}
     }
@@ -638,7 +645,8 @@
 	  || data.result != result)
 	{
 	  fprintf (stderr,
-		   "fail: %s (%s) = %Ld\n", func_name, str, result);
+                   "fail: %s (%s) = %Lu\n",
+                   func_name, str, (unsigned long long) result);
 	  exit (1);
 	}
     }
