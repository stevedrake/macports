# $Id$

PortSystem 1.0

name                    llvm
version                 2.8
categories              lang
platforms               darwin
license                 UIUC/NCSA
maintainers             erickt mfeiri
description             llvm is a next generation compiler infrastructure
long_description        The LLVM Core libraries provide a modern source- and \
                        target-independent optimizer, along with code \
                        generation support for many popular CPUs (as well as \
                        some less common ones!) These libraries are built \
                        around a well specified code representation known as \
                        the LLVM intermediate representation ("LLVM IR").

homepage                http://llvm.org/
master_sites            ${homepage}releases/${version}/

extract.suffix          .tgz

checksums               ${distname}${extract.suffix} \
                            md5     6b13c504c718385fa0a4d375275e7a05 \
                            sha1    10d8957efac1d970fbc8264b28855250e9ce9eb1 \
                            rmd160  ac54bd88d4fb624833cce86a1cb7f6f9cd2bc106 \
                        clang-2.8.tgz \
                            md5     10e14c901fc3728eecbd5b829e011b59 \
                            sha1    94977c84ce136307dbbeade95e67bfe3c25161ff \
                            rmd160  f00956b6de29cc09f3992aeabd140f2189c6cf39

depends_lib             port:libffi
depends_run             bin:perl:perl5

default_variants        +clang
universal_variant       no

configure.dir           ${workpath}/build
build.dir               ${configure.dir}
destroot.dir            ${configure.dir}

build.env-append        REQUIRE_RTTI=1

post-extract {
    file mkdir ${configure.dir}
}

patchfiles              patch-Makefile.config.in.diff \
                        patch-Makefile.ocaml.diff

configure.cppflags
configure.ldflags
configure.cmd           ${worksrcpath}/configure
configure.args          --enable-optimized --enable-jit \
                        --enable-bindings=none --enable-libffi \
                        --disable-assertions --enable-shared

platform darwin {
    if {${build_arch} == "i386" } {
        configure.pre_args-append --build=i686-apple-darwin${os.major}
    } else {
        configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
    }
}

post-destroot {
    file mkdir ${destroot}${prefix}/lib/llvm
    file mkdir ${destroot}${prefix}/lib/llvm/src
    file mkdir ${destroot}${prefix}/lib/llvm/obj

    file copy ${worksrcpath}/include ${destroot}${prefix}/lib/llvm/src
    file copy ${configure.dir}/include ${destroot}${prefix}/lib/llvm/obj
    file copy ${configure.dir}/Release ${destroot}${prefix}/lib/llvm/obj

    file copy ${configure.dir}/Makefile.config ${destroot}${prefix}/lib/llvm/obj
    
    system "install_name_tool -id ${prefix}/lib/libLLVMHello.dylib ${destroot}${prefix}/lib/libLLVMHello.dylib"
    system "install_name_tool -id ${prefix}/lib/libprofile_rt.dylib ${destroot}${prefix}/lib/libprofile_rt.dylib"
    
    reinplace "s|${worksrcpath}|${prefix}/lib/llvm/src|g"       ${destroot}${prefix}/bin/llvm-config \
                                                                ${destroot}${prefix}/lib/llvm/obj/Release/bin/llvm-config
    reinplace "s|${configure.dir}|${prefix}/lib/llvm/obj|g"     ${destroot}${prefix}/bin/llvm-config \
                                                                ${destroot}${prefix}/lib/llvm/obj/Release/bin/llvm-config

    fs-traverse item ${destroot} {
        if {[file isfile ${item}] && ".dir" == [file tail ${item}]} {
            delete ${item}
        }
    }
}

variant ocaml description {Enable generation of OCaml binding} {
    depends_lib-append   port:ocaml

    configure.args-delete --enable-bindings=none
    configure.args-append --enable-bindings=ocaml

    destroot.args-append  OVERRIDE_libdir=${prefix}/lib
}

variant disable_pic description {Disable generation of position independent code} {
    configure.args-append --disable-pic
}

variant host_only description {Disables non-host targets} {
    configure.args-append --enable-targets=host-only
}

variant clang description {Install clang frontend} {
    distfiles-append    clang-${version}${extract.suffix}
    post-extract {
        move ${workpath}/clang-${version} ${worksrcpath}/tools/clang
    }
}

livecheck.type  regex
livecheck.url   ${homepage}releases/
livecheck.regex {'(\d+\.\d+)'}
