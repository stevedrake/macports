# $Id$

PortSystem              1.0

name                    php5
epoch                   1
version                 5.3.0
revision                2
set major               [lindex [split ${version} .] 0]
set my_name             php${major}
dist_subdir             ${my_name}
categories              lang php www
maintainers             ryandesign jwa
homepage                http://www.php.net/
master_sites            php
distname                php-${version}
use_bzip2               yes
platforms               darwin freebsd
use_parallel_build      yes

description \
    PHP: Hypertext Preprocessor

long_description \
    PHP is a widely-used general-purpose scripting language \
    that is especially suited for developing web sites, but can also \
    be used for command-line scripting.

checksums \
    md5     846760cd655c98dfd86d6d97c3d964b0 \
    sha1    934700941d216c453376e3bf24347041cf12c6dc \
    rmd160  9a71b74052b0ca515f2ddf95c051b47a73d33f44

depends_build \
    port:pkgconfig \
    port:autoconf213

depends_lib \
    path:bin/gsed:gsed \
    port:libtool \
    port:libxml2 \
    port:bzip2 \
    port:mhash \
    port:pcre \
    port:readline \
    port:zlib

patchfiles \
    patch-ext-mysqlnd-mysqlnd_portability.h.diff \
    patch-bind.diff

use_autoconf            yes
autoconf.cmd            ${prefix}/bin/autoconf213

set phpinidir           ${prefix}/etc/${my_name}
set extraphpinidir      ${prefix}/var/db/${my_name}

destroot.keepdirs       ${extraphpinidir}

configure.args \
    --mandir=${prefix}/share/man \
    --infodir=${prefix}/share/info \
    --with-config-file-path=${phpinidir} \
    --with-config-file-scan-dir=${extraphpinidir} \
    --disable-all \
    --enable-bcmath \
    --enable-ctype \
    --enable-dba \
    --enable-dom \
    --enable-fileinfo \
    --enable-filter \
    --enable-hash \
    --enable-json \
    --enable-libxml \
    --enable-pdo \
    --enable-phar \
    --enable-session \
    --enable-simplexml \
    --enable-tokenizer \
    --enable-xml \
    --enable-xmlreader \
    --enable-xmlwriter \
    --with-bz2=${prefix} \
    --with-mhash=${prefix} \
    --with-pcre-regex=${prefix} \
    --with-readline=${prefix} \
    --with-libxml-dir=${prefix} \
    --with-zlib=${prefix} \
    --without-pear \
    --disable-cgi

# php5-mysql +mysqlnd needs mysqlnd support compiled into php
configure.env-append    PHP_MYSQLND_ENABLED=yes

platform darwin 7 {
    configure.env-append \
        LIBS=-ldl
    configure.cppflags-append \
        "-no-cpp-precomp"
}

platform darwin 10 {
    configure.env-append \
        LIBS=-lresolv
}

platform macosx {
    configure.args-append \
        --with-ldap=/usr
    if {${os.major} > 7} {
        configure.args-append \
            --with-iodbc=/usr
    }
}

variant no_web conflicts apache apache2 fastcgi description {Don't include any web server support} {}

# Build an Apache 1 module. On Mac OS X, it uses Apple's provided Apache 1 server.
# On other platforms, the MacPorts apache port is used. Keep the options here
# in sync with those in the relevant part of the post-destroot phase.
variant apache conflicts apache2 no_web description {Add Apache 1 web server module} {
    if { ! [variant_isset macosx] } {
        depends_lib-append \
            port:apache
        configure.args-append \
            --with-apxs=${prefix}/sbin/apxs
    } else {
        destroot.violate_mtree yes
        configure.args-append \
            --with-apxs=/usr/sbin/apxs
    }
}

# Build an Apache 2.2 module. Keep the options here in sync with those in the
# relevant part of the post-destroot phase.
variant apache2 conflicts apache no_web description {Add Apache 2.2 web server module (default)} {
    pre-fetch {
        if {[string match "*libmysqlclient_r.la*" [exec pkg-config --libs apr-util-1]]} {
            return -code error "${name} +apache2 can't be built while apr-util is installed with the +mysql5 variant. Deactivate or uninstall apr-util, reinstall apr-util without the +mysql5 variant, then clean ${name} and try installing it again."
        }
    }
    destroot.violate_mtree yes
    depends_lib-append \
        port:apache2
    configure.args-append \
        --with-apxs2=${prefix}/apache2/bin/apxs
}

# Build a FastCGI binary. Keep the options here in sync with those in the
# relevant part of the post-destroot phase.
variant fastcgi conflicts no_web description {Add FastCGI web server binary} {
    if { ![variant_isset apache] && ![variant_isset apache2] } {
        configure.args-delete \
            --disable-cgi
        configure.args-append \
            --enable-cgi
    }
}

foreach {old_variant new_port} {
    gmp             gmp
    imap            imap
    mssql           mssql
    mysql3          mysql
    mysql4          mysql
    mysql5          mysql
    mysqlnd         mysql
    oracle          oracle
    pcntl           pcntl
    postgresql82    postgresql
    postgresql83    postgresql
    pspell          pspell
    sockets         sockets
    sqlite          sqlite
    tidy            tidy
} {
    eval [subst {
        variant ${old_variant} description "Obsolete; install ${my_name}-${new_port} port instead" {
            pre-configure {
                ui_msg "The +${old_variant} variant has been replaced by the ${my_name}-${new_port} port"
            }
        }
    }]
}

variant dbase description {Add dBase file format support} {
    configure.args-append \
        --enable-dbase
}

variant snmp conflicts macports_snmp description {Add SNMP support using Apple SNMP} {
    # This compiles PHP5 with SNMP linked against Apple's included NET-SNMP.
    configure.args-append \
        --with-snmp=/usr
}

variant macports_snmp conflicts snmp description {Add SNMP support using MacPorts SNMP} {
    # This compiles PHP with SNMP linked against MacPorts' NET-SNMP.
    depends_lib-append \
        port:net-snmp
    configure.args-append \
        --with-snmp=${prefix}
}

variant ipc description {Add semaphore, shared memory and IPC functions} {
    configure.args-append \
        --enable-shmop \
        --enable-sysvsem \
        --enable-sysvshm \
        --enable-sysvmsg
}

if {![variant_isset apache] && ![variant_isset apache2] && ![variant_isset fastcgi] && ![variant_isset no_web]} {
    default_variants +apache2
}

variant pear description {Add PEAR} {
    configure.args-delete \
        --without-pear
    configure.args-append \
        --with-pear=${prefix}/lib/php
    destroot.target-append \
        install-pear
    destroot.args-append \
        PHP_PEAR_INSTALL_DIR=${prefix}/lib/php
    post-destroot {
        #nuke pear-stuff in ${destroot}
        system "cd ${destroot} && rm -rf .channels .depdb .depdblock .filemap .lock"
        
        system "if \[ -f ${prefix}/lib/php/.depdblock \]; then rm -f ${destroot}${prefix}/lib/php/.depdblock; fi"
        system "if \[ -f ${prefix}/lib/php/.depdb \]; then rm -f ${destroot}${prefix}/lib/php/.depdb; fi"
        system "if \[ -f ${prefix}/lib/php/.filemap \]; then rm -f ${destroot}${prefix}/lib/php/.filemap; fi"
        system "if \[ -f ${prefix}/lib/php/.lock \]; then rm -f ${destroot}${prefix}/lib/php/.lock; fi"
        system "if \[ -d ${prefix}/lib/php/.channels \]; then rm -rf ${destroot}${prefix}/lib/php/.channels; fi"
    }
}

destroot.args \
    INSTALL_ROOT=${destroot}

destroot.target \
    install-cli install-build install-headers install-programs

post-destroot {
    # Copy the Apache 1 module.
    if { [variant_isset apache] } {
        xinstall -m 755 -d ${destroot}${prefix}/libexec/apache \
            ${destroot}${prefix}/etc/apache/extras-conf
        xinstall -m 755 ${worksrcpath}/libs/libphp5.so ${destroot}${prefix}/libexec/apache/
        xinstall -m 755 -c ${filespath}/mod_php.conf ${destroot}$prefix/etc/apache/extras-conf
    }
    
    # Copy the Apache 2.2 module.
    if { [variant_isset apache2] } {
        xinstall -m 755 -d ${destroot}${prefix}/apache2/modules \
            ${destroot}${prefix}/apache2/conf/extras-conf
        xinstall -m 755 ${worksrcpath}/libs/libphp5.so ${destroot}${prefix}/apache2/modules/
        xinstall -m 755 -c ${filespath}/mod_php.conf ${destroot}${prefix}/apache2/conf/extras-conf
    }
    
    if { [variant_isset fastcgi] } {
        # If we've built an Apache module (any version) then the FastCGI binary
        # will not have been built, so we need to run through the whole process
        # again and build just the FastCGI binary. Keep the options here in sync
        # with the options specified in the apache and apache2 variants.
        if { [variant_isset apache] } {
            if { ![variant_isset macosx] } {
                configure.args-delete \
                    --with-apxs=${prefix}/sbin/apxs
            } else {
                configure.args-delete \
                    --with-apxs=/usr/sbin/apxs
            }
        }
        if { [variant_isset apache2] } {
            configure.args-delete \
                --with-apxs2=${prefix}/apache2/bin/apxs
        }
        
        # Run the build again to get the FastCGI binary. Keep the options here
        # in sync with those in the fastcgi variant.
        if { [variant_isset apache] || [variant_isset apache2] } {
            configure.args-delete \
                --disable-cgi
            configure.args-append \
                --enable-cgi
            ui_msg "$UI_PREFIX Configuring ${name} again for fastcgi"
            command_exec configure
            ui_msg "$UI_PREFIX Building ${name} again for fastcgi"
            command_exec build
            ui_msg "$UI_PREFIX Staging ${name} fastcgi into destroot"
        }
        
        # Copy the FastCGI binary to the bin dir under a new name so it doesn't
        # conflict with the cli version.
        xinstall -m 755 ${worksrcpath}/sapi/cgi/php-cgi ${destroot}${prefix}/bin
    }
    
    #file rename ${destroot}${prefix}/etc/pear.conf ${destroot}${prefix}/etc/pear.conf.sample
    
    # Copy the default php.ini files.
    xinstall -m 755 -d ${destroot}${phpinidir}
    xinstall -m 644 -W ${worksrcpath} \
        php.ini-development \
        php.ini-production \
        ${destroot}${phpinidir}
}

post-activate {
    if {[file exists ${prefix}/etc/php.ini] && ![file exists ${phpinidir}/php.ini]} {
        move ${prefix}/etc/php.ini ${phpinidir}
        ui_msg "Your ${prefix}/etc/php.ini has been moved to ${phpinidir}/php.ini"
        ui_msg ""
    }
    if {![file exists ${phpinidir}/php.ini]} {
        ui_msg "To customize php, copy"
        ui_msg "${phpinidir}/php.ini-development (if this is a development server) or"
        ui_msg "${phpinidir}/php.ini-production (if this is a production server) to"
        ui_msg "${phpinidir}/php.ini and then make changes."
    } else {
        ui_msg "You may need to update your php.ini for any changes that have been made"
        ui_msg "in this version of php. Compare ${phpinidir}/php.ini with"
        ui_msg "${phpinidir}/php.ini-development (if this is a development server) or"
        ui_msg "${phpinidir}/php.ini-production (if this is a production server)."
    }
    
    if {![variant_isset no_web]} {
        ui_msg ""
        ui_msg "If this is your first install, you need to activate PHP in your web server."
        if {![variant_isset fastcgi]} {
            if {[variant_isset apache]} {
                set moduledir ${prefix}/libexec/modules
                set apxs ${prefix}/apache/bin/apxs
            }
            if {[variant_isset apache2]} {
                set moduledir ${prefix}/apache2/modules
                set apxs ${prefix}/apache2/bin/apxs
            }
            ui_msg ""
            ui_msg "To enable PHP in Apache, run"
            ui_msg "  cd ${moduledir}"
            ui_msg "  ${apxs} -a -e -n \"${my_name}\" lib${my_name}.so"
        }
    }
    
    #ui_msg "* copy  ${prefix}/etc/pear.conf.sample to  ${prefix}/etc/pear.conf"
}

variant debug description {Enable debug support (useful to analyze a PHP-related core dump)} {
    configure.args-append   --enable-debug
}

test.run                yes

livecheck.check         regex
livecheck.url           ${homepage}downloads.php
livecheck.regex         get/php-(5\\.\[0-9.\]+)\\.tar
