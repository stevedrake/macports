# $Id$

PortSystem              1.0

name                    pure-devel
conflicts               pure
version                 0.36-r2454
categories              lang
platforms               darwin
maintainers             ryandesign
use_parallel_build      yes
homepage                http://pure-lang.googlecode.com/
master_sites            ${homepage}files/
universal_variant       no

fetch.type              svn
svn.url                 ${homepage}svn/trunk/pure
svn.revision            [strsed ${version} {g/^.*-r//}]
worksrcdir              pure

description \
    functional programming language based on term rewriting

long_description \
    Pure is a functional programming language based on term rewriting. \
    It has a modern syntax featuring curried function applications, lexical \
    closures and equational definitions with pattern matching, and thus is \
    somewhat similar to languages of the Haskell and ML variety. But Pure is \
    also a very dynamic and reflective language, and is more like Lisp in \
    this respect. The interpreter has an LLVM backend to do JIT compilation, \
    hence programs run blazingly fast and interfacing to C modules is easy.

# bison and flex aren't needed for released tarballs
depends_build \
    path:bin/llvm-config:llvm \
    port:bison \
    port:flex

depends_lib \
    port:gmp \
    port:gsl \
    port:libiconv \
    port:libtool \
    port:readline

depends_run \
    path:bin/w3m:w3m

patchfiles \
    patch-Makefile.in.diff

configure.args \
    --enable-gsl

platform macosx {
    depends_run-delete  path:bin/w3m:w3m
    depends_run-append  path:bin/openbrowser:openbrowser
    patchfiles-append   patch-openbrowser.diff
}

platform powerpc {
    configure.args-append --disable-fastcc
}

pre-extract {
    if {"i386" == ${os.arch}} {
        set arch Intel
        set llvm_minimum_version 2.4
    } else {
        set arch PowerPC
        set llvm_minimum_version 2.6
    }
    set llvm_installed_version [exec llvm-config --version]
    if {[rpm-vercomp ${llvm_installed_version} ${llvm_minimum_version}] < 0} {
        ui_error "${name} ${version} requires llvm ${llvm_minimum_version} or later on ${arch} but you have llvm ${llvm_installed_version}."
        return -code error "incompatible llvm version"
    }
}

test.run                yes
test.target             check

livecheck.version       [lindex [split ${version} -] 0]
livecheck.type          regex
livecheck.url           ${svn.url}/configure.ac
livecheck.regex         {pure, ([0-9.]+)}
