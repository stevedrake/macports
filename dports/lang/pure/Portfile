# $Id$

PortSystem              1.0

name                    pure
conflicts               pure-devel
version                 0.42
categories              lang
platforms               darwin
maintainers             ryandesign
license                 LGPLv3 GPLv3 BSD
use_parallel_build      yes
homepage                http://pure-lang.googlecode.com/
master_sites            ${homepage}files/
universal_variant       no

description \
    functional programming language based on term rewriting

long_description \
    Pure is a functional programming language based on term rewriting. \
    It has a modern syntax featuring curried function applications, lexical \
    closures and equational definitions with pattern matching, and thus is \
    somewhat similar to languages of the Haskell and ML variety. But Pure is \
    also a very dynamic and reflective language, and is more like Lisp in \
    this respect. The interpreter has an LLVM backend to do JIT compilation, \
    hence programs run blazingly fast and interfacing to C modules is easy. \
    The libraries are licensed under LGPLv3, the interpreter is GPLv3, and \
    the examples are BSD-licensed.

checksums \
    md5     b31db5619fb7ae9e8dd7abc066d4ccfd \
    sha1    45567ab4608fb2fc624ddd0fe754086570690078 \
    rmd160  0b542581e8bb119b3a0bb1f5f8e73b602436453e

depends_build \
    path:bin/llvm-config:llvm

depends_lib \
    port:gmp \
    port:libiconv \
    port:libtool \
    port:readline

depends_run \
    path:bin/w3m:w3m

patchfiles \
    patch-Makefile.in.diff

platform macosx {
    depends_run-delete  path:bin/w3m:w3m
    depends_run-append  path:bin/openbrowser:openbrowser
    patchfiles-append   patch-openbrowser.diff
}

platform powerpc {
    configure.args-append --disable-fastcc
}

pre-extract {
    if {"i386" == ${os.arch}} {
        set arch Intel
        set llvm_minimum_version 2.4
    } else {
        set arch PowerPC
        set llvm_minimum_version 2.6
    }
    set llvm_installed_version [exec llvm-config --version]
    if {[rpm-vercomp ${llvm_installed_version} ${llvm_minimum_version}] < 0} {
        ui_error "${name} ${version} requires llvm ${llvm_minimum_version} or later on ${arch} but you have llvm ${llvm_installed_version}."
        return -code error "incompatible llvm version"
    }
    set llvm_cflags [exec llvm-config --cflags]
    if {-1 != [string first -mdynamic-no-pic ${llvm_cflags}]} {
        ui_error "${name} ${version} requires llvm be compiled using position-independent code (PIC)"
        return -code error "incompatible llvm installation"
    }
}

post-destroot {
    set docdir ${destroot}${prefix}/share/doc/${name}
    xinstall -d ${docdir} ${destroot}${prefix}/share/examples
    xinstall -W ${worksrcpath} -m 644 \
        COPYING \
        COPYING.LESSER \
        ChangeLog \
        NEWS \
        README \
        TODO \
        ${docdir}
    copy ${worksrcpath}/examples ${destroot}${prefix}/share/examples/${name}
}

test.run                yes
test.target             check

livecheck.type          regex
livecheck.url           http://code.google.com/p/pure-lang/downloads/list
livecheck.regex         ${name}-(\[0-9.\]+\[a-z\]*)\\.tar
