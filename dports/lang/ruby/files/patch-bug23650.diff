diff -ur ../ruby-1.8.7-p249.mp-patched/eval.c ./eval.c
--- ../ruby-1.8.7-p249.mp-patched/eval.c	2010-03-15 21:50:40.000000000 +0900
+++ ./eval.c	2010-03-15 23:50:48.000000000 +0900
@@ -8887,8 +8887,7 @@
     _block = *data;
     _block.block_obj = bvar;
     if (self != Qundef) _block.frame.self = self;
-    _block.frame.last_class = klass;
-    if (!klass) _block.frame.last_func = 0;
+    if (klass) _block.frame.last_class = klass;
     _block.frame.argc = RARRAY(tmp)->len;
     _block.frame.flags = ruby_frame->flags;
     if (_block.frame.argc && DMETHOD_P()) {
@@ -9986,7 +9985,7 @@
     VALUE mod;
 {
     ID id;
-    VALUE body;
+    VALUE body, orig;
     NODE *node;
     int noex;
 
@@ -10005,6 +10004,7 @@
     else {
 	rb_raise(rb_eArgError, "wrong number of arguments (%d for 1)", argc);
     }
+    orig = body;
     if (RDATA(body)->dmark == (RUBY_DATA_FUNC)bm_mark) {
 	node = NEW_DMETHOD(method_unbind(body));
     }
@@ -10033,7 +10033,7 @@
 	}
     }
     rb_add_method(mod, id, node, noex);
-    return body;
+    return orig;
 }
 
 /*
diff -ur ../ruby-1.8.7-p249.mp-patched/test/ruby/test_super.rb ./test/ruby/test_super.rb
--- ../ruby-1.8.7-p249.mp-patched/test/ruby/test_super.rb	2009-12-14 12:39:41.000000000 +0900
+++ ./test/ruby/test_super.rb	2010-03-15 23:22:03.000000000 +0900
@@ -149,4 +149,25 @@
     c = C.new
     assert_equal([c, "#{C.to_s}::m"], c.m, bug2419)
   end
+
+  module Bug2537
+    class Parent
+      def run(a)
+        a
+      end
+    end
+
+    class Child < Parent
+      def run(*a)
+        proc {super(*a)}.call
+      end
+    end
+  end
+
+  def test_super_in_block_call
+    bug2537 = '[ruby-dev:39931]'
+    assert_nothing_raised(bug2537) do
+      assert_equal(bug2537, Bug2537::Child.new.run(bug2537), bug2537)
+    end
+  end
 end
