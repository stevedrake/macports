# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id$

PortSystem      1.0

name            fftw-3
version         3.2.1
categories      math
platforms       darwin
maintainers     takeshi@macports.org
homepage        http://www.fftw.org/
distname        fftw-${version}

master_sites \
	${homepage} \
	ftp://ftp.fftw.org/pub/fftw/ \
	ftp://ftp.kusastro.kyoto-u.ac.jp/pub/src/GNU/fftw/

description \
	Fast C routines to compute the Discrete Fourier Transform

long_description \
	FFTW is a C subroutine library for computing the \
	Discrete Fourier Transform (DFT) in one or more \
	dimensions, of both real and complex data, and of \
	arbitrary input size. We believe that FFTW, which is \
	free software, should become the FFT library of choice \
	for most applications. Our benchmarks, performed on a \
	variety of platforms, show that FFTW's performance is \
	typically superior to that of other publicly available \
	FFT software. Moreover, FFTW's performance is portable: \
	the program will perform well on most architectures \
	without modification. \
	This port is of fftw version 3.x. It has many \
	improvements relative to 2.x, but is not backwardly \
	compatible.

checksums md5 712d3f33625a0a76f5758648d4b925f7 \
          sha1 690a7cb4fb947a555eaf166cd098a43b61796723 \
          rmd160 b8537c9a245638ea01bbac7ca56862844be674be

configure.args \
	--enable-threads \
	--enable-fma \
	--disable-fortran \
	--enable-shared

configure.cflags-append -fno-common

test.run     yes
test.target  check

universal_variant yes
use_parallel_build yes

variant gcc42 description {create Fortran wrappers using gcc42} conflicts gcc43 g95 {
	depends_lib-append    port:gcc42
	configure.f77         gfortran-mp-4.2
	configure.args-delete --disable-fortran
}

variant gcc43 description {create Fortran wrappers using gcc43} conflicts gcc42 g95 {
	depends_lib-append    port:gcc43
	configure.f77         gfortran-mp-4.3
	configure.args-delete --disable-fortran
}

variant g95 description {create Fortran wrappers using f95} conflicts gcc42 gcc43 {
	depends_lib-append    port:g95
	configure.f77         g95
	configure.args-delete --disable-fortran
}

if {![info exists universal_archs]} {
    set universal_archs {i386 x86_64 ppc ppc64}
}
set first_arch [lindex ${universal_archs} 0]

set my_worksrcpaths ${worksrcpath}

variant universal {
	set my_worksrcpaths {}
	foreach arch ${universal_archs} {
		lappend my_worksrcpaths ${workpath}/${arch}
	}

	post-patch {
		foreach arch ${universal_archs} {
			if {[string equal ${arch} ${first_arch}]} {
				move ${worksrcpath} ${workpath}/${first_arch}
			} else {
				copy ${workpath}/${first_arch} ${workpath}/${arch}
			}
		}
	}
    
	configure {
		foreach arch ${universal_archs} {
			set my_arch_flag "-arch ${arch}"
			set my_cflags "${configure.cflags} -isysroot ${sysroot} ${my_arch_flag}"
			set my_ldflags "${configure.ldflags} ${my_arch_flag}"
			system "cd ${workpath}/${arch} && CFLAGS=\"${my_cflags}\" CXXFLAGS=\"${my_cflags}\" LDFLAGS=\"${my_ldflags}\" ${configure.cmd} ${configure.pre_args} ${configure.args}"
		}
	}
    
	build {
		foreach arch ${universal_archs} {
			system "cd ${workpath}/${arch} && ${build.cmd} ${build.pre_args}"
		}
	}

	destroot {
		system "cd ${workpath}/${first_arch} && ${destroot.cmd} ${destroot.pre_args} ${destroot.post_args}"
		foreach lib {libfftw3.3.dylib libfftw3.a} {
			set output_lib ${destroot}${prefix}/lib/${lib}
			set lipo_args {}
			foreach arch ${universal_archs} {
				lappend lipo_args -arch ${arch} ${workpath}/${arch}/.libs/${lib}
			}
			lappend lipo_args -create -output ${output_lib}
			delete ${output_lib}
			system "lipo ${lipo_args}"
		}

		foreach lib {libfftw3_threads.3.dylib libfftw3_threads.a} {
			set output_lib ${destroot}${prefix}/lib/${lib}
			set lipo_args {}
			foreach arch ${universal_archs} {
				lappend lipo_args -arch ${arch} ${workpath}/${arch}/threads/.libs/${lib}
			}
			lappend lipo_args -create -output ${output_lib}
			delete ${output_lib}
			system "lipo ${lipo_args}"
		}
	}
}

livecheck.check regex
livecheck.url   ${homepage}
livecheck.regex {FFTW (\d+(?:\.\d+)*) is the latest}
