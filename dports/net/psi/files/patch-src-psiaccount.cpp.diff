--- src/psiaccount.cpp	2009-07-26 23:02:03.000000000 +0200
+++ src/psiaccount.cpp	2009-08-05 22:53:55.000000000 +0200
@@ -901,9 +901,6 @@
 
 PsiAccount::~PsiAccount()
 {
-#ifdef __GNUC__
-#warning "Uncomment these"
-#endif
 #ifdef PSI_PLUGINS
 	// PluginManager::instance()->removeClient(this);
 #endif
@@ -1288,6 +1285,10 @@
 // disconnect or stop reconnecting
 void PsiAccount::logout(bool fast, const Status &s)
 {
+#ifdef PSI_PLUGINS  
+    PluginManager::instance()->logout(this);
+#endif
+
 	if(!isActive())
 		return;
 
@@ -1889,6 +1890,10 @@
 		UserResourceList::Iterator rit = u->userResourceList().find(j.resource());
 		bool found = (rit == u->userResourceList().end()) ? false: true;
 		if(!found) {
+#ifdef PSI_PLUGINS
+			PluginManager::instance()->contactOnline(this, j.node() + "@" + j.domain());
+#endif
+
 			popupType = PopupOnline;
 
 			UserResource ur(r);
@@ -2044,6 +2049,10 @@
 		PsiGrowlNotifier::instance()->popup(this, PsiPopup::AlertOffline, j, r, u);
 #endif
 	}
+#ifdef PSI_PLUGINS
+	PluginManager::instance()->contactOffline(this, j.node() + "@" + j.domain());
+#endif
+
 }
 
 void PsiAccount::client_presenceError(const Jid &j, int, const QString &str)
@@ -3002,7 +3011,6 @@
 			if(pp)
 				p = *pp;
 #ifdef __GNUC__
-#warning "Removed reparenting call from qwextend"
 #endif
 			//reparent_good(window, 0, false);
 			if(!p.isNull())
@@ -3639,6 +3647,25 @@
 		}
 	}
 
+#ifdef PSI_PLUGINS
+	if (nm.type() != "groupchat" && !nm.body().isEmpty())
+	{
+		QString body = nm.body();
+		QString subject = nm.subject();
+
+		PluginManager::instance()->processOutgoingMessage(this, nm.to().full(),
+		                                                  body, subject);
+		if (body != nm.body())
+		{
+			nm.setBody(body);
+		}
+		if (subject != nm.subject())
+		{
+			nm.setSubject(subject);
+		}
+	}
+#endif
+
 	d->client->sendMessage(nm);
 
 	// only toggle if not an invite or body is not empty
@@ -3913,6 +3940,53 @@
 	}
 	//FIXME(KIS): must now cause the event to be recreated from this xml or such. Horrid. 	
 #endif
+
+#ifdef PSI_PLUGINS
+	if(e->type() == PsiEvent::Message)
+	{
+        MessageEvent* messageEvent = (MessageEvent*) e;
+		Message message = messageEvent->message();
+
+		if (message.type() != "groupchat")
+		{
+
+			bool discard = false;
+			if (message.containsHTML() && !message.html().text().isEmpty())
+			{
+				HTMLElement htmlElement = message.html();
+				QDomElement htmlBody = htmlElement.body();
+				QString subject = message.subject();
+
+				discard = PluginManager::instance()->processMessage(this, e->from().full(),
+			                                                        htmlBody, subject);
+				htmlElement.setBody(htmlBody);
+				message.setHTML(htmlElement, message.lang());
+				message.setBody(htmlElement.text());
+				message.setSubject(subject);
+			}
+			else if (!message.body().isEmpty())
+			{
+				QString body = message.body();
+				QString subject = message.subject();
+
+				discard = PluginManager::instance()->processMessage(this, e->from().full(),
+			                                                        body, subject);
+				message.setBody(body);
+				message.setSubject(subject);
+			}
+
+			if (discard)
+			{
+				delete e;
+				return;
+			}
+	
+			messageEvent->setMessage(message);
+		}
+	}
+#endif
+
+
 	
 	if(d->acc.opt_log && activationType != FromXml) {
 		if(e->type() == PsiEvent::Message || e->type() == PsiEvent::Auth) {
@@ -3926,20 +4000,6 @@
 		MessageEvent *me = (MessageEvent *)e;
 		const Message &m = me->message();
 
-#ifdef PSI_PLUGINS
-		//TODO(mck): clean up
-		//UserListItem *ulItem=NULL;
-		//if ( !ul.isEmpty() )
-		//	ulItem=ul.first();
-		if (PluginManager::instance()->processMessage(this, e->from().full(), m.body(), m.subject())) {
-			delete e;
-			return;
-		}
-		//PluginManager::instance()->message(this,e->from(),ulItem,((MessageEvent*)e)->message().body());
-#endif
-
-
-
 		// Pass message events to chat window
 		if ((m.containsEvents() || m.chatState() != StateNone) && m.body().isEmpty()) {
 			if (PsiOptions::instance()->getOption("options.messages.send-composing-events").toBool()) {
