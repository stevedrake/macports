# $Id: Portfile,v 1.14 2005/10/04 13:53:08 yeled Exp $
PortSystem		1.0
PortGroup		python24 1.0
name			py-rdiff-backup
version			1.0.1
categories-append	net
maintainers		yeled@opendarwin.org
description		backs up one directory to another, possibly over a network
long_description	rdiff-backup backs up one directory to another, \
					possibly over a network. The target directory ends \
					up a copy of the source directory, but extra reverse \
					diffs are stored in a special subdirectory of that \
					target directory, so you can still recover files \
					lost some time ago. The idea is to combine the best \
					features of a mirror and an incremental backup. \
					rdiff-backup also preserves subdirectories, hard \
					links, dev files, permissions, uid/gid ownership, \
					and modification times. Also, rdiff-backup can \
					operate in a bandwidth efficient manner over a pipe, \
					like rsync. Thus you can use rdiff-backup and ssh to \
					securely back a hard drive up to a remote location, \
					and only the differences will be transmitted. \
					Finally, rdiff-backup is easy to use and settings \
					have sensical defaults.
homepage		http://www.nongnu.org/rdiff-backup/
master_sites	http://savannah.nongnu.org/download/rdiff-backup/
distname		rdiff-backup-${version}
checksums		md5 765e8c97c696eeb7b19006d9ed0967be
platforms		darwin

depends_lib-append	lib:librsync:librsync

patchfiles		patch-setup.py \
				patch-rdiff-backup.1
post-patch {
	reinplace "s|@PREFIX@|${prefix}|" ${worksrcpath}/rdiff-backup.1
}

build.args		--librsync-dir=${prefix}

variant devel {
	version		0.13.4
	checksums	md5 43a5e98751371fb1852fb2ebeed38e77
	distname	rdiff-backup-${version}

	patchfiles-append	patch-Main.py \
						patch-fs_abilities.py \
						patch-Security.py
}

variant cvs {
	set date		20041018
	version			0.13.5
	fetch.type		cvs
	cvs.env			CVS_RSH=[binaryInPath ssh]
	cvs.root		:ext:anoncvs@savannah.nongnu.org:/cvsroot/rdiff-backup
	cvs.module		rdiff-backup
	cvs.args		-D'${date}'
	worksrcdir		${cvs.module}-${version}

	pre-extract {
		set python [file tail ${python.bin}]
		if {[catch {set python [binaryInPath $python]}] == 0} {
			cd ${workpath}/${cvs.module}
			system "${python} dist/makedist ${version}"
			system "gunzip -c ${cvs.module}-${version}.tar.gz \
				| tar xvf - -C ${workpath}"
		} else {
			ui_error "Could not locate $python binary in search path!"
			exit 1
		}
	}

	patchfiles-append	patch-Main.py-cvs \
						patch-fs_abilities.py \
						patch-Security.py
}

# Variant to add some custom code patches for added functionality not
# yet incorporated by the original author (yet).
variant custom {
	if {[variant_isset devel] || [variant_isset cvs]} {
		patchfiles-append	patch-exclude-options \
							patch-print-abilities
	}
	pre-configure {
		cd ${worksrcpath}
		reinplace "s|${version}|${version}.${revision}|" setup.py
		reinplace "s|${version}|${version}.${revision}|" rdiff_backup/Globals.py
	}
}

