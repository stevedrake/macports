--- test/1.4/domTest.cpp.orig	2010-02-16 18:34:11.000000000 +0100
+++ test/1.4/domTest.cpp	2010-02-16 18:35:22.000000000 +0100
@@ -1,9 +1,9 @@
-/*
-* Copyright 2006 Sony Computer Entertainment Inc.
-*
-* Licensed under the MIT Open Source License, for details please see license.txt or the website
-* http://www.opensource.org/licenses/mit-license.php
-*
+/*
+* Copyright 2006 Sony Computer Entertainment Inc.
+*
+* Licensed under the MIT Open Source License, for details please see license.txt or the website
+* http://www.opensource.org/licenses/mit-license.php
+*
 */ 
 #include <cstdarg>
 #include <iostream>
@@ -123,15 +123,15 @@
 	CheckResult(replace("abc123", "bc12", "b") == "ab3");
 	CheckResult(replace("abracadabra", "a", "") == "brcdbr");
 
-	CheckResult(tokenize("1|2|3|4", "|")   == makeStringList("1", "2", "3", "4", 0));
-	CheckResult(tokenize("|1|", "|")       == makeStringList("1", 0));
-	CheckResult(tokenize("1|||2||3|", "|") == makeStringList("1", "2", "3", 0));
+	CheckResult(tokenize("1|2|3|4", "|")   == makeStringList("1", "2", "3", "4", NULL));
+	CheckResult(tokenize("|1|", "|")       == makeStringList("1", NULL));
+	CheckResult(tokenize("1|||2||3|", "|") == makeStringList("1", "2", "3", NULL));
 	CheckResult(tokenize("1|||2||3|", "|", true) ==
-	            makeStringList("1", "|", "|", "|", "2", "|", "|", "3", "|", 0));
+	            makeStringList("1", "|", "|", "|", "2", "|", "|", "3", "|", NULL));
 	CheckResult(tokenize("this/is some#text", "/#", true) ==
-	            makeStringList("this", "/", "is some", "#", "text", 0));
+	            makeStringList("this", "/", "is some", "#", "text", NULL));
 	CheckResult(tokenize("this/is some#text", "/# ", false) ==
-	            makeStringList("this", "is", "some", "text", 0));
+	            makeStringList("this", "is", "some", "text", NULL));
 
 	CheckResult(toString(5) == "5");
 	CheckResult(toFloat(toString(4.0f)) == 4.0f);
@@ -822,17 +822,17 @@
 	daeElement* node = dae.getDatabase()->idLookup("Box").at(0);
 
 	CheckResult(getChildNames(node) == makeStringArray(
-		"rotate", "rotate", "rotate", "instance_geometry", 0));
+		"rotate", "rotate", "rotate", "instance_geometry", NULL));
 
 	// Place a new <translate> after the first <rotate> using placeElementAfter, and
 	// make sure the <translate> shows up in the right spot.
 	node->placeElementAfter(node->getChildren()[0], node->createElement("translate"));
 	CheckResult(getChildNames(node) == makeStringArray(
-		"rotate", "translate", "rotate", "rotate", "instance_geometry", 0));
+		"rotate", "translate", "rotate", "rotate", "instance_geometry", NULL));
 
 	node->placeElementBefore(node->getChildren()[0], node->createElement("scale"));
 	CheckResult(getChildNames(node) == makeStringArray(
-		"scale", "rotate", "translate", "rotate", "rotate", "instance_geometry", 0));
+		"scale", "rotate", "translate", "rotate", "rotate", "instance_geometry", NULL));
 
 	return testResult(true);
 };
